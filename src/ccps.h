
/* written by plasma_cwrite.py */
/* input: plasma_state_spec.dat   version 2.054 */
/*  *** do not edit *** (use code generator instead) */

#ifndef CCPS_H
#define CCPS_H

#include "fpreproc/f77name.h"

/* include manually maintained methods */
#include "cpp/ccps_base.h"

#ifdef __cplusplus
extern "C" {
#endif
        

/**
 * Get Tokamak (Machine Description) ID, <tokid>_<revid> within a 32 character string.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tokamak_id F77NAME(psget_tokamak_id)
void psGet_tokamak_id(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Tokamak (Machine Description) ID, <tokid>_<revid> within a 32 character string.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tokamak_id F77NAME(psset_tokamak_id)
void psSet_tokamak_id(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Tokamak (Machine Description) ID, <tokid>_<revid> within a 32 character string.
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_tokamak_id F77NAME(psgetsz_tokamak_id)
void psGetSz_tokamak_id(int* iobj, int* size, int* ierr); 

/**
 * Get path to file(s) vac. vessel & coil descr.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_geometry F77NAME(psget_geometry)
void psGet_geometry(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set path to file(s) vac. vessel & coil descr.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_geometry F77NAME(psset_geometry)
void psSet_geometry(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of path to file(s) vac. vessel & coil descr.
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_geometry F77NAME(psgetsz_geometry)
void psGetSz_geometry(int* iobj, int* size, int* ierr); 

/**
 * Get number of points, axisymmetric (R,Z) limiter, dimension for rlim & zlim -- closed axisymmetric piecewise linear, contour describing axisymmetric limiter or vacuum vessel wall, expect rlim(1)=rlim(num_rzlim) and zlim(1)=zlim(num_rzlim)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_num_rzlim F77NAME(psget_num_rzlim)
void psGet_num_rzlim(int* iobj, int* data, int* ierr);

/**
 * Set number of points, axisymmetric (R,Z) limiter, dimension for rlim & zlim -- closed axisymmetric piecewise linear, contour describing axisymmetric limiter or vacuum vessel wall, expect rlim(1)=rlim(num_rzlim) and zlim(1)=zlim(num_rzlim)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_num_rzlim F77NAME(psset_num_rzlim)
void psSet_num_rzlim(int* iobj, const int* data, int* ierr);

/**
 * Get R points in closed (R,Z) contour sequence
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rlim F77NAME(psget_rlim)
void psGet_rlim(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set R points in closed (R,Z) contour sequence
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rlim F77NAME(psset_rlim)
void psSet_rlim(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of R points in closed (R,Z) contour sequence
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rlim F77NAME(psgetrnk_rlim)
void psGetRnk_rlim(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R points in closed (R,Z) contour sequence
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rlim F77NAME(psgetdim_rlim)
void psGetDim_rlim(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Z points in closed (R,Z) contour sequence
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zlim F77NAME(psget_zlim)
void psGet_zlim(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Z points in closed (R,Z) contour sequence
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zlim F77NAME(psset_zlim)
void psSet_zlim(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Z points in closed (R,Z) contour sequence
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_zlim F77NAME(psgetrnk_zlim)
void psGetRnk_zlim(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Z points in closed (R,Z) contour sequence
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_zlim F77NAME(psgetdim_zlim)
void psGetDim_zlim(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get R_min of bounding box
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_min_box F77NAME(psget_r_min_box)
void psGet_r_min_box(int* iobj, double* data, int* ierr);

/**
 * Set R_min of bounding box
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_min_box F77NAME(psset_r_min_box)
void psSet_r_min_box(int* iobj, const double* data, int* ierr);

/**
 * Get R_max of bounding box
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_max_box F77NAME(psget_r_max_box)
void psGet_r_max_box(int* iobj, double* data, int* ierr);

/**
 * Set R_max of bounding box
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_max_box F77NAME(psset_r_max_box)
void psSet_r_max_box(int* iobj, const double* data, int* ierr);

/**
 * Get Z_min of bounding box
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_min_box F77NAME(psget_z_min_box)
void psGet_z_min_box(int* iobj, double* data, int* ierr);

/**
 * Set Z_min of bounding box
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_min_box F77NAME(psset_z_min_box)
void psSet_z_min_box(int* iobj, const double* data, int* ierr);

/**
 * Get Z_max of bounding box
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_max_box F77NAME(psget_z_max_box)
void psGet_z_max_box(int* iobj, double* data, int* ierr);

/**
 * Set Z_max of bounding box
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_max_box F77NAME(psset_z_max_box)
void psSet_z_max_box(int* iobj, const double* data, int* ierr);

/**
 * Get item list dimension of circuit_name (pf_circuits)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ncircuits F77NAME(psget_ncircuits)
void psGet_ncircuits(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of circuit_name (pf_circuits)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ncircuits F77NAME(psset_ncircuits)
void psSet_ncircuits(int* iobj, const int* data, int* ierr);

/**
 * Get Number & names of circuits, connecting coils affecting poloidal field-- axisymmetric coils,, or eddy currents represented as cancelling coil pairs
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_circuit_name F77NAME(psget_circuit_name)
void psGet_circuit_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set Number & names of circuits, connecting coils affecting poloidal field-- axisymmetric coils,, or eddy currents represented as cancelling coil pairs
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_circuit_name F77NAME(psset_circuit_name)
void psSet_circuit_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Number & names of circuits, connecting coils affecting poloidal field-- axisymmetric coils,, or eddy currents represented as cancelling coil pairs
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_circuit_name F77NAME(psgetsz_circuit_name)
void psGetSz_circuit_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of Number & names of circuits, connecting coils affecting poloidal field-- axisymmetric coils,, or eddy currents represented as cancelling coil pairs
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_circuit_name F77NAME(psgetrnk_circuit_name)
void psGetRnk_circuit_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Number & names of circuits, connecting coils affecting poloidal field-- axisymmetric coils,, or eddy currents represented as cancelling coil pairs
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_circuit_name F77NAME(psgetdim_circuit_name)
void psGetDim_circuit_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of coil_name (pf_coils)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ncoils F77NAME(psget_ncoils)
void psGet_ncoils(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of coil_name (pf_coils)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ncoils F77NAME(psset_ncoils)
void psSet_ncoils(int* iobj, const int* data, int* ierr);

/**
 * Get Number & name of axisymmetric coils
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_coil_name F77NAME(psget_coil_name)
void psGet_coil_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set Number & name of axisymmetric coils
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_coil_name F77NAME(psset_coil_name)
void psSet_coil_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Number & name of axisymmetric coils
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_coil_name F77NAME(psgetsz_coil_name)
void psGetSz_coil_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of Number & name of axisymmetric coils
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_coil_name F77NAME(psgetrnk_coil_name)
void psGetRnk_coil_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Number & name of axisymmetric coils
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_coil_name F77NAME(psgetdim_coil_name)
void psGetDim_coil_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get circuit to which each coil belongs, (each must exactly match a name in the circuit_name(...) list).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_coil_in_circuit F77NAME(psget_coil_in_circuit)
void psGet_coil_in_circuit(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set circuit to which each coil belongs, (each must exactly match a name in the circuit_name(...) list).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_coil_in_circuit F77NAME(psset_coil_in_circuit)
void psSet_coil_in_circuit(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of circuit to which each coil belongs, (each must exactly match a name in the circuit_name(...) list).
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_coil_in_circuit F77NAME(psgetsz_coil_in_circuit)
void psGetSz_coil_in_circuit(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of circuit to which each coil belongs, (each must exactly match a name in the circuit_name(...) list).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_coil_in_circuit F77NAME(psgetrnk_coil_in_circuit)
void psGetRnk_coil_in_circuit(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of circuit to which each coil belongs, (each must exactly match a name in the circuit_name(...) list).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_coil_in_circuit F77NAME(psgetdim_coil_in_circuit)
void psGetDim_coil_in_circuit(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get R location of coil, lower left corner
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rloc_coil F77NAME(psget_rloc_coil)
void psGet_rloc_coil(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set R location of coil, lower left corner
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rloc_coil F77NAME(psset_rloc_coil)
void psSet_rloc_coil(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of R location of coil, lower left corner
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rloc_coil F77NAME(psgetrnk_rloc_coil)
void psGetRnk_rloc_coil(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R location of coil, lower left corner
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rloc_coil F77NAME(psgetdim_rloc_coil)
void psGetDim_rloc_coil(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Z location of coil, lower left corner
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zloc_coil F77NAME(psget_zloc_coil)
void psGet_zloc_coil(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Z location of coil, lower left corner
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zloc_coil F77NAME(psset_zloc_coil)
void psSet_zloc_coil(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Z location of coil, lower left corner
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_zloc_coil F77NAME(psgetrnk_zloc_coil)
void psGetRnk_zloc_coil(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Z location of coil, lower left corner
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_zloc_coil F77NAME(psgetdim_zloc_coil)
void psGetDim_zloc_coil(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get (Rotatable) Horizontal coil base size
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_hsize_coil F77NAME(psget_hsize_coil)
void psGet_hsize_coil(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set (Rotatable) Horizontal coil base size
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_hsize_coil F77NAME(psset_hsize_coil)
void psSet_hsize_coil(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of (Rotatable) Horizontal coil base size
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_hsize_coil F77NAME(psgetrnk_hsize_coil)
void psGetRnk_hsize_coil(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of (Rotatable) Horizontal coil base size
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_hsize_coil F77NAME(psgetdim_hsize_coil)
void psGetDim_hsize_coil(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get angle w.r.t. horizontal of coil base, zero means, base is alligned horizontally, +10 (degrees) means, tilted up to the right;, -10 (degrees) means, tilted down to the right
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ang_href_coil F77NAME(psget_ang_href_coil)
void psGet_ang_href_coil(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set angle w.r.t. horizontal of coil base, zero means, base is alligned horizontally, +10 (degrees) means, tilted up to the right;, -10 (degrees) means, tilted down to the right
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ang_href_coil F77NAME(psset_ang_href_coil)
void psSet_ang_href_coil(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of angle w.r.t. horizontal of coil base, zero means, base is alligned horizontally, +10 (degrees) means, tilted up to the right;, -10 (degrees) means, tilted down to the right
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ang_href_coil F77NAME(psgetrnk_ang_href_coil)
void psGetRnk_ang_href_coil(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of angle w.r.t. horizontal of coil base, zero means, base is alligned horizontally, +10 (degrees) means, tilted up to the right;, -10 (degrees) means, tilted down to the right
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ang_href_coil F77NAME(psgetdim_ang_href_coil)
void psGetDim_ang_href_coil(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get (Rotatable) Vertical coil size
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vsize_coil F77NAME(psget_vsize_coil)
void psGet_vsize_coil(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set (Rotatable) Vertical coil size
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vsize_coil F77NAME(psset_vsize_coil)
void psSet_vsize_coil(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of (Rotatable) Vertical coil size
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vsize_coil F77NAME(psgetrnk_vsize_coil)
void psGetRnk_vsize_coil(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of (Rotatable) Vertical coil size
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vsize_coil F77NAME(psgetdim_vsize_coil)
void psGetDim_vsize_coil(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get angle w.r.t. vertical of coil sides, zero means, walls are alligned vertically, +10 (degrees) means, tilted up and to left 10 degrees from vertical, -10 (degrees) means, tilted up and to right, 10 degrees from vertical
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ang_vref_coil F77NAME(psget_ang_vref_coil)
void psGet_ang_vref_coil(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set angle w.r.t. vertical of coil sides, zero means, walls are alligned vertically, +10 (degrees) means, tilted up and to left 10 degrees from vertical, -10 (degrees) means, tilted up and to right, 10 degrees from vertical
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ang_vref_coil F77NAME(psset_ang_vref_coil)
void psSet_ang_vref_coil(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of angle w.r.t. vertical of coil sides, zero means, walls are alligned vertically, +10 (degrees) means, tilted up and to left 10 degrees from vertical, -10 (degrees) means, tilted up and to right, 10 degrees from vertical
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ang_vref_coil F77NAME(psgetrnk_ang_vref_coil)
void psGetRnk_ang_vref_coil(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of angle w.r.t. vertical of coil sides, zero means, walls are alligned vertically, +10 (degrees) means, tilted up and to left 10 degrees from vertical, -10 (degrees) means, tilted up and to right, 10 degrees from vertical
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ang_vref_coil F77NAME(psgetdim_ang_vref_coil)
void psGetDim_ang_vref_coil(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SIGNED number of conductor turns wrapped in each coil, + means, a positive current flows counter-clockwise viewed from above;, - means, a positive current flows clockwise viewed from above;
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nturns F77NAME(psget_nturns)
void psGet_nturns(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set SIGNED number of conductor turns wrapped in each coil, + means, a positive current flows counter-clockwise viewed from above;, - means, a positive current flows clockwise viewed from above;
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nturns F77NAME(psset_nturns)
void psSet_nturns(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of SIGNED number of conductor turns wrapped in each coil, + means, a positive current flows counter-clockwise viewed from above;, - means, a positive current flows clockwise viewed from above;
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nturns F77NAME(psgetrnk_nturns)
void psGetRnk_nturns(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIGNED number of conductor turns wrapped in each coil, + means, a positive current flows counter-clockwise viewed from above;, - means, a positive current flows clockwise viewed from above;
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nturns F77NAME(psgetdim_nturns)
void psGetDim_nturns(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get replication count, vertical coil stack, default: 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vrep_coil_count F77NAME(psget_vrep_coil_count)
void psGet_vrep_coil_count(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set replication count, vertical coil stack, default: 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vrep_coil_count F77NAME(psset_vrep_coil_count)
void psSet_vrep_coil_count(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of replication count, vertical coil stack, default: 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vrep_coil_count F77NAME(psgetrnk_vrep_coil_count)
void psGetRnk_vrep_coil_count(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of replication count, vertical coil stack, default: 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vrep_coil_count F77NAME(psgetdim_vrep_coil_count)
void psGetDim_vrep_coil_count(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get replicated coil separation, (only meaningful for coils {k} with VRep_coil_count(k) > 1).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vrep_coil_spacing F77NAME(psget_vrep_coil_spacing)
void psGet_vrep_coil_spacing(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set replicated coil separation, (only meaningful for coils {k} with VRep_coil_count(k) > 1).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vrep_coil_spacing F77NAME(psset_vrep_coil_spacing)
void psSet_vrep_coil_spacing(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of replicated coil separation, (only meaningful for coils {k} with VRep_coil_count(k) > 1).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vrep_coil_spacing F77NAME(psgetrnk_vrep_coil_spacing)
void psGetRnk_vrep_coil_spacing(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of replicated coil separation, (only meaningful for coils {k} with VRep_coil_count(k) > 1).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vrep_coil_spacing F77NAME(psgetdim_vrep_coil_spacing)
void psGetDim_vrep_coil_spacing(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get coil resistance per turn, total resistance (ohms) of coil j: abs(Nturns(j))*coil_resispt(j)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_coil_resispt F77NAME(psget_coil_resispt)
void psGet_coil_resispt(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set coil resistance per turn, total resistance (ohms) of coil j: abs(Nturns(j))*coil_resispt(j)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_coil_resispt F77NAME(psset_coil_resispt)
void psSet_coil_resispt(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of coil resistance per turn, total resistance (ohms) of coil j: abs(Nturns(j))*coil_resispt(j)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_coil_resispt F77NAME(psgetrnk_coil_resispt)
void psGetRnk_coil_resispt(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of coil resistance per turn, total resistance (ohms) of coil j: abs(Nturns(j))*coil_resispt(j)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_coil_resispt F77NAME(psgetdim_coil_resispt)
void psGetDim_coil_resispt(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of nbi_src_name (neutral_beams)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbeam F77NAME(psget_nbeam)
void psGet_nbeam(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of nbi_src_name (neutral_beams)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbeam F77NAME(psset_nbeam)
void psSet_nbeam(int* iobj, const int* data, int* ierr);

/**
 * Get number & name of neutral beams
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbi_src_name F77NAME(psget_nbi_src_name)
void psGet_nbi_src_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set number & name of neutral beams
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbi_src_name F77NAME(psset_nbi_src_name)
void psSet_nbi_src_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of number & name of neutral beams
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_nbi_src_name F77NAME(psgetsz_nbi_src_name)
void psGetSz_nbi_src_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of number & name of neutral beams
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nbi_src_name F77NAME(psgetrnk_nbi_src_name)
void psGetRnk_nbi_src_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number & name of neutral beams
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nbi_src_name F77NAME(psgetdim_nbi_src_name)
void psGetDim_nbi_src_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam type:, "standard", H/D/T beam using standard full-half-third energy, injection fractions; energy dependence of standard beam energy, fractions are defined as part of the machine description, "negative_ion", H/D/T beam 100% injected at full energy, "Helium" for Helium or He3 beam, energy fraction is 100% full energy., "Impurity" for injection of one of: {Ne,Ar,Xe,Kr}: 100% full energy.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_beam_type F77NAME(psget_beam_type)
void psGet_beam_type(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set beam type:, "standard", H/D/T beam using standard full-half-third energy, injection fractions; energy dependence of standard beam energy, fractions are defined as part of the machine description, "negative_ion", H/D/T beam 100% injected at full energy, "Helium" for Helium or He3 beam, energy fraction is 100% full energy., "Impurity" for injection of one of: {Ne,Ar,Xe,Kr}: 100% full energy.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_beam_type F77NAME(psset_beam_type)
void psSet_beam_type(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of beam type:, "standard", H/D/T beam using standard full-half-third energy, injection fractions; energy dependence of standard beam energy, fractions are defined as part of the machine description, "negative_ion", H/D/T beam 100% injected at full energy, "Helium" for Helium or He3 beam, energy fraction is 100% full energy., "Impurity" for injection of one of: {Ne,Ar,Xe,Kr}: 100% full energy.
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_beam_type F77NAME(psgetsz_beam_type)
void psGetSz_beam_type(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of beam type:, "standard", H/D/T beam using standard full-half-third energy, injection fractions; energy dependence of standard beam energy, fractions are defined as part of the machine description, "negative_ion", H/D/T beam 100% injected at full energy, "Helium" for Helium or He3 beam, energy fraction is 100% full energy., "Impurity" for injection of one of: {Ne,Ar,Xe,Kr}: 100% full energy.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_beam_type F77NAME(psgetrnk_beam_type)
void psGetRnk_beam_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam type:, "standard", H/D/T beam using standard full-half-third energy, injection fractions; energy dependence of standard beam energy, fractions are defined as part of the machine description, "negative_ion", H/D/T beam 100% injected at full energy, "Helium" for Helium or He3 beam, energy fraction is 100% full energy., "Impurity" for injection of one of: {Ne,Ar,Xe,Kr}: 100% full energy.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_beam_type F77NAME(psgetdim_beam_type)
void psGetDim_beam_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get signed tangency radius, This is the major radius of tangency of the neutral beam centerlines--, i.e. the distance of closest approach of each beam centerline to the, machine axis, in meters., Sign convention: + for beams which impart angular momentum in the, counter-clockwise direction around the torus as viewed from above.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_srtcen F77NAME(psget_srtcen)
void psGet_srtcen(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set signed tangency radius, This is the major radius of tangency of the neutral beam centerlines--, i.e. the distance of closest approach of each beam centerline to the, machine axis, in meters., Sign convention: + for beams which impart angular momentum in the, counter-clockwise direction around the torus as viewed from above.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_srtcen F77NAME(psset_srtcen)
void psSet_srtcen(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of signed tangency radius, This is the major radius of tangency of the neutral beam centerlines--, i.e. the distance of closest approach of each beam centerline to the, machine axis, in meters., Sign convention: + for beams which impart angular momentum in the, counter-clockwise direction around the torus as viewed from above.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_srtcen F77NAME(psgetrnk_srtcen)
void psGetRnk_srtcen(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of signed tangency radius, This is the major radius of tangency of the neutral beam centerlines--, i.e. the distance of closest approach of each beam centerline to the, machine axis, in meters., Sign convention: + for beams which impart angular momentum in the, counter-clockwise direction around the torus as viewed from above.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_srtcen F77NAME(psgetdim_srtcen)
void psGetDim_srtcen(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get distance, source to tangency point, This is the length of the centerline from the center of the neutral', "beam's original ion source to the centerline tangency point, |sRtcen|", 'from the machine axis.  The length is given in meters.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lbsctan F77NAME(psget_lbsctan)
void psGet_lbsctan(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set distance, source to tangency point, This is the length of the centerline from the center of the neutral', "beam's original ion source to the centerline tangency point, |sRtcen|", 'from the machine axis.  The length is given in meters.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lbsctan F77NAME(psset_lbsctan)
void psSet_lbsctan(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of distance, source to tangency point, This is the length of the centerline from the center of the neutral', "beam's original ion source to the centerline tangency point, |sRtcen|", 'from the machine axis.  The length is given in meters.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_lbsctan F77NAME(psgetrnk_lbsctan)
void psGetRnk_lbsctan(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of distance, source to tangency point, This is the length of the centerline from the center of the neutral', "beam's original ion source to the centerline tangency point, |sRtcen|", 'from the machine axis.  The length is given in meters.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_lbsctan F77NAME(psgetdim_lbsctan)
void psGetDim_lbsctan(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get elevation of beam source, Elevation of beam centerline at source (+ above) (- below), machine midplane as defined by Z=0 in the equilibrium specification, (the default, 0.0, centers beam source in the machine midplane).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zbsc F77NAME(psget_zbsc)
void psGet_zbsc(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set elevation of beam source, Elevation of beam centerline at source (+ above) (- below), machine midplane as defined by Z=0 in the equilibrium specification, (the default, 0.0, centers beam source in the machine midplane).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zbsc F77NAME(psset_zbsc)
void psSet_zbsc(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of elevation of beam source, Elevation of beam centerline at source (+ above) (- below), machine midplane as defined by Z=0 in the equilibrium specification, (the default, 0.0, centers beam source in the machine midplane).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_zbsc F77NAME(psgetrnk_zbsc)
void psGetRnk_zbsc(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of elevation of beam source, Elevation of beam centerline at source (+ above) (- below), machine midplane as defined by Z=0 in the equilibrium specification, (the default, 0.0, centers beam source in the machine midplane).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_zbsc F77NAME(psgetdim_zbsc)
void psGetDim_zbsc(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get toroidal location of beam source, Angle of location of beam centerline at source, with respect to some, reference Phi=0 vertical plane.  Phi is assumed to increase in the, counter-clockwise direction of the torus when viewed from above, i.e., (R,phi,Z) form a right handed coordinate system.  The setting of, Phibsc does not affect beam heating in axisymmetric simulations.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_phibsc F77NAME(psget_phibsc)
void psGet_phibsc(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set toroidal location of beam source, Angle of location of beam centerline at source, with respect to some, reference Phi=0 vertical plane.  Phi is assumed to increase in the, counter-clockwise direction of the torus when viewed from above, i.e., (R,phi,Z) form a right handed coordinate system.  The setting of, Phibsc does not affect beam heating in axisymmetric simulations.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_phibsc F77NAME(psset_phibsc)
void psSet_phibsc(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of toroidal location of beam source, Angle of location of beam centerline at source, with respect to some, reference Phi=0 vertical plane.  Phi is assumed to increase in the, counter-clockwise direction of the torus when viewed from above, i.e., (R,phi,Z) form a right handed coordinate system.  The setting of, Phibsc does not affect beam heating in axisymmetric simulations.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_phibsc F77NAME(psgetrnk_phibsc)
void psGetRnk_phibsc(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of toroidal location of beam source, Angle of location of beam centerline at source, with respect to some, reference Phi=0 vertical plane.  Phi is assumed to increase in the, counter-clockwise direction of the torus when viewed from above, i.e., (R,phi,Z) form a right handed coordinate system.  The setting of, Phibsc does not affect beam heating in axisymmetric simulations.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_phibsc F77NAME(psgetdim_phibsc)
void psGetDim_phibsc(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get distance, source to aperture, Distance of beam centerline from source to aperture into vacuum vessel
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lbscap F77NAME(psget_lbscap)
void psGet_lbscap(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set distance, source to aperture, Distance of beam centerline from source to aperture into vacuum vessel
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lbscap F77NAME(psset_lbscap)
void psSet_lbscap(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of distance, source to aperture, Distance of beam centerline from source to aperture into vacuum vessel
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_lbscap F77NAME(psgetrnk_lbscap)
void psGetRnk_lbscap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of distance, source to aperture, Distance of beam centerline from source to aperture into vacuum vessel
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_lbscap F77NAME(psgetdim_lbscap)
void psGetDim_lbscap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get elevation of beam centerline at aperture, At a distance (Lbscap) from the beam source, the beam centerline, passes above (+) or below (-) machine midplane as defined by Z=0, in the equilibrium specification.  If defaulted, the centerline, is centered on the midplane (Z=0) when it crosses the plane of the, aperture.  If both Zbap(...) and Zbsc(...) are defaulted, the, entire beam centerline lies in the midplane., Note that Z at the beam centerline tangency radius is:, Ztan = Zbsc + (Lbsctan/Lbscap)*(Zbap-Zbsc)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zbap F77NAME(psget_zbap)
void psGet_zbap(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set elevation of beam centerline at aperture, At a distance (Lbscap) from the beam source, the beam centerline, passes above (+) or below (-) machine midplane as defined by Z=0, in the equilibrium specification.  If defaulted, the centerline, is centered on the midplane (Z=0) when it crosses the plane of the, aperture.  If both Zbap(...) and Zbsc(...) are defaulted, the, entire beam centerline lies in the midplane., Note that Z at the beam centerline tangency radius is:, Ztan = Zbsc + (Lbsctan/Lbscap)*(Zbap-Zbsc)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zbap F77NAME(psset_zbap)
void psSet_zbap(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of elevation of beam centerline at aperture, At a distance (Lbscap) from the beam source, the beam centerline, passes above (+) or below (-) machine midplane as defined by Z=0, in the equilibrium specification.  If defaulted, the centerline, is centered on the midplane (Z=0) when it crosses the plane of the, aperture.  If both Zbap(...) and Zbsc(...) are defaulted, the, entire beam centerline lies in the midplane., Note that Z at the beam centerline tangency radius is:, Ztan = Zbsc + (Lbsctan/Lbscap)*(Zbap-Zbsc)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_zbap F77NAME(psgetrnk_zbap)
void psGetRnk_zbap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of elevation of beam centerline at aperture, At a distance (Lbscap) from the beam source, the beam centerline, passes above (+) or below (-) machine midplane as defined by Z=0, in the equilibrium specification.  If defaulted, the centerline, is centered on the midplane (Z=0) when it crosses the plane of the, aperture.  If both Zbap(...) and Zbsc(...) are defaulted, the, entire beam centerline lies in the midplane., Note that Z at the beam centerline tangency radius is:, Ztan = Zbsc + (Lbsctan/Lbscap)*(Zbap-Zbsc)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_zbap F77NAME(psgetdim_zbap)
void psGetDim_zbap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get shape keyword for beam source grid, For beam j, nbshape(j)="Rectangle" indicates a rectangular shaped, source; nbshape(j)="Circle" indicates a circular shaped source., (The keyword must be spelled correctly but upper or lower case, letters may be used interchangeably).  The plane of, the source is assumed perpendicular to the beam centerline.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbshape F77NAME(psget_nbshape)
void psGet_nbshape(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set shape keyword for beam source grid, For beam j, nbshape(j)="Rectangle" indicates a rectangular shaped, source; nbshape(j)="Circle" indicates a circular shaped source., (The keyword must be spelled correctly but upper or lower case, letters may be used interchangeably).  The plane of, the source is assumed perpendicular to the beam centerline.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbshape F77NAME(psset_nbshape)
void psSet_nbshape(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of shape keyword for beam source grid, For beam j, nbshape(j)="Rectangle" indicates a rectangular shaped, source; nbshape(j)="Circle" indicates a circular shaped source., (The keyword must be spelled correctly but upper or lower case, letters may be used interchangeably).  The plane of, the source is assumed perpendicular to the beam centerline.
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_nbshape F77NAME(psgetsz_nbshape)
void psGetSz_nbshape(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of shape keyword for beam source grid, For beam j, nbshape(j)="Rectangle" indicates a rectangular shaped, source; nbshape(j)="Circle" indicates a circular shaped source., (The keyword must be spelled correctly but upper or lower case, letters may be used interchangeably).  The plane of, the source is assumed perpendicular to the beam centerline.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nbshape F77NAME(psgetrnk_nbshape)
void psGetRnk_nbshape(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of shape keyword for beam source grid, For beam j, nbshape(j)="Rectangle" indicates a rectangular shaped, source; nbshape(j)="Circle" indicates a circular shaped source., (The keyword must be spelled correctly but upper or lower case, letters may be used interchangeably).  The plane of, the source is assumed perpendicular to the beam centerline.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nbshape F77NAME(psgetdim_nbshape)
void psGetDim_nbshape(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam half-width at source, If nbshape(j)="Rectangle" this is the horizontal half-width of, the source rectangle for beam j; if nbshape(j)="circle" it is, the radius of the circular source for beam j, in meters.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_halfwidth F77NAME(psget_b_halfwidth)
void psGet_b_halfwidth(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam half-width at source, If nbshape(j)="Rectangle" this is the horizontal half-width of, the source rectangle for beam j; if nbshape(j)="circle" it is, the radius of the circular source for beam j, in meters.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_halfwidth F77NAME(psset_b_halfwidth)
void psSet_b_halfwidth(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam half-width at source, If nbshape(j)="Rectangle" this is the horizontal half-width of, the source rectangle for beam j; if nbshape(j)="circle" it is, the radius of the circular source for beam j, in meters.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_b_halfwidth F77NAME(psgetrnk_b_halfwidth)
void psGetRnk_b_halfwidth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam half-width at source, If nbshape(j)="Rectangle" this is the horizontal half-width of, the source rectangle for beam j; if nbshape(j)="circle" it is, the radius of the circular source for beam j, in meters.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_b_halfwidth F77NAME(psgetdim_b_halfwidth)
void psGetDim_b_halfwidth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam half-height at source, If nbshape(j)="Rectangle" this is the vertical half-height of the, beam at its source grid.  This quantity ignored for, nbshape(j)="circle".
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_halfheight F77NAME(psget_b_halfheight)
void psGet_b_halfheight(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam half-height at source, If nbshape(j)="Rectangle" this is the vertical half-height of the, beam at its source grid.  This quantity ignored for, nbshape(j)="circle".
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_halfheight F77NAME(psset_b_halfheight)
void psSet_b_halfheight(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam half-height at source, If nbshape(j)="Rectangle" this is the vertical half-height of the, beam at its source grid.  This quantity ignored for, nbshape(j)="circle".
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_b_halfheight F77NAME(psgetrnk_b_halfheight)
void psGetRnk_b_halfheight(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam half-height at source, If nbshape(j)="Rectangle" this is the vertical half-height of the, beam at its source grid.  This quantity ignored for, nbshape(j)="circle".
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_b_halfheight F77NAME(psgetdim_b_halfheight)
void psGetDim_b_halfheight(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get horizontal focal length, for nbshape(j)="circle" sources this is the only focal length.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_hfocal_length F77NAME(psget_b_hfocal_length)
void psGet_b_hfocal_length(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set horizontal focal length, for nbshape(j)="circle" sources this is the only focal length.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_hfocal_length F77NAME(psset_b_hfocal_length)
void psSet_b_hfocal_length(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of horizontal focal length, for nbshape(j)="circle" sources this is the only focal length.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_b_hfocal_length F77NAME(psgetrnk_b_hfocal_length)
void psGetRnk_b_hfocal_length(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of horizontal focal length, for nbshape(j)="circle" sources this is the only focal length.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_b_hfocal_length F77NAME(psgetdim_b_hfocal_length)
void psGetDim_b_hfocal_length(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get vertical focal length, used for nbshape(j)="Rectangle" sources only.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_vfocal_length F77NAME(psget_b_vfocal_length)
void psGet_b_vfocal_length(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set vertical focal length, used for nbshape(j)="Rectangle" sources only.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_vfocal_length F77NAME(psset_b_vfocal_length)
void psSet_b_vfocal_length(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of vertical focal length, used for nbshape(j)="Rectangle" sources only.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_b_vfocal_length F77NAME(psgetrnk_b_vfocal_length)
void psGetRnk_b_vfocal_length(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of vertical focal length, used for nbshape(j)="Rectangle" sources only.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_b_vfocal_length F77NAME(psgetdim_b_vfocal_length)
void psGetDim_b_vfocal_length(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get horizontal divergence (D) of beam, for nbshape(j)="circle" sources this is the ONLY divergence., --> definition of D (b_Hdivergence(...) given in DEGREES):, for alpha the random angle of deviation from the direction of, aiming, P(alpha) ~ exp(-alpha**2/D**2); P(D) = (1/e)*P(0), I.e. D is the angle of deviation from the aiming angle, in, either direction, for a (1/e) reduction in probability of, launch of a beam particle.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_hdivergence F77NAME(psget_b_hdivergence)
void psGet_b_hdivergence(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set horizontal divergence (D) of beam, for nbshape(j)="circle" sources this is the ONLY divergence., --> definition of D (b_Hdivergence(...) given in DEGREES):, for alpha the random angle of deviation from the direction of, aiming, P(alpha) ~ exp(-alpha**2/D**2); P(D) = (1/e)*P(0), I.e. D is the angle of deviation from the aiming angle, in, either direction, for a (1/e) reduction in probability of, launch of a beam particle.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_hdivergence F77NAME(psset_b_hdivergence)
void psSet_b_hdivergence(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of horizontal divergence (D) of beam, for nbshape(j)="circle" sources this is the ONLY divergence., --> definition of D (b_Hdivergence(...) given in DEGREES):, for alpha the random angle of deviation from the direction of, aiming, P(alpha) ~ exp(-alpha**2/D**2); P(D) = (1/e)*P(0), I.e. D is the angle of deviation from the aiming angle, in, either direction, for a (1/e) reduction in probability of, launch of a beam particle.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_b_hdivergence F77NAME(psgetrnk_b_hdivergence)
void psGetRnk_b_hdivergence(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of horizontal divergence (D) of beam, for nbshape(j)="circle" sources this is the ONLY divergence., --> definition of D (b_Hdivergence(...) given in DEGREES):, for alpha the random angle of deviation from the direction of, aiming, P(alpha) ~ exp(-alpha**2/D**2); P(D) = (1/e)*P(0), I.e. D is the angle of deviation from the aiming angle, in, either direction, for a (1/e) reduction in probability of, launch of a beam particle.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_b_hdivergence F77NAME(psgetdim_b_hdivergence)
void psGetDim_b_hdivergence(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get vertical divergence (D) of beam, used for nbshape(j)="Rectangle" sources ONLY., --> definition of D (b_Vdivergence(...) given in DEGREES):, for alpha the random angle of deviation from the direction of, aiming, P(alpha) ~ exp(-alpha**2/D**2); P(D) = (1/e)*P(0), I.e. D is the angle of deviation from the aiming angle, in, either direction, for a (1/e) reduction in probability of, launch of a beam particle.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_vdivergence F77NAME(psget_b_vdivergence)
void psGet_b_vdivergence(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set vertical divergence (D) of beam, used for nbshape(j)="Rectangle" sources ONLY., --> definition of D (b_Vdivergence(...) given in DEGREES):, for alpha the random angle of deviation from the direction of, aiming, P(alpha) ~ exp(-alpha**2/D**2); P(D) = (1/e)*P(0), I.e. D is the angle of deviation from the aiming angle, in, either direction, for a (1/e) reduction in probability of, launch of a beam particle.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_vdivergence F77NAME(psset_b_vdivergence)
void psSet_b_vdivergence(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of vertical divergence (D) of beam, used for nbshape(j)="Rectangle" sources ONLY., --> definition of D (b_Vdivergence(...) given in DEGREES):, for alpha the random angle of deviation from the direction of, aiming, P(alpha) ~ exp(-alpha**2/D**2); P(D) = (1/e)*P(0), I.e. D is the angle of deviation from the aiming angle, in, either direction, for a (1/e) reduction in probability of, launch of a beam particle.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_b_vdivergence F77NAME(psgetrnk_b_vdivergence)
void psGetRnk_b_vdivergence(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of vertical divergence (D) of beam, used for nbshape(j)="Rectangle" sources ONLY., --> definition of D (b_Vdivergence(...) given in DEGREES):, for alpha the random angle of deviation from the direction of, aiming, P(alpha) ~ exp(-alpha**2/D**2); P(D) = (1/e)*P(0), I.e. D is the angle of deviation from the aiming angle, in, either direction, for a (1/e) reduction in probability of, launch of a beam particle.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_b_vdivergence F77NAME(psgetdim_b_vdivergence)
void psGetDim_b_vdivergence(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get shape keyword for beam aperture, For beam j, nbap_shape(j)="Rectangle" indicates a rectangular, aperture; nbap_shape(j)="Circle" indicates a circular aperture., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbap_shape F77NAME(psget_nbap_shape)
void psGet_nbap_shape(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set shape keyword for beam aperture, For beam j, nbap_shape(j)="Rectangle" indicates a rectangular, aperture; nbap_shape(j)="Circle" indicates a circular aperture., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbap_shape F77NAME(psset_nbap_shape)
void psSet_nbap_shape(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of shape keyword for beam aperture, For beam j, nbap_shape(j)="Rectangle" indicates a rectangular, aperture; nbap_shape(j)="Circle" indicates a circular aperture., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_nbap_shape F77NAME(psgetsz_nbap_shape)
void psGetSz_nbap_shape(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of shape keyword for beam aperture, For beam j, nbap_shape(j)="Rectangle" indicates a rectangular, aperture; nbap_shape(j)="Circle" indicates a circular aperture., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nbap_shape F77NAME(psgetrnk_nbap_shape)
void psGetRnk_nbap_shape(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of shape keyword for beam aperture, For beam j, nbap_shape(j)="Rectangle" indicates a rectangular, aperture; nbap_shape(j)="Circle" indicates a circular aperture., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nbap_shape F77NAME(psgetdim_nbap_shape)
void psGetDim_nbap_shape(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get aperture half-width, for nbap_shape(j)="rectangle", this is the horizontal size, specification; for nbap_shape(j)="circle", ap_halfwidth(j) is, the radius.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ap_halfwidth F77NAME(psget_ap_halfwidth)
void psGet_ap_halfwidth(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set aperture half-width, for nbap_shape(j)="rectangle", this is the horizontal size, specification; for nbap_shape(j)="circle", ap_halfwidth(j) is, the radius.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ap_halfwidth F77NAME(psset_ap_halfwidth)
void psSet_ap_halfwidth(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of aperture half-width, for nbap_shape(j)="rectangle", this is the horizontal size, specification; for nbap_shape(j)="circle", ap_halfwidth(j) is, the radius.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ap_halfwidth F77NAME(psgetrnk_ap_halfwidth)
void psGetRnk_ap_halfwidth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of aperture half-width, for nbap_shape(j)="rectangle", this is the horizontal size, specification; for nbap_shape(j)="circle", ap_halfwidth(j) is, the radius.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ap_halfwidth F77NAME(psgetdim_ap_halfwidth)
void psGetDim_ap_halfwidth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get aperture half-height, for nbap_shape(j)="rectangle", this is the vertical size, specification; this quantity ignored for nbap_shape(j)="circle".
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ap_halfheight F77NAME(psget_ap_halfheight)
void psGet_ap_halfheight(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set aperture half-height, for nbap_shape(j)="rectangle", this is the vertical size, specification; this quantity ignored for nbap_shape(j)="circle".
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ap_halfheight F77NAME(psset_ap_halfheight)
void psSet_ap_halfheight(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of aperture half-height, for nbap_shape(j)="rectangle", this is the vertical size, specification; this quantity ignored for nbap_shape(j)="circle".
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ap_halfheight F77NAME(psgetrnk_ap_halfheight)
void psGetRnk_ap_halfheight(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of aperture half-height, for nbap_shape(j)="rectangle", this is the vertical size, specification; this quantity ignored for nbap_shape(j)="circle".
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ap_halfheight F77NAME(psgetdim_ap_halfheight)
void psGetDim_ap_halfheight(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get horizontal offset of aperture, opening relative to beam centerline; positive value means shift of, aperture away from machine axis i.e. to make a beam with a larger, tangency radius
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ap_horiz_offset F77NAME(psget_ap_horiz_offset)
void psGet_ap_horiz_offset(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set horizontal offset of aperture, opening relative to beam centerline; positive value means shift of, aperture away from machine axis i.e. to make a beam with a larger, tangency radius
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ap_horiz_offset F77NAME(psset_ap_horiz_offset)
void psSet_ap_horiz_offset(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of horizontal offset of aperture, opening relative to beam centerline; positive value means shift of, aperture away from machine axis i.e. to make a beam with a larger, tangency radius
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ap_horiz_offset F77NAME(psgetrnk_ap_horiz_offset)
void psGetRnk_ap_horiz_offset(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of horizontal offset of aperture, opening relative to beam centerline; positive value means shift of, aperture away from machine axis i.e. to make a beam with a larger, tangency radius
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ap_horiz_offset F77NAME(psgetdim_ap_horiz_offset)
void psGetDim_ap_horiz_offset(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get vertical offset of aperture, opening relative to beam centerline: positive value means the, aperture opening is shifted upward relative to the beam centerline
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ap_vert_offset F77NAME(psget_ap_vert_offset)
void psGet_ap_vert_offset(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set vertical offset of aperture, opening relative to beam centerline: positive value means the, aperture opening is shifted upward relative to the beam centerline
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ap_vert_offset F77NAME(psset_ap_vert_offset)
void psSet_ap_vert_offset(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of vertical offset of aperture, opening relative to beam centerline: positive value means the, aperture opening is shifted upward relative to the beam centerline
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ap_vert_offset F77NAME(psgetrnk_ap_vert_offset)
void psGetRnk_ap_vert_offset(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of vertical offset of aperture, opening relative to beam centerline: positive value means the, aperture opening is shifted upward relative to the beam centerline
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ap_vert_offset F77NAME(psgetdim_ap_vert_offset)
void psGetDim_ap_vert_offset(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get keyword for optional 2nd aperture', "For beam j, nbap2_shape= blank or 'None': no 2nd aperture", 'Other possible values:  "Rectangle"; "Circle"., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbap2_shape F77NAME(psget_nbap2_shape)
void psGet_nbap2_shape(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set keyword for optional 2nd aperture', "For beam j, nbap2_shape= blank or 'None': no 2nd aperture", 'Other possible values:  "Rectangle"; "Circle"., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbap2_shape F77NAME(psset_nbap2_shape)
void psSet_nbap2_shape(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of keyword for optional 2nd aperture', "For beam j, nbap2_shape= blank or 'None': no 2nd aperture", 'Other possible values:  "Rectangle"; "Circle"., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_nbap2_shape F77NAME(psgetsz_nbap2_shape)
void psGetSz_nbap2_shape(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of keyword for optional 2nd aperture', "For beam j, nbap2_shape= blank or 'None': no 2nd aperture", 'Other possible values:  "Rectangle"; "Circle"., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nbap2_shape F77NAME(psgetrnk_nbap2_shape)
void psGetRnk_nbap2_shape(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of keyword for optional 2nd aperture', "For beam j, nbap2_shape= blank or 'None': no 2nd aperture", 'Other possible values:  "Rectangle"; "Circle"., The beam centerline is assumed to pass through the center of the, aperture.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nbap2_shape F77NAME(psgetdim_nbap2_shape)
void psGetDim_nbap2_shape(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get distance, source to 2nd aperture, Distance of beam centerline from source to center of 2nd aperture, into vacuum vessel.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lbscap2 F77NAME(psget_lbscap2)
void psGet_lbscap2(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set distance, source to 2nd aperture, Distance of beam centerline from source to center of 2nd aperture, into vacuum vessel.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lbscap2 F77NAME(psset_lbscap2)
void psSet_lbscap2(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of distance, source to 2nd aperture, Distance of beam centerline from source to center of 2nd aperture, into vacuum vessel.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_lbscap2 F77NAME(psgetrnk_lbscap2)
void psGetRnk_lbscap2(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of distance, source to 2nd aperture, Distance of beam centerline from source to center of 2nd aperture, into vacuum vessel.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_lbscap2 F77NAME(psgetdim_lbscap2)
void psGetDim_lbscap2(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 2nd aperture half-width, for nbap_shape(j)="rectangle", this is the horizontal size, specification; for nbap_shape(j)="circle", ap_halfwidth(j) is, the radius; ignored if there is no 2nd aperture.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ap2_halfwidth F77NAME(psget_ap2_halfwidth)
void psGet_ap2_halfwidth(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set 2nd aperture half-width, for nbap_shape(j)="rectangle", this is the horizontal size, specification; for nbap_shape(j)="circle", ap_halfwidth(j) is, the radius; ignored if there is no 2nd aperture.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ap2_halfwidth F77NAME(psset_ap2_halfwidth)
void psSet_ap2_halfwidth(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of 2nd aperture half-width, for nbap_shape(j)="rectangle", this is the horizontal size, specification; for nbap_shape(j)="circle", ap_halfwidth(j) is, the radius; ignored if there is no 2nd aperture.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ap2_halfwidth F77NAME(psgetrnk_ap2_halfwidth)
void psGetRnk_ap2_halfwidth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 2nd aperture half-width, for nbap_shape(j)="rectangle", this is the horizontal size, specification; for nbap_shape(j)="circle", ap_halfwidth(j) is, the radius; ignored if there is no 2nd aperture.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ap2_halfwidth F77NAME(psgetdim_ap2_halfwidth)
void psGetDim_ap2_halfwidth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get aperture half-height, for nbap_shape(j)="rectangle", this is the vertical size, specification; this quantity ignored for nbap_shape(j)="circle", or, if there is no 2nd aperture.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ap2_halfheight F77NAME(psget_ap2_halfheight)
void psGet_ap2_halfheight(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set aperture half-height, for nbap_shape(j)="rectangle", this is the vertical size, specification; this quantity ignored for nbap_shape(j)="circle", or, if there is no 2nd aperture.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ap2_halfheight F77NAME(psset_ap2_halfheight)
void psSet_ap2_halfheight(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of aperture half-height, for nbap_shape(j)="rectangle", this is the vertical size, specification; this quantity ignored for nbap_shape(j)="circle", or, if there is no 2nd aperture.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ap2_halfheight F77NAME(psgetrnk_ap2_halfheight)
void psGetRnk_ap2_halfheight(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of aperture half-height, for nbap_shape(j)="rectangle", this is the vertical size, specification; this quantity ignored for nbap_shape(j)="circle", or, if there is no 2nd aperture.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ap2_halfheight F77NAME(psgetdim_ap2_halfheight)
void psGetDim_ap2_halfheight(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get horizontal offset, 2nd aperture, opening relative to beam centerline; positive value means shift of, aperture away from machine axis i.e. to make a beam with a larger, tangency radius
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ap2_horiz_offset F77NAME(psget_ap2_horiz_offset)
void psGet_ap2_horiz_offset(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set horizontal offset, 2nd aperture, opening relative to beam centerline; positive value means shift of, aperture away from machine axis i.e. to make a beam with a larger, tangency radius
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ap2_horiz_offset F77NAME(psset_ap2_horiz_offset)
void psSet_ap2_horiz_offset(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of horizontal offset, 2nd aperture, opening relative to beam centerline; positive value means shift of, aperture away from machine axis i.e. to make a beam with a larger, tangency radius
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ap2_horiz_offset F77NAME(psgetrnk_ap2_horiz_offset)
void psGetRnk_ap2_horiz_offset(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of horizontal offset, 2nd aperture, opening relative to beam centerline; positive value means shift of, aperture away from machine axis i.e. to make a beam with a larger, tangency radius
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ap2_horiz_offset F77NAME(psgetdim_ap2_horiz_offset)
void psGetDim_ap2_horiz_offset(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get vertical offset, 2nd aperture, opening relative to beam centerline: positive value means the, aperture opening is shifted upward relative to the beam centerline
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ap2_vert_offset F77NAME(psget_ap2_vert_offset)
void psGet_ap2_vert_offset(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set vertical offset, 2nd aperture, opening relative to beam centerline: positive value means the, aperture opening is shifted upward relative to the beam centerline
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ap2_vert_offset F77NAME(psset_ap2_vert_offset)
void psSet_ap2_vert_offset(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of vertical offset, 2nd aperture, opening relative to beam centerline: positive value means the, aperture opening is shifted upward relative to the beam centerline
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ap2_vert_offset F77NAME(psgetrnk_ap2_vert_offset)
void psGetRnk_ap2_vert_offset(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of vertical offset, 2nd aperture, opening relative to beam centerline: positive value means the, aperture opening is shifted upward relative to the beam centerline
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ap2_vert_offset F77NAME(psgetdim_ap2_vert_offset)
void psGetDim_ap2_vert_offset(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get minimum injection energy, minimum energy of the full energy fractional component of each beam
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_einj_min F77NAME(psget_einj_min)
void psGet_einj_min(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set minimum injection energy, minimum energy of the full energy fractional component of each beam
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_einj_min F77NAME(psset_einj_min)
void psSet_einj_min(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of minimum injection energy, minimum energy of the full energy fractional component of each beam
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_einj_min F77NAME(psgetrnk_einj_min)
void psGetRnk_einj_min(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of minimum injection energy, minimum energy of the full energy fractional component of each beam
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_einj_min F77NAME(psgetdim_einj_min)
void psGetDim_einj_min(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get maximum injection energy, maximum energy of the full energy fractional component of each beam, Some codes use 1.5*maxval(Einj_max) as an upper limit on a lab frame, energy grid for beam ions slowing down distribution functions.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_einj_max F77NAME(psget_einj_max)
void psGet_einj_max(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set maximum injection energy, maximum energy of the full energy fractional component of each beam, Some codes use 1.5*maxval(Einj_max) as an upper limit on a lab frame, energy grid for beam ions slowing down distribution functions.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_einj_max F77NAME(psset_einj_max)
void psSet_einj_max(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of maximum injection energy, maximum energy of the full energy fractional component of each beam, Some codes use 1.5*maxval(Einj_max) as an upper limit on a lab frame, energy grid for beam ions slowing down distribution functions.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_einj_max F77NAME(psgetrnk_einj_max)
void psGetRnk_einj_max(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of maximum injection energy, maximum energy of the full energy fractional component of each beam, Some codes use 1.5*maxval(Einj_max) as an upper limit on a lab frame, energy grid for beam ions slowing down distribution functions.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_einj_max F77NAME(psgetdim_einj_max)
void psGetDim_einj_max(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get no. pts in H beam energy fractions table
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_n_h_einj_standard F77NAME(psget_n_h_einj_standard)
void psGet_n_h_einj_standard(int* iobj, int* data, int* ierr);

/**
 * Set no. pts in H beam energy fractions table
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_n_h_einj_standard F77NAME(psset_n_h_einj_standard)
void psSet_n_h_einj_standard(int* iobj, const int* data, int* ierr);

/**
 * Get no. pts in D beam energy fractions table
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_n_d_einj_standard F77NAME(psget_n_d_einj_standard)
void psGet_n_d_einj_standard(int* iobj, int* data, int* ierr);

/**
 * Set no. pts in D beam energy fractions table
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_n_d_einj_standard F77NAME(psset_n_d_einj_standard)
void psSet_n_d_einj_standard(int* iobj, const int* data, int* ierr);

/**
 * Get no. pts in T beam energy fractions table
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_n_t_einj_standard F77NAME(psget_n_t_einj_standard)
void psGet_n_t_einj_standard(int* iobj, int* data, int* ierr);

/**
 * Set no. pts in T beam energy fractions table
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_n_t_einj_standard F77NAME(psset_n_t_einj_standard)
void psSet_n_t_einj_standard(int* iobj, const int* data, int* ierr);

/**
 * Get H beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_h_einj_standard F77NAME(psget_h_einj_standard)
void psGet_h_einj_standard(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set H beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_h_einj_standard F77NAME(psset_h_einj_standard)
void psSet_h_einj_standard(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of H beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_h_einj_standard F77NAME(psgetrnk_h_einj_standard)
void psGetRnk_h_einj_standard(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of H beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_h_einj_standard F77NAME(psgetdim_h_einj_standard)
void psGetDim_h_einj_standard(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get H beam full energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_h_ffull_standard F77NAME(psget_h_ffull_standard)
void psGet_h_ffull_standard(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set H beam full energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_h_ffull_standard F77NAME(psset_h_ffull_standard)
void psSet_h_ffull_standard(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of H beam full energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_h_ffull_standard F77NAME(psgetrnk_h_ffull_standard)
void psGetRnk_h_ffull_standard(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of H beam full energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_h_ffull_standard F77NAME(psgetdim_h_ffull_standard)
void psGetDim_h_ffull_standard(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get H beam half energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_h_fhalf_standard F77NAME(psget_h_fhalf_standard)
void psGet_h_fhalf_standard(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set H beam half energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_h_fhalf_standard F77NAME(psset_h_fhalf_standard)
void psSet_h_fhalf_standard(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of H beam half energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_h_fhalf_standard F77NAME(psgetrnk_h_fhalf_standard)
void psGetRnk_h_fhalf_standard(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of H beam half energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_h_fhalf_standard F77NAME(psgetdim_h_fhalf_standard)
void psGetDim_h_fhalf_standard(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get D beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_d_einj_standard F77NAME(psget_d_einj_standard)
void psGet_d_einj_standard(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set D beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_d_einj_standard F77NAME(psset_d_einj_standard)
void psSet_d_einj_standard(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of D beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_d_einj_standard F77NAME(psgetrnk_d_einj_standard)
void psGetRnk_d_einj_standard(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of D beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_d_einj_standard F77NAME(psgetdim_d_einj_standard)
void psGetDim_d_einj_standard(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get D beam full energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_d_ffull_standard F77NAME(psget_d_ffull_standard)
void psGet_d_ffull_standard(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set D beam full energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_d_ffull_standard F77NAME(psset_d_ffull_standard)
void psSet_d_ffull_standard(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of D beam full energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_d_ffull_standard F77NAME(psgetrnk_d_ffull_standard)
void psGetRnk_d_ffull_standard(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of D beam full energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_d_ffull_standard F77NAME(psgetdim_d_ffull_standard)
void psGetDim_d_ffull_standard(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get D beam half energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_d_fhalf_standard F77NAME(psget_d_fhalf_standard)
void psGet_d_fhalf_standard(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set D beam half energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_d_fhalf_standard F77NAME(psset_d_fhalf_standard)
void psSet_d_fhalf_standard(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of D beam half energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_d_fhalf_standard F77NAME(psgetrnk_d_fhalf_standard)
void psGetRnk_d_fhalf_standard(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of D beam half energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_d_fhalf_standard F77NAME(psgetdim_d_fhalf_standard)
void psGetDim_d_fhalf_standard(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get T beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_t_einj_standard F77NAME(psget_t_einj_standard)
void psGet_t_einj_standard(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set T beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_t_einj_standard F77NAME(psset_t_einj_standard)
void psSet_t_einj_standard(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of T beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_t_einj_standard F77NAME(psgetrnk_t_einj_standard)
void psGetRnk_t_einj_standard(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of T beam table energies, for full-half-third energy beam current fractions data
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_t_einj_standard F77NAME(psgetdim_t_einj_standard)
void psGetDim_t_einj_standard(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get T beam full energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_t_ffull_standard F77NAME(psget_t_ffull_standard)
void psGet_t_ffull_standard(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set T beam full energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_t_ffull_standard F77NAME(psset_t_ffull_standard)
void psSet_t_ffull_standard(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of T beam full energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_t_ffull_standard F77NAME(psgetrnk_t_ffull_standard)
void psGetRnk_t_ffull_standard(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of T beam full energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_t_ffull_standard F77NAME(psgetdim_t_ffull_standard)
void psGetDim_t_ffull_standard(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get T beam half energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_t_fhalf_standard F77NAME(psget_t_fhalf_standard)
void psGet_t_fhalf_standard(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set T beam half energy fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_t_fhalf_standard F77NAME(psset_t_fhalf_standard)
void psSet_t_fhalf_standard(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of T beam half energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_t_fhalf_standard F77NAME(psgetrnk_t_fhalf_standard)
void psGetRnk_t_fhalf_standard(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of T beam half energy fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_t_fhalf_standard F77NAME(psgetdim_t_fhalf_standard)
void psGetDim_t_fhalf_standard(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of icrf_src_name (icrf_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nicrf_src F77NAME(psget_nicrf_src)
void psGet_nicrf_src(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of icrf_src_name (icrf_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nicrf_src F77NAME(psset_nicrf_src)
void psSet_nicrf_src(int* iobj, const int* data, int* ierr);

/**
 * Get number & name of ICRF sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_icrf_src_name F77NAME(psget_icrf_src_name)
void psGet_icrf_src_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set number & name of ICRF sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_icrf_src_name F77NAME(psset_icrf_src_name)
void psSet_icrf_src_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of number & name of ICRF sources
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_icrf_src_name F77NAME(psgetsz_icrf_src_name)
void psGetSz_icrf_src_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of number & name of ICRF sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_icrf_src_name F77NAME(psgetrnk_icrf_src_name)
void psGetRnk_icrf_src_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number & name of ICRF sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_icrf_src_name F77NAME(psgetdim_icrf_src_name)
void psGetDim_icrf_src_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get antenna model filenames (1 per antenna source)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ant_model F77NAME(psget_ant_model)
void psGet_ant_model(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set antenna model filenames (1 per antenna source)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ant_model F77NAME(psset_ant_model)
void psSet_ant_model(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of antenna model filenames (1 per antenna source)
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_ant_model F77NAME(psgetsz_ant_model)
void psGetSz_ant_model(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of antenna model filenames (1 per antenna source)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ant_model F77NAME(psgetrnk_ant_model)
void psGetRnk_ant_model(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of antenna model filenames (1 per antenna source)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ant_model F77NAME(psgetdim_ant_model)
void psGetDim_ant_model(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Maximum size of variable length enumeration: NRZ_ANTGEO
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_max_nrz_antgeo F77NAME(psget_max_nrz_antgeo)
void psGet_max_nrz_antgeo(int* iobj, int* data, int* ierr);

/**
 * Set Maximum size of variable length enumeration: NRZ_ANTGEO
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_max_nrz_antgeo F77NAME(psset_max_nrz_antgeo)
void psSet_max_nrz_antgeo(int* iobj, const int* data, int* ierr);

/**
 * Get number of (R,Z) points, antenna geometries
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrz_antgeo F77NAME(psget_nrz_antgeo)
void psGet_nrz_antgeo(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set number of (R,Z) points, antenna geometries
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrz_antgeo F77NAME(psset_nrz_antgeo)
void psSet_nrz_antgeo(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of number of (R,Z) points, antenna geometries
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nrz_antgeo F77NAME(psgetrnk_nrz_antgeo)
void psGetRnk_nrz_antgeo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number of (R,Z) points, antenna geometries
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nrz_antgeo F77NAME(psgetdim_nrz_antgeo)
void psGetDim_nrz_antgeo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get antenna geo: R pts
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_antgeo F77NAME(psget_r_antgeo)
void psGet_r_antgeo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set antenna geo: R pts
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_antgeo F77NAME(psset_r_antgeo)
void psSet_r_antgeo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of antenna geo: R pts
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_antgeo F77NAME(psgetrnk_r_antgeo)
void psGetRnk_r_antgeo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of antenna geo: R pts
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_antgeo F77NAME(psgetdim_r_antgeo)
void psGetDim_r_antgeo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get antenna geo: Z pts
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_antgeo F77NAME(psget_z_antgeo)
void psGet_z_antgeo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set antenna geo: Z pts
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_antgeo F77NAME(psset_z_antgeo)
void psSet_z_antgeo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of antenna geo: Z pts
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_antgeo F77NAME(psgetrnk_z_antgeo)
void psGetRnk_z_antgeo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of antenna geo: Z pts
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_antgeo F77NAME(psgetdim_z_antgeo)
void psGetDim_z_antgeo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get distance, antenna to Faraday shield
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dx_fshield F77NAME(psget_dx_fshield)
void psGet_dx_fshield(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set distance, antenna to Faraday shield
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dx_fshield F77NAME(psset_dx_fshield)
void psSet_dx_fshield(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of distance, antenna to Faraday shield
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dx_fshield F77NAME(psgetrnk_dx_fshield)
void psGetRnk_dx_fshield(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of distance, antenna to Faraday shield
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dx_fshield F77NAME(psgetdim_dx_fshield)
void psGetDim_dx_fshield(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of ecrf_src_name (ecrf_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_necrf_src F77NAME(psget_necrf_src)
void psGet_necrf_src(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of ecrf_src_name (ecrf_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_necrf_src F77NAME(psset_necrf_src)
void psSet_necrf_src(int* iobj, const int* data, int* ierr);

/**
 * Get number & name of ECRF sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ecrf_src_name F77NAME(psget_ecrf_src_name)
void psGet_ecrf_src_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set number & name of ECRF sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ecrf_src_name F77NAME(psset_ecrf_src_name)
void psSet_ecrf_src_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of number & name of ECRF sources
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_ecrf_src_name F77NAME(psgetsz_ecrf_src_name)
void psGetSz_ecrf_src_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of number & name of ECRF sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ecrf_src_name F77NAME(psgetrnk_ecrf_src_name)
void psGetRnk_ecrf_src_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number & name of ECRF sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ecrf_src_name F77NAME(psgetdim_ecrf_src_name)
void psGetDim_ecrf_src_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get R of center of launcher
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_ec_launch F77NAME(psget_r_ec_launch)
void psGet_r_ec_launch(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set R of center of launcher
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_ec_launch F77NAME(psset_r_ec_launch)
void psSet_r_ec_launch(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of R of center of launcher
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_ec_launch F77NAME(psgetrnk_r_ec_launch)
void psGetRnk_r_ec_launch(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R of center of launcher
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_ec_launch F77NAME(psgetdim_r_ec_launch)
void psGetDim_r_ec_launch(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Z of center of launcher
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_ec_launch F77NAME(psget_z_ec_launch)
void psGet_z_ec_launch(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Z of center of launcher
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_ec_launch F77NAME(psset_z_ec_launch)
void psSet_z_ec_launch(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Z of center of launcher
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_ec_launch F77NAME(psgetrnk_z_ec_launch)
void psGetRnk_z_ec_launch(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Z of center of launcher
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_ec_launch F77NAME(psgetdim_z_ec_launch)
void psGetDim_z_ec_launch(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Phi of center of launcher, this may be left at zero for axisymmetric simulations.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_phi_ec_launch F77NAME(psget_phi_ec_launch)
void psGet_phi_ec_launch(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Phi of center of launcher, this may be left at zero for axisymmetric simulations.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_phi_ec_launch F77NAME(psset_phi_ec_launch)
void psSet_phi_ec_launch(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Phi of center of launcher, this may be left at zero for axisymmetric simulations.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_phi_ec_launch F77NAME(psgetrnk_phi_ec_launch)
void psGetRnk_phi_ec_launch(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Phi of center of launcher, this may be left at zero for axisymmetric simulations.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_phi_ec_launch F77NAME(psgetdim_phi_ec_launch)
void psGetDim_phi_ec_launch(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get principal beam width in horizontal direction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_princ_width_hor F77NAME(psget_ec_princ_width_hor)
void psGet_ec_princ_width_hor(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set principal beam width in horizontal direction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_princ_width_hor F77NAME(psset_ec_princ_width_hor)
void psSet_ec_princ_width_hor(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of principal beam width in horizontal direction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ec_princ_width_hor F77NAME(psgetrnk_ec_princ_width_hor)
void psGetRnk_ec_princ_width_hor(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of principal beam width in horizontal direction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ec_princ_width_hor F77NAME(psgetdim_ec_princ_width_hor)
void psGetDim_ec_princ_width_hor(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get principal beam width in vertical direction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_princ_width_vert F77NAME(psget_ec_princ_width_vert)
void psGet_ec_princ_width_vert(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set principal beam width in vertical direction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_princ_width_vert F77NAME(psset_ec_princ_width_vert)
void psSet_ec_princ_width_vert(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of principal beam width in vertical direction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ec_princ_width_vert F77NAME(psgetrnk_ec_princ_width_vert)
void psGetRnk_ec_princ_width_vert(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of principal beam width in vertical direction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ec_princ_width_vert F77NAME(psgetdim_ec_princ_width_vert)
void psGetDim_ec_princ_width_vert(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get principal curvature in horizontal direction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_princ_curv_hor F77NAME(psget_ec_princ_curv_hor)
void psGet_ec_princ_curv_hor(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set principal curvature in horizontal direction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_princ_curv_hor F77NAME(psset_ec_princ_curv_hor)
void psSet_ec_princ_curv_hor(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of principal curvature in horizontal direction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ec_princ_curv_hor F77NAME(psgetrnk_ec_princ_curv_hor)
void psGetRnk_ec_princ_curv_hor(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of principal curvature in horizontal direction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ec_princ_curv_hor F77NAME(psgetdim_ec_princ_curv_hor)
void psGetDim_ec_princ_curv_hor(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get principal curvature in vertical direction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_princ_curv_vert F77NAME(psget_ec_princ_curv_vert)
void psGet_ec_princ_curv_vert(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set principal curvature in vertical direction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_princ_curv_vert F77NAME(psset_ec_princ_curv_vert)
void psSet_ec_princ_curv_vert(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of principal curvature in vertical direction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ec_princ_curv_vert F77NAME(psgetrnk_ec_princ_curv_vert)
void psGetRnk_ec_princ_curv_vert(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of principal curvature in vertical direction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ec_princ_curv_vert F77NAME(psgetdim_ec_princ_curv_vert)
void psGetDim_ec_princ_curv_vert(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Divergence of EC beam, beam at half-power, this half-angle away from, direction of beam centerline which is started, at the launcher (treated as a point source);, See EC_theta_aim(necrf_src) & EC_phi_aim(necrf_src), in the shot configuration section.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_half_power_angle F77NAME(psget_ec_half_power_angle)
void psGet_ec_half_power_angle(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Divergence of EC beam, beam at half-power, this half-angle away from, direction of beam centerline which is started, at the launcher (treated as a point source);, See EC_theta_aim(necrf_src) & EC_phi_aim(necrf_src), in the shot configuration section.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_half_power_angle F77NAME(psset_ec_half_power_angle)
void psSet_ec_half_power_angle(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Divergence of EC beam, beam at half-power, this half-angle away from, direction of beam centerline which is started, at the launcher (treated as a point source);, See EC_theta_aim(necrf_src) & EC_phi_aim(necrf_src), in the shot configuration section.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ec_half_power_angle F77NAME(psgetrnk_ec_half_power_angle)
void psGetRnk_ec_half_power_angle(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Divergence of EC beam, beam at half-power, this half-angle away from, direction of beam centerline which is started, at the launcher (treated as a point source);, See EC_theta_aim(necrf_src) & EC_phi_aim(necrf_src), in the shot configuration section.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ec_half_power_angle F77NAME(psgetdim_ec_half_power_angle)
void psGetDim_ec_half_power_angle(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get EC beam ellipticity, The conical EC beam shape can be elongated, "vertically" (elongation > 1) or "horizontally", (elongation < 1).  Here "vertical" means in the, direction normal to the plane contaiing the beam, centerline and the +phi unit vector; "horizontal", means normal to the plane of the beam centerline, and the "vertical" direction.  If this quantity is, defaulted to zero, it is reset to 1.0 exactly, i.e., for a beam with circular cross section.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_beam_elongation F77NAME(psget_ec_beam_elongation)
void psGet_ec_beam_elongation(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set EC beam ellipticity, The conical EC beam shape can be elongated, "vertically" (elongation > 1) or "horizontally", (elongation < 1).  Here "vertical" means in the, direction normal to the plane contaiing the beam, centerline and the +phi unit vector; "horizontal", means normal to the plane of the beam centerline, and the "vertical" direction.  If this quantity is, defaulted to zero, it is reset to 1.0 exactly, i.e., for a beam with circular cross section.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_beam_elongation F77NAME(psset_ec_beam_elongation)
void psSet_ec_beam_elongation(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of EC beam ellipticity, The conical EC beam shape can be elongated, "vertically" (elongation > 1) or "horizontally", (elongation < 1).  Here "vertical" means in the, direction normal to the plane contaiing the beam, centerline and the +phi unit vector; "horizontal", means normal to the plane of the beam centerline, and the "vertical" direction.  If this quantity is, defaulted to zero, it is reset to 1.0 exactly, i.e., for a beam with circular cross section.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ec_beam_elongation F77NAME(psgetrnk_ec_beam_elongation)
void psGetRnk_ec_beam_elongation(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of EC beam ellipticity, The conical EC beam shape can be elongated, "vertically" (elongation > 1) or "horizontally", (elongation < 1).  Here "vertical" means in the, direction normal to the plane contaiing the beam, centerline and the +phi unit vector; "horizontal", means normal to the plane of the beam centerline, and the "vertical" direction.  If this quantity is, defaulted to zero, it is reset to 1.0 exactly, i.e., for a beam with circular cross section.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ec_beam_elongation F77NAME(psgetdim_ec_beam_elongation)
void psGetDim_ec_beam_elongation(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of lhrf_src_name (lhrf_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nlhrf_src F77NAME(psget_nlhrf_src)
void psGet_nlhrf_src(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of lhrf_src_name (lhrf_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nlhrf_src F77NAME(psset_nlhrf_src)
void psSet_nlhrf_src(int* iobj, const int* data, int* ierr);

/**
 * Get number & name of LHRF sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lhrf_src_name F77NAME(psget_lhrf_src_name)
void psGet_lhrf_src_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set number & name of LHRF sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lhrf_src_name F77NAME(psset_lhrf_src_name)
void psSet_lhrf_src_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of number & name of LHRF sources
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_lhrf_src_name F77NAME(psgetsz_lhrf_src_name)
void psGetSz_lhrf_src_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of number & name of LHRF sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_lhrf_src_name F77NAME(psgetrnk_lhrf_src_name)
void psGetRnk_lhrf_src_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number & name of LHRF sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_lhrf_src_name F77NAME(psgetdim_lhrf_src_name)
void psGetDim_lhrf_src_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get number of TF coils, the number of toroidal field (TF) coils is also the, number of periods in the main TF ripple field
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ntf_coils F77NAME(psget_ntf_coils)
void psGet_ntf_coils(int* iobj, int* data, int* ierr);

/**
 * Set number of TF coils, the number of toroidal field (TF) coils is also the, number of periods in the main TF ripple field
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ntf_coils F77NAME(psset_ntf_coils)
void psSet_ntf_coils(int* iobj, const int* data, int* ierr);

/**
 * Get number of TF coils involved in inducing 2nd component, of TF ripple field (typically ntf_coil2 = ntf_coils/2)., (This 2nd TF ripple field is sometimes introduced in, tokamak experiments to study the effects of TF ripple, induced fast ion loss).
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ntf_coil2 F77NAME(psget_ntf_coil2)
void psGet_ntf_coil2(int* iobj, int* data, int* ierr);

/**
 * Set number of TF coils involved in inducing 2nd component, of TF ripple field (typically ntf_coil2 = ntf_coils/2)., (This 2nd TF ripple field is sometimes introduced in, tokamak experiments to study the effects of TF ripple, induced fast ion loss).
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ntf_coil2 F77NAME(psset_ntf_coil2)
void psSet_ntf_coil2(int* iobj, const int* data, int* ierr);

/**
 * Get integer shot number
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_shot_number F77NAME(psget_shot_number)
void psGet_shot_number(int* iobj, int* data, int* ierr);

/**
 * Set integer shot number
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_shot_number F77NAME(psset_shot_number)
void psSet_shot_number(int* iobj, const int* data, int* ierr);

/**
 * Get species list dimension of S (thermal_specie)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_th F77NAME(psget_nspec_th)
void psGet_nspec_th(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of S (thermal_specie)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_th F77NAME(psset_nspec_th)
void psSet_nspec_th(int* iobj, const int* data, int* ierr);

/**
 * Get S specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_s_type F77NAME(psget_s_type)
void psGet_s_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set S specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_s_type F77NAME(psset_s_type)
void psSet_s_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of S specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_s_type F77NAME(psgetrnk_s_type)
void psGetRnk_s_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of S specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_s_type F77NAME(psgetdim_s_type)
void psGetDim_s_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get S specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_s F77NAME(psget_q_s)
void psGet_q_s(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set S specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_s F77NAME(psset_q_s)
void psSet_q_s(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of S specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_s F77NAME(psgetrnk_q_s)
void psGetRnk_q_s(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of S specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_s F77NAME(psgetdim_q_s)
void psGetDim_q_s(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get S atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_s F77NAME(psget_qatom_s)
void psGet_qatom_s(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set S atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_s F77NAME(psset_qatom_s)
void psSet_qatom_s(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of S atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_s F77NAME(psgetrnk_qatom_s)
void psGetRnk_qatom_s(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of S atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_s F77NAME(psgetdim_qatom_s)
void psGetDim_qatom_s(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get S specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_s F77NAME(psget_m_s)
void psGet_m_s(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set S specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_s F77NAME(psset_m_s)
void psSet_m_s(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of S specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_s F77NAME(psgetrnk_m_s)
void psGetRnk_m_s(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of S specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_s F77NAME(psgetdim_m_s)
void psGetDim_m_s(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get thermal species list, index 0 for electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_s_name F77NAME(psget_s_name)
void psGet_s_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set thermal species list, index 0 for electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_s_name F77NAME(psset_s_name)
void psSet_s_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of thermal species list, index 0 for electrons
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_s_name F77NAME(psgetsz_s_name)
void psGetSz_s_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of thermal species list, index 0 for electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_s_name F77NAME(psgetrnk_s_name)
void psGetRnk_s_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal species list, index 0 for electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_s_name F77NAME(psgetdim_s_name)
void psGetDim_s_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get name of species injected by each beam., Possible values are: "H", "D", "T", "He3", and "He4" at present., DMC Apr 2010: added: "Ne", "Ar", "Kr", "Xe", Each beam can inject one species.  Multiple beams (or usually, all beams) can inject the same species., the SNBI species list will be constructed from nbion elements;, in many experiments this will consist only of the single element "D".
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbion F77NAME(psget_nbion)
void psGet_nbion(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set name of species injected by each beam., Possible values are: "H", "D", "T", "He3", and "He4" at present., DMC Apr 2010: added: "Ne", "Ar", "Kr", "Xe", Each beam can inject one species.  Multiple beams (or usually, all beams) can inject the same species., the SNBI species list will be constructed from nbion elements;, in many experiments this will consist only of the single element "D".
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbion F77NAME(psset_nbion)
void psSet_nbion(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of name of species injected by each beam., Possible values are: "H", "D", "T", "He3", and "He4" at present., DMC Apr 2010: added: "Ne", "Ar", "Kr", "Xe", Each beam can inject one species.  Multiple beams (or usually, all beams) can inject the same species., the SNBI species list will be constructed from nbion elements;, in many experiments this will consist only of the single element "D".
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_nbion F77NAME(psgetsz_nbion)
void psGetSz_nbion(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of name of species injected by each beam., Possible values are: "H", "D", "T", "He3", and "He4" at present., DMC Apr 2010: added: "Ne", "Ar", "Kr", "Xe", Each beam can inject one species.  Multiple beams (or usually, all beams) can inject the same species., the SNBI species list will be constructed from nbion elements;, in many experiments this will consist only of the single element "D".
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nbion F77NAME(psgetrnk_nbion)
void psGetRnk_nbion(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of name of species injected by each beam., Possible values are: "H", "D", "T", "He3", and "He4" at present., DMC Apr 2010: added: "Ne", "Ar", "Kr", "Xe", Each beam can inject one species.  Multiple beams (or usually, all beams) can inject the same species., the SNBI species list will be constructed from nbion elements;, in many experiments this will consist only of the single element "D".
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nbion F77NAME(psgetdim_nbion)
void psGetDim_nbion(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get (if non-blank) beam trace element, Possible values same as nbion; nbion(ib).ne.nbion_trace(ib) enforced., This allows a second trace element to be injected with any neutral, beam-- as in trace tritium beam experiments, or, heating beams doped, with a noble gas species.  See: power_nbi_trace(...)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbion_trace F77NAME(psget_nbion_trace)
void psGet_nbion_trace(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set (if non-blank) beam trace element, Possible values same as nbion; nbion(ib).ne.nbion_trace(ib) enforced., This allows a second trace element to be injected with any neutral, beam-- as in trace tritium beam experiments, or, heating beams doped, with a noble gas species.  See: power_nbi_trace(...)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbion_trace F77NAME(psset_nbion_trace)
void psSet_nbion_trace(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of (if non-blank) beam trace element, Possible values same as nbion; nbion(ib).ne.nbion_trace(ib) enforced., This allows a second trace element to be injected with any neutral, beam-- as in trace tritium beam experiments, or, heating beams doped, with a noble gas species.  See: power_nbi_trace(...)
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_nbion_trace F77NAME(psgetsz_nbion_trace)
void psGetSz_nbion_trace(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of (if non-blank) beam trace element, Possible values same as nbion; nbion(ib).ne.nbion_trace(ib) enforced., This allows a second trace element to be injected with any neutral, beam-- as in trace tritium beam experiments, or, heating beams doped, with a noble gas species.  See: power_nbi_trace(...)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nbion_trace F77NAME(psgetrnk_nbion_trace)
void psGetRnk_nbion_trace(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of (if non-blank) beam trace element, Possible values same as nbion; nbion(ib).ne.nbion_trace(ib) enforced., This allows a second trace element to be injected with any neutral, beam-- as in trace tritium beam experiments, or, heating beams doped, with a noble gas species.  See: power_nbi_trace(...)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nbion_trace F77NAME(psgetdim_nbion_trace)
void psGetDim_nbion_trace(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species list dimension of SFUS (fusion_ion)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_fusion F77NAME(psget_nspec_fusion)
void psGet_nspec_fusion(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of SFUS (fusion_ion)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_fusion F77NAME(psset_nspec_fusion)
void psSet_nspec_fusion(int* iobj, const int* data, int* ierr);

/**
 * Get SFUS specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sfus_type F77NAME(psget_sfus_type)
void psGet_sfus_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set SFUS specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sfus_type F77NAME(psset_sfus_type)
void psSet_sfus_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of SFUS specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sfus_type F77NAME(psgetrnk_sfus_type)
void psGetRnk_sfus_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SFUS specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sfus_type F77NAME(psgetdim_sfus_type)
void psGetDim_sfus_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SFUS specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_sfus F77NAME(psget_q_sfus)
void psGet_q_sfus(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SFUS specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_sfus F77NAME(psset_q_sfus)
void psSet_q_sfus(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SFUS specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_sfus F77NAME(psgetrnk_q_sfus)
void psGetRnk_q_sfus(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SFUS specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_sfus F77NAME(psgetdim_q_sfus)
void psGetDim_q_sfus(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SFUS atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_sfus F77NAME(psget_qatom_sfus)
void psGet_qatom_sfus(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SFUS atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_sfus F77NAME(psset_qatom_sfus)
void psSet_qatom_sfus(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SFUS atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_sfus F77NAME(psgetrnk_qatom_sfus)
void psGetRnk_qatom_sfus(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SFUS atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_sfus F77NAME(psgetdim_qatom_sfus)
void psGetDim_qatom_sfus(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SFUS specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_sfus F77NAME(psget_m_sfus)
void psGet_m_sfus(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SFUS specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_sfus F77NAME(psset_m_sfus)
void psSet_m_sfus(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SFUS specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_sfus F77NAME(psgetrnk_m_sfus)
void psGetRnk_m_sfus(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SFUS specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_sfus F77NAME(psgetdim_m_sfus)
void psGetDim_m_sfus(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion product ion species
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sfus_name F77NAME(psget_sfus_name)
void psGet_sfus_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set fusion product ion species
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sfus_name F77NAME(psset_sfus_name)
void psSet_sfus_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of fusion product ion species
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_sfus_name F77NAME(psgetsz_sfus_name)
void psGetSz_sfus_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of fusion product ion species
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sfus_name F77NAME(psgetrnk_sfus_name)
void psGetRnk_sfus_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion product ion species
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sfus_name F77NAME(psgetdim_sfus_name)
void psGetDim_sfus_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species list dimension of RFMIN (RF_minority)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_rfmin F77NAME(psget_nspec_rfmin)
void psGet_nspec_rfmin(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of RFMIN (RF_minority)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_rfmin F77NAME(psset_nspec_rfmin)
void psSet_nspec_rfmin(int* iobj, const int* data, int* ierr);

/**
 * Get RFMIN specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rfmin_type F77NAME(psget_rfmin_type)
void psGet_rfmin_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set RFMIN specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rfmin_type F77NAME(psset_rfmin_type)
void psSet_rfmin_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of RFMIN specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rfmin_type F77NAME(psgetrnk_rfmin_type)
void psGetRnk_rfmin_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of RFMIN specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rfmin_type F77NAME(psgetdim_rfmin_type)
void psGetDim_rfmin_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get RFMIN specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_rfmin F77NAME(psget_q_rfmin)
void psGet_q_rfmin(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set RFMIN specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_rfmin F77NAME(psset_q_rfmin)
void psSet_q_rfmin(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of RFMIN specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_rfmin F77NAME(psgetrnk_q_rfmin)
void psGetRnk_q_rfmin(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of RFMIN specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_rfmin F77NAME(psgetdim_q_rfmin)
void psGetDim_q_rfmin(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get RFMIN atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_rfmin F77NAME(psget_qatom_rfmin)
void psGet_qatom_rfmin(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set RFMIN atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_rfmin F77NAME(psset_qatom_rfmin)
void psSet_qatom_rfmin(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of RFMIN atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_rfmin F77NAME(psgetrnk_qatom_rfmin)
void psGetRnk_qatom_rfmin(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of RFMIN atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_rfmin F77NAME(psgetdim_qatom_rfmin)
void psGetDim_qatom_rfmin(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get RFMIN specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_rfmin F77NAME(psget_m_rfmin)
void psGet_m_rfmin(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set RFMIN specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_rfmin F77NAME(psset_m_rfmin)
void psSet_m_rfmin(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of RFMIN specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_rfmin F77NAME(psgetrnk_m_rfmin)
void psGetRnk_m_rfmin(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of RFMIN specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_rfmin F77NAME(psgetdim_m_rfmin)
void psGetDim_m_rfmin(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ICRF minority species
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rfmin_name F77NAME(psget_rfmin_name)
void psGet_rfmin_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set ICRF minority species
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rfmin_name F77NAME(psset_rfmin_name)
void psSet_rfmin_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of ICRF minority species
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_rfmin_name F77NAME(psgetsz_rfmin_name)
void psGetSz_rfmin_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of ICRF minority species
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rfmin_name F77NAME(psgetrnk_rfmin_name)
void psGetRnk_rfmin_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ICRF minority species
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rfmin_name F77NAME(psgetdim_rfmin_name)
void psGetDim_rfmin_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get frequency on each ICRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_freq_ic F77NAME(psget_freq_ic)
void psGet_freq_ic(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set frequency on each ICRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_freq_ic F77NAME(psset_freq_ic)
void psSet_freq_ic(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of frequency on each ICRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_freq_ic F77NAME(psgetrnk_freq_ic)
void psGetRnk_freq_ic(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of frequency on each ICRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_freq_ic F77NAME(psgetdim_freq_ic)
void psGetDim_freq_ic(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Maximum size of variable length enumeration: N_STRAPS
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_max_n_straps F77NAME(psget_max_n_straps)
void psGet_max_n_straps(int* iobj, int* data, int* ierr);

/**
 * Set Maximum size of variable length enumeration: N_STRAPS
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_max_n_straps F77NAME(psset_max_n_straps)
void psSet_max_n_straps(int* iobj, const int* data, int* ierr);

/**
 * Get number of straps in the antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_n_straps F77NAME(psget_n_straps)
void psGet_n_straps(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set number of straps in the antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_n_straps F77NAME(psset_n_straps)
void psSet_n_straps(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of number of straps in the antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_n_straps F77NAME(psgetrnk_n_straps)
void psGetRnk_n_straps(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number of straps in the antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_n_straps F77NAME(psgetdim_n_straps)
void psGetDim_n_straps(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get major radius of antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_ant F77NAME(psget_r_ant)
void psGet_r_ant(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set major radius of antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_ant F77NAME(psset_r_ant)
void psSet_r_ant(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of major radius of antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_ant F77NAME(psgetrnk_r_ant)
void psGetRnk_r_ant(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of major radius of antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_ant F77NAME(psgetdim_r_ant)
void psGetDim_r_ant(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get height of antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_ant F77NAME(psget_z_ant)
void psGet_z_ant(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set height of antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_ant F77NAME(psset_z_ant)
void psSet_z_ant(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of height of antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_ant F77NAME(psgetrnk_z_ant)
void psGetRnk_z_ant(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of height of antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_ant F77NAME(psgetdim_z_ant)
void psGetDim_z_ant(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get center of antenna relative to TF coil midplane, machine midplane as defined by Z=0 in the equilibrium specification, same reference as used for beams, default of 0.0 could be used, but ant. is often offset
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_mid_ant F77NAME(psget_z_mid_ant)
void psGet_z_mid_ant(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set center of antenna relative to TF coil midplane, machine midplane as defined by Z=0 in the equilibrium specification, same reference as used for beams, default of 0.0 could be used, but ant. is often offset
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_mid_ant F77NAME(psset_z_mid_ant)
void psSet_z_mid_ant(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of center of antenna relative to TF coil midplane, machine midplane as defined by Z=0 in the equilibrium specification, same reference as used for beams, default of 0.0 could be used, but ant. is often offset
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_mid_ant F77NAME(psgetrnk_z_mid_ant)
void psGetRnk_z_mid_ant(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of center of antenna relative to TF coil midplane, machine midplane as defined by Z=0 in the equilibrium specification, same reference as used for beams, default of 0.0 could be used, but ant. is often offset
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_mid_ant F77NAME(psgetdim_z_mid_ant)
void psGetDim_z_mid_ant(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Maximum size of variable length enumeration: NUM_NPHI_VAC
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_max_num_nphi_vac F77NAME(psget_max_num_nphi_vac)
void psGet_max_num_nphi_vac(int* iobj, int* data, int* ierr);

/**
 * Set Maximum size of variable length enumeration: NUM_NPHI_VAC
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_max_num_nphi_vac F77NAME(psset_max_num_nphi_vac)
void psSet_max_num_nphi_vac(int* iobj, const int* data, int* ierr);

/**
 * Get number of non-zero n_phi values, counting both positive and negative, n_phi values for the retained vacuum, spectrum--will typicall be a few hundred, or less and is a super set of num_phi
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_num_nphi_vac F77NAME(psget_num_nphi_vac)
void psGet_num_nphi_vac(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set number of non-zero n_phi values, counting both positive and negative, n_phi values for the retained vacuum, spectrum--will typicall be a few hundred, or less and is a super set of num_phi
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_num_nphi_vac F77NAME(psset_num_nphi_vac)
void psSet_num_nphi_vac(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of number of non-zero n_phi values, counting both positive and negative, n_phi values for the retained vacuum, spectrum--will typicall be a few hundred, or less and is a super set of num_phi
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_num_nphi_vac F77NAME(psgetrnk_num_nphi_vac)
void psGetRnk_num_nphi_vac(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number of non-zero n_phi values, counting both positive and negative, n_phi values for the retained vacuum, spectrum--will typicall be a few hundred, or less and is a super set of num_phi
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_num_nphi_vac F77NAME(psgetdim_num_nphi_vac)
void psGetDim_num_nphi_vac(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get real part of Fourier Coef
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_real_ant_coef F77NAME(psget_real_ant_coef)
void psGet_real_ant_coef(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set real part of Fourier Coef
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_real_ant_coef F77NAME(psset_real_ant_coef)
void psSet_real_ant_coef(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of real part of Fourier Coef
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_real_ant_coef F77NAME(psgetrnk_real_ant_coef)
void psGetRnk_real_ant_coef(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of real part of Fourier Coef
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_real_ant_coef F77NAME(psgetdim_real_ant_coef)
void psGetDim_real_ant_coef(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get imag part of Fourier Coef
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_imag_ant_coef F77NAME(psget_imag_ant_coef)
void psGet_imag_ant_coef(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set imag part of Fourier Coef
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_imag_ant_coef F77NAME(psset_imag_ant_coef)
void psSet_imag_ant_coef(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of imag part of Fourier Coef
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_imag_ant_coef F77NAME(psgetrnk_imag_ant_coef)
void psGetRnk_imag_ant_coef(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of imag part of Fourier Coef
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_imag_ant_coef F77NAME(psgetdim_imag_ant_coef)
void psGetDim_imag_ant_coef(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Maximum size of variable length enumeration: NUM_NPHI
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_max_num_nphi F77NAME(psget_max_num_nphi)
void psGet_max_num_nphi(int* iobj, int* data, int* ierr);

/**
 * Set Maximum size of variable length enumeration: NUM_NPHI
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_max_num_nphi F77NAME(psset_max_num_nphi)
void psSet_max_num_nphi(int* iobj, const int* data, int* ierr);

/**
 * Get number of non-zero n_phi values, counting both positive and negative, n_phi values
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_num_nphi F77NAME(psget_num_nphi)
void psGet_num_nphi(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set number of non-zero n_phi values, counting both positive and negative, n_phi values
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_num_nphi F77NAME(psset_num_nphi)
void psSet_num_nphi(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of number of non-zero n_phi values, counting both positive and negative, n_phi values
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_num_nphi F77NAME(psgetrnk_num_nphi)
void psGetRnk_num_nphi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number of non-zero n_phi values, counting both positive and negative, n_phi values
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_num_nphi F77NAME(psgetdim_num_nphi)
void psGetDim_num_nphi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get n_phi wave spectrum from antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nphi F77NAME(psget_nphi)
void psGet_nphi(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Set n_phi wave spectrum from antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nphi F77NAME(psset_nphi)
void psSet_nphi(int* iobj, const int* n1, const int* n2, const int* data, int* ierr);

/**
 * Get number of dimension of n_phi wave spectrum from antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nphi F77NAME(psgetrnk_nphi)
void psGetRnk_nphi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of n_phi wave spectrum from antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nphi F77NAME(psgetdim_nphi)
void psGetDim_nphi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get vacuum spectrum n_phi weight, power_ic(iant)*wt_nphi(ind,iant), gives "vacuum" power @nphi(ind,iant), "ind" covers range 1:num_nphi(iant)., see also wt_nphi_abs(...)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_wt_nphi F77NAME(psget_wt_nphi)
void psGet_wt_nphi(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set vacuum spectrum n_phi weight, power_ic(iant)*wt_nphi(ind,iant), gives "vacuum" power @nphi(ind,iant), "ind" covers range 1:num_nphi(iant)., see also wt_nphi_abs(...)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_wt_nphi F77NAME(psset_wt_nphi)
void psSet_wt_nphi(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of vacuum spectrum n_phi weight, power_ic(iant)*wt_nphi(ind,iant), gives "vacuum" power @nphi(ind,iant), "ind" covers range 1:num_nphi(iant)., see also wt_nphi_abs(...)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_wt_nphi F77NAME(psgetrnk_wt_nphi)
void psGetRnk_wt_nphi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of vacuum spectrum n_phi weight, power_ic(iant)*wt_nphi(ind,iant), gives "vacuum" power @nphi(ind,iant), "ind" covers range 1:num_nphi(iant)., see also wt_nphi_abs(...)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_wt_nphi F77NAME(psgetdim_wt_nphi)
void psGetDim_wt_nphi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get B_phi orientation: +1 means CCW viewed from above, -1 means clockwise (CW) viewed from above.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_kccw_bphi F77NAME(psget_kccw_bphi)
void psGet_kccw_bphi(int* iobj, int* data, int* ierr);

/**
 * Set B_phi orientation: +1 means CCW viewed from above, -1 means clockwise (CW) viewed from above.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_kccw_bphi F77NAME(psset_kccw_bphi)
void psSet_kccw_bphi(int* iobj, const int* data, int* ierr);

/**
 * Get J_phi orientation: +1 means CCW viewed from above
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_kccw_jphi F77NAME(psget_kccw_jphi)
void psGet_kccw_jphi(int* iobj, int* data, int* ierr);

/**
 * Set J_phi orientation: +1 means CCW viewed from above
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_kccw_jphi F77NAME(psset_kccw_jphi)
void psSet_kccw_jphi(int* iobj, const int* data, int* ierr);

/**
 * Get item list dimension of gs_name (gas_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ngsc0 F77NAME(psget_ngsc0)
void psGet_ngsc0(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of gs_name (gas_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ngsc0 F77NAME(psset_ngsc0)
void psSet_ngsc0(int* iobj, const int* data, int* ierr);

/**
 * Get number & name of edge neutral gas sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gs_name F77NAME(psget_gs_name)
void psGet_gs_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set number & name of edge neutral gas sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gs_name F77NAME(psset_gs_name)
void psSet_gs_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of number & name of edge neutral gas sources
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_gs_name F77NAME(psgetsz_gs_name)
void psGetSz_gs_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of number & name of edge neutral gas sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gs_name F77NAME(psgetrnk_gs_name)
void psGetRnk_gs_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number & name of edge neutral gas sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gs_name F77NAME(psgetdim_gs_name)
void psGetDim_gs_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get name of species introduced by each gas source, Possible values are: "H", "D", "T", "He3", and "He4" at present., Each must correspond to an actual species in the SGAS list.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gas_atom F77NAME(psget_gas_atom)
void psGet_gas_atom(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set name of species introduced by each gas source, Possible values are: "H", "D", "T", "He3", and "He4" at present., Each must correspond to an actual species in the SGAS list.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gas_atom F77NAME(psset_gas_atom)
void psSet_gas_atom(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of name of species introduced by each gas source, Possible values are: "H", "D", "T", "He3", and "He4" at present., Each must correspond to an actual species in the SGAS list.
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_gas_atom F77NAME(psgetsz_gas_atom)
void psGetSz_gas_atom(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of name of species introduced by each gas source, Possible values are: "H", "D", "T", "He3", and "He4" at present., Each must correspond to an actual species in the SGAS list.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gas_atom F77NAME(psgetrnk_gas_atom)
void psGetRnk_gas_atom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of name of species introduced by each gas source, Possible values are: "H", "D", "T", "He3", and "He4" at present., Each must correspond to an actual species in the SGAS list.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gas_atom F77NAME(psgetdim_gas_atom)
void psGetDim_gas_atom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 0/1; =1 to for recycling sources, i.e. sources proportional to ion outfluxes
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_is_recycling F77NAME(psget_is_recycling)
void psGet_is_recycling(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set 0/1; =1 to for recycling sources, i.e. sources proportional to ion outfluxes
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_is_recycling F77NAME(psset_is_recycling)
void psSet_is_recycling(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of 0/1; =1 to for recycling sources, i.e. sources proportional to ion outfluxes
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_is_recycling F77NAME(psgetrnk_is_recycling)
void psGetRnk_is_recycling(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 0/1; =1 to for recycling sources, i.e. sources proportional to ion outfluxes
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_is_recycling F77NAME(psgetdim_is_recycling)
void psGetDim_is_recycling(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of xs_name (impurity_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nxs F77NAME(psget_nxs)
void psGet_nxs(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of xs_name (impurity_source)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nxs F77NAME(psset_nxs)
void psSet_nxs(int* iobj, const int* data, int* ierr);

/**
 * Get number & name of impurity sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_xs_name F77NAME(psget_xs_name)
void psGet_xs_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set number & name of impurity sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_xs_name F77NAME(psset_xs_name)
void psSet_xs_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of number & name of impurity sources
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_xs_name F77NAME(psgetsz_xs_name)
void psGetSz_xs_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of number & name of impurity sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_xs_name F77NAME(psgetrnk_xs_name)
void psGetRnk_xs_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number & name of impurity sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_xs_name F77NAME(psgetdim_xs_name)
void psGetDim_xs_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get frequency of EC source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_freq_ec F77NAME(psget_freq_ec)
void psGet_freq_ec(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set frequency of EC source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_freq_ec F77NAME(psset_freq_ec)
void psSet_freq_ec(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of frequency of EC source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_freq_ec F77NAME(psgetrnk_freq_ec)
void psGetRnk_freq_ec(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of frequency of EC source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_freq_ec F77NAME(psgetdim_freq_ec)
void psGetDim_freq_ec(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get poloidal aiming angle, = angle from +Z direction:, 0 degrees-> straight up;, +/-  45 degrees-> on a cone in an upward direction, +/-  90 degrees-> in a horizontal direction..., +/- 135 degrees-> on a cone in a downward direction, +/- 180 degrees-> straight down, (for values other than 0,+/- 180, see alse EC_phi_aim).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_theta_aim F77NAME(psget_ec_theta_aim)
void psGet_ec_theta_aim(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set poloidal aiming angle, = angle from +Z direction:, 0 degrees-> straight up;, +/-  45 degrees-> on a cone in an upward direction, +/-  90 degrees-> in a horizontal direction..., +/- 135 degrees-> on a cone in a downward direction, +/- 180 degrees-> straight down, (for values other than 0,+/- 180, see alse EC_phi_aim).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_theta_aim F77NAME(psset_ec_theta_aim)
void psSet_ec_theta_aim(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of poloidal aiming angle, = angle from +Z direction:, 0 degrees-> straight up;, +/-  45 degrees-> on a cone in an upward direction, +/-  90 degrees-> in a horizontal direction..., +/- 135 degrees-> on a cone in a downward direction, +/- 180 degrees-> straight down, (for values other than 0,+/- 180, see alse EC_phi_aim).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ec_theta_aim F77NAME(psgetrnk_ec_theta_aim)
void psGetRnk_ec_theta_aim(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of poloidal aiming angle, = angle from +Z direction:, 0 degrees-> straight up;, +/-  45 degrees-> on a cone in an upward direction, +/-  90 degrees-> in a horizontal direction..., +/- 135 degrees-> on a cone in a downward direction, +/- 180 degrees-> straight down, (for values other than 0,+/- 180, see alse EC_phi_aim).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ec_theta_aim F77NAME(psgetdim_ec_theta_aim)
void psGetDim_ec_theta_aim(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get toroidal aiming angle, 0 degrees-> component of beam in +R direction, 90 degrees-> component of beam in +phi direction, 180 degrees-> component of beam in -R direction, 270 degrees or -90 degrees-> component in -phi direction, An EC beam with a component in the +phi direction, will push electrons in the +phi direction, counter, clockwise (CCW) around the machine axis as viewed, from above; and hence drive current in a clockwise, (CW) direction.  See shot configuration variable, kCCW_Jphi for orientation of main plasma current., See also EC_theta_aim(...).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_phi_aim F77NAME(psget_ec_phi_aim)
void psGet_ec_phi_aim(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set toroidal aiming angle, 0 degrees-> component of beam in +R direction, 90 degrees-> component of beam in +phi direction, 180 degrees-> component of beam in -R direction, 270 degrees or -90 degrees-> component in -phi direction, An EC beam with a component in the +phi direction, will push electrons in the +phi direction, counter, clockwise (CCW) around the machine axis as viewed, from above; and hence drive current in a clockwise, (CW) direction.  See shot configuration variable, kCCW_Jphi for orientation of main plasma current., See also EC_theta_aim(...).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_phi_aim F77NAME(psset_ec_phi_aim)
void psSet_ec_phi_aim(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of toroidal aiming angle, 0 degrees-> component of beam in +R direction, 90 degrees-> component of beam in +phi direction, 180 degrees-> component of beam in -R direction, 270 degrees or -90 degrees-> component in -phi direction, An EC beam with a component in the +phi direction, will push electrons in the +phi direction, counter, clockwise (CCW) around the machine axis as viewed, from above; and hence drive current in a clockwise, (CW) direction.  See shot configuration variable, kCCW_Jphi for orientation of main plasma current., See also EC_theta_aim(...).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ec_phi_aim F77NAME(psgetrnk_ec_phi_aim)
void psGetRnk_ec_phi_aim(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of toroidal aiming angle, 0 degrees-> component of beam in +R direction, 90 degrees-> component of beam in +phi direction, 180 degrees-> component of beam in -R direction, 270 degrees or -90 degrees-> component in -phi direction, An EC beam with a component in the +phi direction, will push electrons in the +phi direction, counter, clockwise (CCW) around the machine axis as viewed, from above; and hence drive current in a clockwise, (CW) direction.  See shot configuration variable, kCCW_Jphi for orientation of main plasma current., See also EC_theta_aim(...).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ec_phi_aim F77NAME(psgetdim_ec_phi_aim)
void psGetDim_ec_phi_aim(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get O-mode fraction of EC source, Power(O-mode)/(Power(O-mode)+Power(X-mode))
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_omode_fraction F77NAME(psget_ec_omode_fraction)
void psGet_ec_omode_fraction(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set O-mode fraction of EC source, Power(O-mode)/(Power(O-mode)+Power(X-mode))
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_omode_fraction F77NAME(psset_ec_omode_fraction)
void psSet_ec_omode_fraction(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of O-mode fraction of EC source, Power(O-mode)/(Power(O-mode)+Power(X-mode))
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ec_omode_fraction F77NAME(psgetrnk_ec_omode_fraction)
void psGetRnk_ec_omode_fraction(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of O-mode fraction of EC source, Power(O-mode)/(Power(O-mode)+Power(X-mode))
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ec_omode_fraction F77NAME(psgetdim_ec_omode_fraction)
void psGetDim_ec_omode_fraction(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get frequency on each LHRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_freq_lh F77NAME(psget_freq_lh)
void psGet_freq_lh(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set frequency on each LHRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_freq_lh F77NAME(psset_freq_lh)
void psSet_freq_lh(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of frequency on each LHRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_freq_lh F77NAME(psgetrnk_freq_lh)
void psGetRnk_freq_lh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of frequency on each LHRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_freq_lh F77NAME(psgetdim_freq_lh)
void psGetDim_freq_lh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Maximum size of variable length enumeration: NSPECTRUMLH_SRC
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_max_nspectrumlh_src F77NAME(psget_max_nspectrumlh_src)
void psGet_max_nspectrumlh_src(int* iobj, int* data, int* ierr);

/**
 * Set Maximum size of variable length enumeration: NSPECTRUMLH_SRC
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_max_nspectrumlh_src F77NAME(psset_max_nspectrumlh_src)
void psSet_max_nspectrumlh_src(int* iobj, const int* data, int* ierr);

/**
 * Get number of spectrum peaks
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspectrumlh_src F77NAME(psget_nspectrumlh_src)
void psGet_nspectrumlh_src(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set number of spectrum peaks
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspectrumlh_src F77NAME(psset_nspectrumlh_src)
void psSet_nspectrumlh_src(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of number of spectrum peaks
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nspectrumlh_src F77NAME(psgetrnk_nspectrumlh_src)
void psGetRnk_nspectrumlh_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of number of spectrum peaks
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nspectrumlh_src F77NAME(psgetdim_nspectrumlh_src)
void psGetDim_nspectrumlh_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get parallel mode number, center of the spectrum peak
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_aminlh F77NAME(psget_aminlh)
void psGet_aminlh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set parallel mode number, center of the spectrum peak
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_aminlh F77NAME(psset_aminlh)
void psSet_aminlh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of parallel mode number, center of the spectrum peak
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_aminlh F77NAME(psgetrnk_aminlh)
void psGetRnk_aminlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of parallel mode number, center of the spectrum peak
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_aminlh F77NAME(psgetdim_aminlh)
void psGetDim_aminlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get width of the spectrum peak
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_amaxlh F77NAME(psget_amaxlh)
void psGet_amaxlh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set width of the spectrum peak
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_amaxlh F77NAME(psset_amaxlh)
void psSet_amaxlh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of width of the spectrum peak
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_amaxlh F77NAME(psgetrnk_amaxlh)
void psGetRnk_amaxlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of width of the spectrum peak
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_amaxlh F77NAME(psgetdim_amaxlh)
void psGetDim_amaxlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get toroidal mode number left of lumps
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_atorminlh F77NAME(psget_atorminlh)
void psGet_atorminlh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set toroidal mode number left of lumps
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_atorminlh F77NAME(psset_atorminlh)
void psSet_atorminlh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of toroidal mode number left of lumps
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_atorminlh F77NAME(psgetrnk_atorminlh)
void psGetRnk_atorminlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of toroidal mode number left of lumps
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_atorminlh F77NAME(psgetdim_atorminlh)
void psGetDim_atorminlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get toroidal mode number right of lumps
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_atormaxlh F77NAME(psget_atormaxlh)
void psGet_atormaxlh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set toroidal mode number right of lumps
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_atormaxlh F77NAME(psset_atormaxlh)
void psSet_atormaxlh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of toroidal mode number right of lumps
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_atormaxlh F77NAME(psgetrnk_atormaxlh)
void psGetRnk_atormaxlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of toroidal mode number right of lumps
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_atormaxlh F77NAME(psgetdim_atormaxlh)
void psGetDim_atormaxlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get poloidal mode number left of lumps
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_apolminlh F77NAME(psget_apolminlh)
void psGet_apolminlh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set poloidal mode number left of lumps
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_apolminlh F77NAME(psset_apolminlh)
void psSet_apolminlh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of poloidal mode number left of lumps
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_apolminlh F77NAME(psgetrnk_apolminlh)
void psGetRnk_apolminlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of poloidal mode number left of lumps
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_apolminlh F77NAME(psgetdim_apolminlh)
void psGetDim_apolminlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get poloidal mode number right of lumps
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_apolmaxlh F77NAME(psget_apolmaxlh)
void psGet_apolmaxlh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set poloidal mode number right of lumps
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_apolmaxlh F77NAME(psset_apolmaxlh)
void psSet_apolmaxlh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of poloidal mode number right of lumps
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_apolmaxlh F77NAME(psgetrnk_apolmaxlh)
void psGetRnk_apolmaxlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of poloidal mode number right of lumps
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_apolmaxlh F77NAME(psgetdim_apolmaxlh)
void psGetDim_apolmaxlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fraction of power on each peak (the sum over all peaks must be 1)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fracpslh F77NAME(psget_fracpslh)
void psGet_fracpslh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set fraction of power on each peak (the sum over all peaks must be 1)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fracpslh F77NAME(psset_fracpslh)
void psSet_fracpslh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of fraction of power on each peak (the sum over all peaks must be 1)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_fracpslh F77NAME(psgetrnk_fracpslh)
void psGetRnk_fracpslh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fraction of power on each peak (the sum over all peaks must be 1)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_fracpslh F77NAME(psgetdim_fracpslh)
void psGetDim_fracpslh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get need description
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_i_npoloidal F77NAME(psget_i_npoloidal)
void psGet_i_npoloidal(int* iobj, int* data, int* ierr);

/**
 * Set need description
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_i_npoloidal F77NAME(psset_i_npoloidal)
void psSet_i_npoloidal(int* iobj, const int* data, int* ierr);

/**
 * Get need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rhopsi0lh F77NAME(psget_rhopsi0lh)
void psGet_rhopsi0lh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rhopsi0lh F77NAME(psset_rhopsi0lh)
void psSet_rhopsi0lh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rhopsi0lh F77NAME(psgetrnk_rhopsi0lh)
void psGetRnk_rhopsi0lh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rhopsi0lh F77NAME(psgetdim_rhopsi0lh)
void psGetDim_rhopsi0lh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_thegrilh F77NAME(psget_thegrilh)
void psGet_thegrilh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_thegrilh F77NAME(psset_thegrilh)
void psSet_thegrilh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_thegrilh F77NAME(psgetrnk_thegrilh)
void psGetRnk_thegrilh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_thegrilh F77NAME(psgetdim_thegrilh)
void psGetDim_thegrilh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_phigrilh F77NAME(psget_phigrilh)
void psGet_phigrilh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_phigrilh F77NAME(psset_phigrilh)
void psSet_phigrilh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_phigrilh F77NAME(psgetrnk_phigrilh)
void psGetRnk_phigrilh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_phigrilh F77NAME(psgetdim_phigrilh)
void psGetDim_phigrilh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_hegrilh F77NAME(psget_hegrilh)
void psGet_hegrilh(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_hegrilh F77NAME(psset_hegrilh)
void psSet_hegrilh(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_hegrilh F77NAME(psgetrnk_hegrilh)
void psGetRnk_hegrilh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_hegrilh F77NAME(psgetdim_hegrilh)
void psGetDim_hegrilh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nthinlh F77NAME(psget_nthinlh)
void psGet_nthinlh(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Set need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nthinlh F77NAME(psset_nthinlh)
void psSet_nthinlh(int* iobj, const int* n1, const int* n2, const int* data, int* ierr);

/**
 * Get number of dimension of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nthinlh F77NAME(psgetrnk_nthinlh)
void psGetRnk_nthinlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nthinlh F77NAME(psgetdim_nthinlh)
void psGetDim_nthinlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nnkparlh F77NAME(psget_nnkparlh)
void psGet_nnkparlh(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Set need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nnkparlh F77NAME(psset_nnkparlh)
void psSet_nnkparlh(int* iobj, const int* n1, const int* n2, const int* data, int* ierr);

/**
 * Get number of dimension of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nnkparlh F77NAME(psgetrnk_nnkparlh)
void psGetRnk_nnkparlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nnkparlh F77NAME(psgetdim_nnkparlh)
void psGetDim_nnkparlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nnktorlh F77NAME(psget_nnktorlh)
void psGet_nnktorlh(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Set need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nnktorlh F77NAME(psset_nnktorlh)
void psSet_nnktorlh(int* iobj, const int* n1, const int* n2, const int* data, int* ierr);

/**
 * Get number of dimension of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nnktorlh F77NAME(psgetrnk_nnktorlh)
void psGetRnk_nnktorlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nnktorlh F77NAME(psgetdim_nnktorlh)
void psGetDim_nnktorlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nnkpollh F77NAME(psget_nnkpollh)
void psGet_nnkpollh(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Set need description
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nnkpollh F77NAME(psset_nnkpollh)
void psSet_nnkpollh(int* iobj, const int* n1, const int* n2, const int* data, int* ierr);

/**
 * Get number of dimension of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nnkpollh F77NAME(psgetrnk_nnkpollh)
void psGetRnk_nnkpollh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of need description
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nnkpollh F77NAME(psgetdim_nnkpollh)
void psGetDim_nnkpollh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Run ID, one word, no imbedded blanks; <= 32 characters
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_runid F77NAME(psget_runid)
void psGet_runid(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Run ID, one word, no imbedded blanks; <= 32 characters
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_runid F77NAME(psset_runid)
void psSet_runid(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Run ID, one word, no imbedded blanks; <= 32 characters
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_runid F77NAME(psgetsz_runid)
void psGetSz_runid(int* iobj, int* size, int* ierr); 

/**
 * Get Run Label, imbedded blanks allowed; <= 80 characters
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_global_label F77NAME(psget_global_label)
void psGet_global_label(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Run Label, imbedded blanks allowed; <= 80 characters
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_global_label F77NAME(psset_global_label)
void psSet_global_label(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Run Label, imbedded blanks allowed; <= 80 characters
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_global_label F77NAME(psgetsz_global_label)
void psGetSz_global_label(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code managing PLASMA component, (advance of specie temperatures & densities etc)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_plasma_code_info F77NAME(psget_plasma_code_info)
void psGet_plasma_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code managing PLASMA component, (advance of specie temperatures & densities etc)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_plasma_code_info F77NAME(psset_plasma_code_info)
void psSet_plasma_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code managing PLASMA component, (advance of specie temperatures & densities etc)
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_plasma_code_info F77NAME(psgetsz_plasma_code_info)
void psGetSz_plasma_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of surface voltage data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vsur_data_info F77NAME(psget_vsur_data_info)
void psGet_vsur_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of surface voltage data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vsur_data_info F77NAME(psset_vsur_data_info)
void psSet_vsur_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of surface voltage data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_vsur_data_info F77NAME(psgetsz_vsur_data_info)
void psGetSz_vsur_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of plasma current data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_cur_data_info F77NAME(psget_cur_data_info)
void psGet_cur_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of plasma current data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_cur_data_info F77NAME(psset_cur_data_info)
void psSet_cur_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of plasma current data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_cur_data_info F77NAME(psgetsz_cur_data_info)
void psGetSz_cur_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of toroidal field data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tf_data_info F77NAME(psget_tf_data_info)
void psGet_tf_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of toroidal field data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tf_data_info F77NAME(psset_tf_data_info)
void psSet_tf_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of toroidal field data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_tf_data_info F77NAME(psgetsz_tf_data_info)
void psGetSz_tf_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of Temperature data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ts_data_info F77NAME(psget_ts_data_info)
void psGet_ts_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of Temperature data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ts_data_info F77NAME(psset_ts_data_info)
void psSet_ts_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of Temperature data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_ts_data_info F77NAME(psgetsz_ts_data_info)
void psGetSz_ts_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of Density data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ns_data_info F77NAME(psget_ns_data_info)
void psGet_ns_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of Density data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ns_data_info F77NAME(psset_ns_data_info)
void psSet_ns_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of Density data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_ns_data_info F77NAME(psgetsz_ns_data_info)
void psGetSz_ns_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of Zeff data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zeff_data_info F77NAME(psget_zeff_data_info)
void psGet_zeff_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of Zeff data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zeff_data_info F77NAME(psset_zeff_data_info)
void psSet_zeff_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of Zeff data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_zeff_data_info F77NAME(psgetsz_zeff_data_info)
void psGetSz_zeff_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of toroidal velocity data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vtor_data_info F77NAME(psget_vtor_data_info)
void psGet_vtor_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of toroidal velocity data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vtor_data_info F77NAME(psset_vtor_data_info)
void psSet_vtor_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of toroidal velocity data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_vtor_data_info F77NAME(psgetsz_vtor_data_info)
void psGetSz_vtor_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of poloidal velocity data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vpol_data_info F77NAME(psget_vpol_data_info)
void psGet_vpol_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of poloidal velocity data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vpol_data_info F77NAME(psset_vpol_data_info)
void psSet_vpol_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of poloidal velocity data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_vpol_data_info F77NAME(psgetsz_vpol_data_info)
void psGetSz_vpol_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing EQ component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eq_code_info F77NAME(psget_eq_code_info)
void psGet_eq_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing EQ component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eq_code_info F77NAME(psset_eq_code_info)
void psSet_eq_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing EQ component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_eq_code_info F77NAME(psgetsz_eq_code_info)
void psGetSz_eq_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: source of EQ input data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eq_data_info F77NAME(psget_eq_data_info)
void psGet_eq_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: source of EQ input data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eq_data_info F77NAME(psset_eq_data_info)
void psSet_eq_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: source of EQ input data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_eq_data_info F77NAME(psgetsz_eq_data_info)
void psGetSz_eq_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing NBI component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbi_code_info F77NAME(psget_nbi_code_info)
void psGet_nbi_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing NBI component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbi_code_info F77NAME(psset_nbi_code_info)
void psSet_nbi_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing NBI component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_nbi_code_info F77NAME(psgetsz_nbi_code_info)
void psGetSz_nbi_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of beam power & voltage data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbi_data_info F77NAME(psget_nbi_data_info)
void psGet_nbi_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of beam power & voltage data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbi_data_info F77NAME(psset_nbi_data_info)
void psSet_nbi_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of beam power & voltage data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_nbi_data_info F77NAME(psgetsz_nbi_data_info)
void psGetSz_nbi_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing IC component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ic_code_info F77NAME(psget_ic_code_info)
void psGet_ic_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing IC component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ic_code_info F77NAME(psset_ic_code_info)
void psSet_ic_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing IC component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_ic_code_info F77NAME(psgetsz_ic_code_info)
void psGetSz_ic_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of ICRF power data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ic_data_info F77NAME(psget_ic_data_info)
void psGet_ic_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of ICRF power data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ic_data_info F77NAME(psset_ic_data_info)
void psSet_ic_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of ICRF power data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_ic_data_info F77NAME(psgetsz_ic_data_info)
void psGetSz_ic_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing EC component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_code_info F77NAME(psget_ec_code_info)
void psGet_ec_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing EC component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_code_info F77NAME(psset_ec_code_info)
void psSet_ec_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing EC component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_ec_code_info F77NAME(psgetsz_ec_code_info)
void psGetSz_ec_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get information on source of ECRF power data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ec_data_info F77NAME(psget_ec_data_info)
void psGet_ec_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set information on source of ECRF power data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ec_data_info F77NAME(psset_ec_data_info)
void psSet_ec_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of information on source of ECRF power data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_ec_data_info F77NAME(psgetsz_ec_data_info)
void psGetSz_ec_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing LH component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lh_code_info F77NAME(psget_lh_code_info)
void psGet_lh_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing LH component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lh_code_info F77NAME(psset_lh_code_info)
void psSet_lh_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing LH component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_lh_code_info F77NAME(psgetsz_lh_code_info)
void psGetSz_lh_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information on source of LHRF power data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lh_data_info F77NAME(psget_lh_data_info)
void psGet_lh_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information on source of LHRF power data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lh_data_info F77NAME(psset_lh_data_info)
void psSet_lh_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information on source of LHRF power data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_lh_data_info F77NAME(psgetsz_lh_data_info)
void psGetSz_lh_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing PELLET component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pel_code_info F77NAME(psget_pel_code_info)
void psGet_pel_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing PELLET component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pel_code_info F77NAME(psset_pel_code_info)
void psSet_pel_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing PELLET component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_pel_code_info F77NAME(psgetsz_pel_code_info)
void psGetSz_pel_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: on source of pellet injection
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pel_data_info F77NAME(psget_pel_data_info)
void psGet_pel_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: on source of pellet injection
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pel_data_info F77NAME(psset_pel_data_info)
void psSet_pel_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: on source of pellet injection
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_pel_data_info F77NAME(psgetsz_pel_data_info)
void psGetSz_pel_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing RUNAWAY component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_runaway_code_info F77NAME(psget_runaway_code_info)
void psGet_runaway_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing RUNAWAY component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_runaway_code_info F77NAME(psset_runaway_code_info)
void psSet_runaway_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing RUNAWAY component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_runaway_code_info F77NAME(psgetsz_runaway_code_info)
void psGetSz_runaway_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing FUS component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fus_code_info F77NAME(psget_fus_code_info)
void psGet_fus_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing FUS component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fus_code_info F77NAME(psset_fus_code_info)
void psSet_fus_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing FUS component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_fus_code_info F77NAME(psgetsz_fus_code_info)
void psGetSz_fus_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing RAD component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rad_code_info F77NAME(psget_rad_code_info)
void psGet_rad_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing RAD component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rad_code_info F77NAME(psset_rad_code_info)
void psSet_rad_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing RAD component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_rad_code_info F77NAME(psgetsz_rad_code_info)
void psGetSz_rad_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information on source of radiated power data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rad_data_info F77NAME(psget_rad_data_info)
void psGet_rad_data_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information on source of radiated power data
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rad_data_info F77NAME(psset_rad_data_info)
void psSet_rad_data_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information on source of radiated power data
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_rad_data_info F77NAME(psgetsz_rad_data_info)
void psGetSz_rad_data_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing GAS component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gas_code_info F77NAME(psget_gas_code_info)
void psGet_gas_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing GAS component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gas_code_info F77NAME(psset_gas_code_info)
void psSet_gas_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing GAS component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_gas_code_info F77NAME(psgetsz_gas_code_info)
void psGetSz_gas_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get Information: code implementing ANOM component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_anom_code_info F77NAME(psget_anom_code_info)
void psGet_anom_code_info(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set Information: code implementing ANOM component
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_anom_code_info F77NAME(psset_anom_code_info)
void psSet_anom_code_info(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Information: code implementing ANOM component
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_anom_code_info F77NAME(psgetsz_anom_code_info)
void psGetSz_anom_code_info(int* iobj, int* size, int* ierr); 

/**
 * Get start time of simulation
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tinit F77NAME(psget_tinit)
void psGet_tinit(int* iobj, double* data, int* ierr);

/**
 * Set start time of simulation
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tinit F77NAME(psset_tinit)
void psSet_tinit(int* iobj, const double* data, int* ierr);

/**
 * Get stop time of simulation (may be adjustable)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tfinal F77NAME(psget_tfinal)
void psGet_tfinal(int* iobj, double* data, int* ierr);

/**
 * Set stop time of simulation (may be adjustable)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tfinal F77NAME(psset_tfinal)
void psSet_tfinal(int* iobj, const double* data, int* ierr);

/**
 * Get species list dimension of SNBI (beam_ion)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_beam F77NAME(psget_nspec_beam)
void psGet_nspec_beam(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of SNBI (beam_ion)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_beam F77NAME(psset_nspec_beam)
void psSet_nspec_beam(int* iobj, const int* data, int* ierr);

/**
 * Get SNBI specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_snbi_type F77NAME(psget_snbi_type)
void psGet_snbi_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set SNBI specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_snbi_type F77NAME(psset_snbi_type)
void psSet_snbi_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of SNBI specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_snbi_type F77NAME(psgetrnk_snbi_type)
void psGetRnk_snbi_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SNBI specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_snbi_type F77NAME(psgetdim_snbi_type)
void psGetDim_snbi_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SNBI specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_snbi F77NAME(psget_q_snbi)
void psGet_q_snbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SNBI specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_snbi F77NAME(psset_q_snbi)
void psSet_q_snbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SNBI specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_snbi F77NAME(psgetrnk_q_snbi)
void psGetRnk_q_snbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SNBI specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_snbi F77NAME(psgetdim_q_snbi)
void psGetDim_q_snbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SNBI atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_snbi F77NAME(psget_qatom_snbi)
void psGet_qatom_snbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SNBI atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_snbi F77NAME(psset_qatom_snbi)
void psSet_qatom_snbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SNBI atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_snbi F77NAME(psgetrnk_qatom_snbi)
void psGetRnk_qatom_snbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SNBI atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_snbi F77NAME(psgetdim_qatom_snbi)
void psGetDim_qatom_snbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SNBI specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_snbi F77NAME(psget_m_snbi)
void psGet_m_snbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SNBI specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_snbi F77NAME(psset_m_snbi)
void psSet_m_snbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SNBI specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_snbi F77NAME(psgetrnk_m_snbi)
void psGetRnk_m_snbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SNBI specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_snbi F77NAME(psgetdim_m_snbi)
void psGetDim_m_snbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam ion species, this species list to be constructed from nbion(1:nbeam), and augmented optionally by nbion_trace(1:nbeam)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_snbi_name F77NAME(psget_snbi_name)
void psGet_snbi_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set beam ion species, this species list to be constructed from nbion(1:nbeam), and augmented optionally by nbion_trace(1:nbeam)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_snbi_name F77NAME(psset_snbi_name)
void psSet_snbi_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of beam ion species, this species list to be constructed from nbion(1:nbeam), and augmented optionally by nbion_trace(1:nbeam)
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_snbi_name F77NAME(psgetsz_snbi_name)
void psGetSz_snbi_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of beam ion species, this species list to be constructed from nbion(1:nbeam), and augmented optionally by nbion_trace(1:nbeam)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_snbi_name F77NAME(psgetrnk_snbi_name)
void psGetRnk_snbi_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion species, this species list to be constructed from nbion(1:nbeam), and augmented optionally by nbion_trace(1:nbeam)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_snbi_name F77NAME(psgetdim_snbi_name)
void psGetDim_snbi_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get trace element flag, 0 means, beam has no trace element;, 1 means, trace element, matching injection energy fractions, 2 means, trace element injected at 100% full energy, (1 will be set if the trace element is an isotope of', "of the beam's main injection specie; 2 if not)."]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_trace_flag F77NAME(psget_trace_flag)
void psGet_trace_flag(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set trace element flag, 0 means, beam has no trace element;, 1 means, trace element, matching injection energy fractions, 2 means, trace element injected at 100% full energy, (1 will be set if the trace element is an isotope of', "of the beam's main injection specie; 2 if not)."]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_trace_flag F77NAME(psset_trace_flag)
void psSet_trace_flag(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of trace element flag, 0 means, beam has no trace element;, 1 means, trace element, matching injection energy fractions, 2 means, trace element injected at 100% full energy, (1 will be set if the trace element is an isotope of', "of the beam's main injection specie; 2 if not)."]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_trace_flag F77NAME(psgetrnk_trace_flag)
void psGetRnk_trace_flag(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of trace element flag, 0 means, beam has no trace element;, 1 means, trace element, matching injection energy fractions, 2 means, trace element injected at 100% full energy, (1 will be set if the trace element is an isotope of', "of the beam's main injection specie; 2 if not)."]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_trace_flag F77NAME(psgetdim_trace_flag)
void psGetDim_trace_flag(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get maximum Z of non-impurity species, (default is 2: Helium).  Ion species with Z <= Z0max, are considered "non-impurities" and are present in, SGAS, a list of recycling neutral gas species.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z0max F77NAME(psget_z0max)
void psGet_z0max(int* iobj, int* data, int* ierr);

/**
 * Set maximum Z of non-impurity species, (default is 2: Helium).  Ion species with Z <= Z0max, are considered "non-impurities" and are present in, SGAS, a list of recycling neutral gas species.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z0max F77NAME(psset_z0max)
void psSet_z0max(int* iobj, const int* data, int* ierr);

/**
 * Get lower limit on Z of impurity in reduced species list SA;, by default the lowest available Z impurity is chosen., After the SA list is defined, this value is reset to, match the lower Z impurity selected for the SA list.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zimp1 F77NAME(psget_zimp1)
void psGet_zimp1(int* iobj, int* data, int* ierr);

/**
 * Set lower limit on Z of impurity in reduced species list SA;, by default the lowest available Z impurity is chosen., After the SA list is defined, this value is reset to, match the lower Z impurity selected for the SA list.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zimp1 F77NAME(psset_zimp1)
void psSet_zimp1(int* iobj, const int* data, int* ierr);

/**
 * Get upper limit on Z of impurity in SA species list;, by default the highest Z impurity available is chosen., After the SA list is defined, this value is reset to, match the higher Z impurity selected for the SA list.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zimp2 F77NAME(psget_zimp2)
void psGet_zimp2(int* iobj, int* data, int* ierr);

/**
 * Set upper limit on Z of impurity in SA species list;, by default the highest Z impurity available is chosen., After the SA list is defined, this value is reset to, match the higher Z impurity selected for the SA list.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zimp2 F77NAME(psset_zimp2)
void psSet_zimp2(int* iobj, const int* data, int* ierr);

/**
 * Get species list dimension of ALL (specie)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_all F77NAME(psget_nspec_all)
void psGet_nspec_all(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of ALL (specie)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_all F77NAME(psset_nspec_all)
void psSet_nspec_all(int* iobj, const int* data, int* ierr);

/**
 * Get ALL specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_all_type F77NAME(psget_all_type)
void psGet_all_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set ALL specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_all_type F77NAME(psset_all_type)
void psSet_all_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of ALL specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_all_type F77NAME(psgetrnk_all_type)
void psGetRnk_all_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ALL specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_all_type F77NAME(psgetdim_all_type)
void psGetDim_all_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ALL specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_all F77NAME(psget_q_all)
void psGet_q_all(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ALL specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_all F77NAME(psset_q_all)
void psSet_q_all(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ALL specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_all F77NAME(psgetrnk_q_all)
void psGetRnk_q_all(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ALL specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_all F77NAME(psgetdim_q_all)
void psGetDim_q_all(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ALL atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_all F77NAME(psget_qatom_all)
void psGet_qatom_all(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ALL atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_all F77NAME(psset_qatom_all)
void psSet_qatom_all(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ALL atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_all F77NAME(psgetrnk_qatom_all)
void psGetRnk_qatom_all(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ALL atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_all F77NAME(psgetdim_qatom_all)
void psGetDim_qatom_all(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ALL specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_all F77NAME(psget_m_all)
void psGet_m_all(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ALL specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_all F77NAME(psset_m_all)
void psSet_m_all(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ALL specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_all F77NAME(psgetrnk_m_all)
void psGetRnk_m_all(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ALL specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_all F77NAME(psgetdim_m_all)
void psGetDim_m_all(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get all species, index 0 for electrons, this list is the union of lists "s", "snbi", "rfmin", and "sfus"
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_all_name F77NAME(psget_all_name)
void psGet_all_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set all species, index 0 for electrons, this list is the union of lists "s", "snbi", "rfmin", and "sfus"
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_all_name F77NAME(psset_all_name)
void psSet_all_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of all species, index 0 for electrons, this list is the union of lists "s", "snbi", "rfmin", and "sfus"
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_all_name F77NAME(psgetsz_all_name)
void psGetSz_all_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of all species, index 0 for electrons, this list is the union of lists "s", "snbi", "rfmin", and "sfus"
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_all_name F77NAME(psgetrnk_all_name)
void psGetRnk_all_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of all species, index 0 for electrons, this list is the union of lists "s", "snbi", "rfmin", and "sfus"
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_all_name F77NAME(psgetdim_all_name)
void psGetDim_all_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species index in original lists, ion species j in "all" corresponds to ion species:, all_index(j) in "s" if all_type(j) = ps_electron, ps_therm_ion, or, ps_impurity, all_index(j) in "snbi" if all_type(j) = ps_beam_ion, all_index(j) in "rfmin" if all_type(j) = ps_rf_minority, all_index(j) in "sfus" if all_type(j) = ps_fusion_ion
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_all_index F77NAME(psget_all_index)
void psGet_all_index(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set species index in original lists, ion species j in "all" corresponds to ion species:, all_index(j) in "s" if all_type(j) = ps_electron, ps_therm_ion, or, ps_impurity, all_index(j) in "snbi" if all_type(j) = ps_beam_ion, all_index(j) in "rfmin" if all_type(j) = ps_rf_minority, all_index(j) in "sfus" if all_type(j) = ps_fusion_ion
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_all_index F77NAME(psset_all_index)
void psSet_all_index(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of species index in original lists, ion species j in "all" corresponds to ion species:, all_index(j) in "s" if all_type(j) = ps_electron, ps_therm_ion, or, ps_impurity, all_index(j) in "snbi" if all_type(j) = ps_beam_ion, all_index(j) in "rfmin" if all_type(j) = ps_rf_minority, all_index(j) in "sfus" if all_type(j) = ps_fusion_ion
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_all_index F77NAME(psgetrnk_all_index)
void psGetRnk_all_index(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of species index in original lists, ion species j in "all" corresponds to ion species:, all_index(j) in "s" if all_type(j) = ps_electron, ps_therm_ion, or, ps_impurity, all_index(j) in "snbi" if all_type(j) = ps_beam_ion, all_index(j) in "rfmin" if all_type(j) = ps_rf_minority, all_index(j) in "sfus" if all_type(j) = ps_fusion_ion
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_all_index F77NAME(psgetdim_all_index)
void psGetDim_all_index(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species list dimension of SA (thermal_specie)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_tha F77NAME(psget_nspec_tha)
void psGet_nspec_tha(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of SA (thermal_specie)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_tha F77NAME(psset_nspec_tha)
void psSet_nspec_tha(int* iobj, const int* data, int* ierr);

/**
 * Get SA specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sa_type F77NAME(psget_sa_type)
void psGet_sa_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set SA specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sa_type F77NAME(psset_sa_type)
void psSet_sa_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of SA specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sa_type F77NAME(psgetrnk_sa_type)
void psGetRnk_sa_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SA specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sa_type F77NAME(psgetdim_sa_type)
void psGetDim_sa_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SA specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_sa F77NAME(psget_q_sa)
void psGet_q_sa(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SA specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_sa F77NAME(psset_q_sa)
void psSet_q_sa(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SA specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_sa F77NAME(psgetrnk_q_sa)
void psGetRnk_q_sa(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SA specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_sa F77NAME(psgetdim_q_sa)
void psGetDim_q_sa(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SA atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_sa F77NAME(psget_qatom_sa)
void psGet_qatom_sa(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SA atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_sa F77NAME(psset_qatom_sa)
void psSet_qatom_sa(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SA atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_sa F77NAME(psgetrnk_qatom_sa)
void psGetRnk_qatom_sa(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SA atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_sa F77NAME(psgetdim_qatom_sa)
void psGetDim_qatom_sa(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SA specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_sa F77NAME(psget_m_sa)
void psGet_m_sa(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SA specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_sa F77NAME(psset_m_sa)
void psSet_m_sa(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SA specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_sa F77NAME(psgetrnk_m_sa)
void psGetRnk_m_sa(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SA specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_sa F77NAME(psgetdim_m_sa)
void psGetDim_m_sa(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get thermal species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sa_name F77NAME(psget_sa_name)
void psGet_sa_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set thermal species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sa_name F77NAME(psset_sa_name)
void psSet_sa_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of thermal species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_sa_name F77NAME(psgetsz_sa_name)
void psGetSz_sa_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of thermal species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sa_name F77NAME(psgetrnk_sa_name)
void psGetRnk_sa_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sa_name F77NAME(psgetdim_sa_name)
void psGetDim_sa_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species index in original lists, sa_index(j)=-1 indicates that element (j) of the "SA" list is, derived from a composite of ions in the "S" list (using Zeff, and quasineutrality equations)., otherwise sa_index(j) gives the index of the species in "S", For example, if index 2 corresponds to Deuterium ions in "SA", then, sa_index(2) gives the index in "S" for Deuterium ions., For non-impurities usually sa_index(j)=j but this could be altered, if He3+1 or He4+1 (less than fully stripped He ions) are present in, the model.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sa_index F77NAME(psget_sa_index)
void psGet_sa_index(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set species index in original lists, sa_index(j)=-1 indicates that element (j) of the "SA" list is, derived from a composite of ions in the "S" list (using Zeff, and quasineutrality equations)., otherwise sa_index(j) gives the index of the species in "S", For example, if index 2 corresponds to Deuterium ions in "SA", then, sa_index(2) gives the index in "S" for Deuterium ions., For non-impurities usually sa_index(j)=j but this could be altered, if He3+1 or He4+1 (less than fully stripped He ions) are present in, the model.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sa_index F77NAME(psset_sa_index)
void psSet_sa_index(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of species index in original lists, sa_index(j)=-1 indicates that element (j) of the "SA" list is, derived from a composite of ions in the "S" list (using Zeff, and quasineutrality equations)., otherwise sa_index(j) gives the index of the species in "S", For example, if index 2 corresponds to Deuterium ions in "SA", then, sa_index(2) gives the index in "S" for Deuterium ions., For non-impurities usually sa_index(j)=j but this could be altered, if He3+1 or He4+1 (less than fully stripped He ions) are present in, the model.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sa_index F77NAME(psgetrnk_sa_index)
void psGetRnk_sa_index(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of species index in original lists, sa_index(j)=-1 indicates that element (j) of the "SA" list is, derived from a composite of ions in the "S" list (using Zeff, and quasineutrality equations)., otherwise sa_index(j) gives the index of the species in "S", For example, if index 2 corresponds to Deuterium ions in "SA", then, sa_index(2) gives the index in "S" for Deuterium ions., For non-impurities usually sa_index(j)=j but this could be altered, if He3+1 or He4+1 (less than fully stripped He ions) are present in, the model.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sa_index F77NAME(psgetdim_sa_index)
void psGetDim_sa_index(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species list dimension of ALLA (specie)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_alla F77NAME(psget_nspec_alla)
void psGet_nspec_alla(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of ALLA (specie)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_alla F77NAME(psset_nspec_alla)
void psSet_nspec_alla(int* iobj, const int* data, int* ierr);

/**
 * Get ALLA specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_alla_type F77NAME(psget_alla_type)
void psGet_alla_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set ALLA specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_alla_type F77NAME(psset_alla_type)
void psSet_alla_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of ALLA specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_alla_type F77NAME(psgetrnk_alla_type)
void psGetRnk_alla_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ALLA specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_alla_type F77NAME(psgetdim_alla_type)
void psGetDim_alla_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ALLA specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_alla F77NAME(psget_q_alla)
void psGet_q_alla(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ALLA specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_alla F77NAME(psset_q_alla)
void psSet_q_alla(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ALLA specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_alla F77NAME(psgetrnk_q_alla)
void psGetRnk_q_alla(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ALLA specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_alla F77NAME(psgetdim_q_alla)
void psGetDim_q_alla(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ALLA atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_alla F77NAME(psget_qatom_alla)
void psGet_qatom_alla(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ALLA atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_alla F77NAME(psset_qatom_alla)
void psSet_qatom_alla(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ALLA atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_alla F77NAME(psgetrnk_qatom_alla)
void psGetRnk_qatom_alla(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ALLA atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_alla F77NAME(psgetdim_qatom_alla)
void psGetDim_qatom_alla(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ALLA specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_alla F77NAME(psget_m_alla)
void psGet_m_alla(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ALLA specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_alla F77NAME(psset_m_alla)
void psSet_m_alla(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ALLA specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_alla F77NAME(psgetrnk_m_alla)
void psGetRnk_m_alla(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ALLA specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_alla F77NAME(psgetdim_m_alla)
void psGetDim_m_alla(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get all species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_alla_name F77NAME(psget_alla_name)
void psGet_alla_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set all species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_alla_name F77NAME(psset_alla_name)
void psSet_alla_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of all species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_alla_name F77NAME(psgetsz_alla_name)
void psGetSz_alla_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of all species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_alla_name F77NAME(psgetrnk_alla_name)
void psGetRnk_alla_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of all species abridged, (index 0 for electrons)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_alla_name F77NAME(psgetdim_alla_name)
void psGetDim_alla_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species index in original lists, alla_index(j)=-1 indicates that element (j) of the "alla" list is, derived from a composite of ions in the "s" list (using Zeff, and quasineutrality equations)., otherwise for thermal ions alla_index(j) gives the index of the, species in "S".  For example, if index 2 corresponds to Deuterium, thermal ions in "alla", then alla_index(2) gives the index in "S", for Deuterium thermal ions.  For non-thermal ions, ion species j, corresponds to species index:, alla_index(j) in "SNBI" if all_type(j) = ps_beam_ion, alla_index(j) in "RFMIN" if all_type(j) = ps_rf_minority, alla_index(j) in "SFUS" if all_type(j) = ps_fusion_ion
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_alla_index F77NAME(psget_alla_index)
void psGet_alla_index(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set species index in original lists, alla_index(j)=-1 indicates that element (j) of the "alla" list is, derived from a composite of ions in the "s" list (using Zeff, and quasineutrality equations)., otherwise for thermal ions alla_index(j) gives the index of the, species in "S".  For example, if index 2 corresponds to Deuterium, thermal ions in "alla", then alla_index(2) gives the index in "S", for Deuterium thermal ions.  For non-thermal ions, ion species j, corresponds to species index:, alla_index(j) in "SNBI" if all_type(j) = ps_beam_ion, alla_index(j) in "RFMIN" if all_type(j) = ps_rf_minority, alla_index(j) in "SFUS" if all_type(j) = ps_fusion_ion
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_alla_index F77NAME(psset_alla_index)
void psSet_alla_index(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of species index in original lists, alla_index(j)=-1 indicates that element (j) of the "alla" list is, derived from a composite of ions in the "s" list (using Zeff, and quasineutrality equations)., otherwise for thermal ions alla_index(j) gives the index of the, species in "S".  For example, if index 2 corresponds to Deuterium, thermal ions in "alla", then alla_index(2) gives the index in "S", for Deuterium thermal ions.  For non-thermal ions, ion species j, corresponds to species index:, alla_index(j) in "SNBI" if all_type(j) = ps_beam_ion, alla_index(j) in "RFMIN" if all_type(j) = ps_rf_minority, alla_index(j) in "SFUS" if all_type(j) = ps_fusion_ion
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_alla_index F77NAME(psgetrnk_alla_index)
void psGetRnk_alla_index(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of species index in original lists, alla_index(j)=-1 indicates that element (j) of the "alla" list is, derived from a composite of ions in the "s" list (using Zeff, and quasineutrality equations)., otherwise for thermal ions alla_index(j) gives the index of the, species in "S".  For example, if index 2 corresponds to Deuterium, thermal ions in "alla", then alla_index(2) gives the index in "S", for Deuterium thermal ions.  For non-thermal ions, ion species j, corresponds to species index:, alla_index(j) in "SNBI" if all_type(j) = ps_beam_ion, alla_index(j) in "RFMIN" if all_type(j) = ps_rf_minority, alla_index(j) in "SFUS" if all_type(j) = ps_fusion_ion
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_alla_index F77NAME(psgetdim_alla_index)
void psGetDim_alla_index(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get address in sa species list, if species s(j) is in list SA, s_to_sa(j) gives its address in SA., if species s(j) is NOT in list SA, s_to_sa(j)=-1.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_s_to_sa F77NAME(psget_s_to_sa)
void psGet_s_to_sa(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set address in sa species list, if species s(j) is in list SA, s_to_sa(j) gives its address in SA., if species s(j) is NOT in list SA, s_to_sa(j)=-1.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_s_to_sa F77NAME(psset_s_to_sa)
void psSet_s_to_sa(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of address in sa species list, if species s(j) is in list SA, s_to_sa(j) gives its address in SA., if species s(j) is NOT in list SA, s_to_sa(j)=-1.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_s_to_sa F77NAME(psgetrnk_s_to_sa)
void psGetRnk_s_to_sa(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of address in sa species list, if species s(j) is in list SA, s_to_sa(j) gives its address in SA., if species s(j) is NOT in list SA, s_to_sa(j)=-1.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_s_to_sa F77NAME(psgetdim_s_to_sa)
void psGetDim_s_to_sa(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get map snbi index to "all" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_snbi_to_all F77NAME(psget_snbi_to_all)
void psGet_snbi_to_all(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set map snbi index to "all" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_snbi_to_all F77NAME(psset_snbi_to_all)
void psSet_snbi_to_all(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of map snbi index to "all" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_snbi_to_all F77NAME(psgetrnk_snbi_to_all)
void psGetRnk_snbi_to_all(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of map snbi index to "all" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_snbi_to_all F77NAME(psgetdim_snbi_to_all)
void psGetDim_snbi_to_all(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get map snbi index to "alla" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_snbi_to_alla F77NAME(psget_snbi_to_alla)
void psGet_snbi_to_alla(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set map snbi index to "alla" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_snbi_to_alla F77NAME(psset_snbi_to_alla)
void psSet_snbi_to_alla(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of map snbi index to "alla" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_snbi_to_alla F77NAME(psgetrnk_snbi_to_alla)
void psGetRnk_snbi_to_alla(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of map snbi index to "alla" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_snbi_to_alla F77NAME(psgetdim_snbi_to_alla)
void psGetDim_snbi_to_alla(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get map sfus index to "all" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sfus_to_all F77NAME(psget_sfus_to_all)
void psGet_sfus_to_all(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set map sfus index to "all" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sfus_to_all F77NAME(psset_sfus_to_all)
void psSet_sfus_to_all(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of map sfus index to "all" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sfus_to_all F77NAME(psgetrnk_sfus_to_all)
void psGetRnk_sfus_to_all(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of map sfus index to "all" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sfus_to_all F77NAME(psgetdim_sfus_to_all)
void psGetDim_sfus_to_all(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get map sfus index to "alla" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sfus_to_alla F77NAME(psget_sfus_to_alla)
void psGet_sfus_to_alla(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set map sfus index to "alla" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sfus_to_alla F77NAME(psset_sfus_to_alla)
void psSet_sfus_to_alla(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of map sfus index to "alla" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sfus_to_alla F77NAME(psgetrnk_sfus_to_alla)
void psGetRnk_sfus_to_alla(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of map sfus index to "alla" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sfus_to_alla F77NAME(psgetdim_sfus_to_alla)
void psGetDim_sfus_to_alla(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get map rfmin index to "all" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rfmin_to_all F77NAME(psget_rfmin_to_all)
void psGet_rfmin_to_all(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set map rfmin index to "all" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rfmin_to_all F77NAME(psset_rfmin_to_all)
void psSet_rfmin_to_all(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of map rfmin index to "all" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rfmin_to_all F77NAME(psgetrnk_rfmin_to_all)
void psGetRnk_rfmin_to_all(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of map rfmin index to "all" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rfmin_to_all F77NAME(psgetdim_rfmin_to_all)
void psGetDim_rfmin_to_all(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get map rfmin index to "alla" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rfmin_to_alla F77NAME(psget_rfmin_to_alla)
void psGet_rfmin_to_alla(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set map rfmin index to "alla" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rfmin_to_alla F77NAME(psset_rfmin_to_alla)
void psSet_rfmin_to_alla(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of map rfmin index to "alla" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rfmin_to_alla F77NAME(psgetrnk_rfmin_to_alla)
void psGetRnk_rfmin_to_alla(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of map rfmin index to "alla" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rfmin_to_alla F77NAME(psgetdim_rfmin_to_alla)
void psGetDim_rfmin_to_alla(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species list dimension of SIMPI (impurity_atoms)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_impi F77NAME(psget_nspec_impi)
void psGet_nspec_impi(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of SIMPI (impurity_atoms)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_impi F77NAME(psset_nspec_impi)
void psSet_nspec_impi(int* iobj, const int* data, int* ierr);

/**
 * Get SIMPI specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_simpi_type F77NAME(psget_simpi_type)
void psGet_simpi_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set SIMPI specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_simpi_type F77NAME(psset_simpi_type)
void psSet_simpi_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of SIMPI specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_simpi_type F77NAME(psgetrnk_simpi_type)
void psGetRnk_simpi_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIMPI specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_simpi_type F77NAME(psgetdim_simpi_type)
void psGetDim_simpi_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SIMPI specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_simpi F77NAME(psget_q_simpi)
void psGet_q_simpi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SIMPI specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_simpi F77NAME(psset_q_simpi)
void psSet_q_simpi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SIMPI specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_simpi F77NAME(psgetrnk_q_simpi)
void psGetRnk_q_simpi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIMPI specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_simpi F77NAME(psgetdim_q_simpi)
void psGetDim_q_simpi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SIMPI atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_simpi F77NAME(psget_qatom_simpi)
void psGet_qatom_simpi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SIMPI atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_simpi F77NAME(psset_qatom_simpi)
void psSet_qatom_simpi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SIMPI atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_simpi F77NAME(psgetrnk_qatom_simpi)
void psGetRnk_qatom_simpi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIMPI atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_simpi F77NAME(psgetdim_qatom_simpi)
void psGetDim_qatom_simpi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SIMPI specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_simpi F77NAME(psget_m_simpi)
void psGet_m_simpi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SIMPI specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_simpi F77NAME(psset_m_simpi)
void psSet_m_simpi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SIMPI specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_simpi F77NAME(psgetrnk_m_simpi)
void psGetRnk_m_simpi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIMPI specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_simpi F77NAME(psgetdim_m_simpi)
void psGetDim_m_simpi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get impurity ion species in simulation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_simpi_name F77NAME(psget_simpi_name)
void psGet_simpi_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set impurity ion species in simulation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_simpi_name F77NAME(psset_simpi_name)
void psSet_simpi_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of impurity ion species in simulation
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_simpi_name F77NAME(psgetsz_simpi_name)
void psGetSz_simpi_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of impurity ion species in simulation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_simpi_name F77NAME(psgetrnk_simpi_name)
void psGetRnk_simpi_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of impurity ion species in simulation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_simpi_name F77NAME(psgetdim_simpi_name)
void psGetDim_simpi_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get map simpi index to "s" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_simpi_to_s F77NAME(psget_simpi_to_s)
void psGet_simpi_to_s(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set map simpi index to "s" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_simpi_to_s F77NAME(psset_simpi_to_s)
void psSet_simpi_to_s(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of map simpi index to "s" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_simpi_to_s F77NAME(psgetrnk_simpi_to_s)
void psGetRnk_simpi_to_s(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of map simpi index to "s" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_simpi_to_s F77NAME(psgetdim_simpi_to_s)
void psGetDim_simpi_to_s(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species list dimension of SGAS (neutral_gas)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_gas F77NAME(psget_nspec_gas)
void psGet_nspec_gas(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of SGAS (neutral_gas)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_gas F77NAME(psset_nspec_gas)
void psSet_nspec_gas(int* iobj, const int* data, int* ierr);

/**
 * Get SGAS specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sgas_type F77NAME(psget_sgas_type)
void psGet_sgas_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set SGAS specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sgas_type F77NAME(psset_sgas_type)
void psSet_sgas_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of SGAS specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sgas_type F77NAME(psgetrnk_sgas_type)
void psGetRnk_sgas_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SGAS specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sgas_type F77NAME(psgetdim_sgas_type)
void psGetDim_sgas_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SGAS specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_sgas F77NAME(psget_q_sgas)
void psGet_q_sgas(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SGAS specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_sgas F77NAME(psset_q_sgas)
void psSet_q_sgas(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SGAS specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_sgas F77NAME(psgetrnk_q_sgas)
void psGetRnk_q_sgas(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SGAS specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_sgas F77NAME(psgetdim_q_sgas)
void psGetDim_q_sgas(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SGAS atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_sgas F77NAME(psget_qatom_sgas)
void psGet_qatom_sgas(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SGAS atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_sgas F77NAME(psset_qatom_sgas)
void psSet_qatom_sgas(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SGAS atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_sgas F77NAME(psgetrnk_qatom_sgas)
void psGetRnk_qatom_sgas(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SGAS atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_sgas F77NAME(psgetdim_qatom_sgas)
void psGetDim_qatom_sgas(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SGAS specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_sgas F77NAME(psget_m_sgas)
void psGet_m_sgas(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SGAS specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_sgas F77NAME(psset_m_sgas)
void psSet_m_sgas(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SGAS specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_sgas F77NAME(psgetrnk_m_sgas)
void psGetRnk_m_sgas(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SGAS specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_sgas F77NAME(psgetdim_m_sgas)
void psGetDim_m_sgas(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get atomic neutral species in plasma core
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sgas_name F77NAME(psget_sgas_name)
void psGet_sgas_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set atomic neutral species in plasma core
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sgas_name F77NAME(psset_sgas_name)
void psSet_sgas_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of atomic neutral species in plasma core
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_sgas_name F77NAME(psgetsz_sgas_name)
void psGetSz_sgas_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of atomic neutral species in plasma core
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sgas_name F77NAME(psgetrnk_sgas_name)
void psGetRnk_sgas_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of atomic neutral species in plasma core
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sgas_name F77NAME(psgetdim_sgas_name)
void psGetDim_sgas_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get map sgas index to "s" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sgas_to_s F77NAME(psget_sgas_to_s)
void psGet_sgas_to_s(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set map sgas index to "s" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sgas_to_s F77NAME(psset_sgas_to_s)
void psSet_sgas_to_s(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of map sgas index to "s" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sgas_to_s F77NAME(psgetrnk_sgas_to_s)
void psGetRnk_sgas_to_s(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of map sgas index to "s" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sgas_to_s F77NAME(psgetdim_sgas_to_s)
void psGetDim_sgas_to_s(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species list dimension of SIMP0 (impurity_atoms)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nspec_imp0 F77NAME(psget_nspec_imp0)
void psGet_nspec_imp0(int* iobj, int* data, int* ierr);

/**
 * Set species list dimension of SIMP0 (impurity_atoms)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nspec_imp0 F77NAME(psset_nspec_imp0)
void psSet_nspec_imp0(int* iobj, const int* data, int* ierr);

/**
 * Get SIMP0 specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_simp0_type F77NAME(psget_simp0_type)
void psGet_simp0_type(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set SIMP0 specie types
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_simp0_type F77NAME(psset_simp0_type)
void psSet_simp0_type(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of SIMP0 specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_simp0_type F77NAME(psgetrnk_simp0_type)
void psGetRnk_simp0_type(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIMP0 specie types
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_simp0_type F77NAME(psgetdim_simp0_type)
void psGetDim_simp0_type(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SIMP0 specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_simp0 F77NAME(psget_q_simp0)
void psGet_q_simp0(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SIMP0 specie charge
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_simp0 F77NAME(psset_q_simp0)
void psSet_q_simp0(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SIMP0 specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_simp0 F77NAME(psgetrnk_q_simp0)
void psGetRnk_q_simp0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIMP0 specie charge
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_simp0 F77NAME(psgetdim_q_simp0)
void psGetDim_q_simp0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SIMP0 atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qatom_simp0 F77NAME(psget_qatom_simp0)
void psGet_qatom_simp0(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SIMP0 atomic number
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qatom_simp0 F77NAME(psset_qatom_simp0)
void psSet_qatom_simp0(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SIMP0 atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qatom_simp0 F77NAME(psgetrnk_qatom_simp0)
void psGetRnk_qatom_simp0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIMP0 atomic number
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qatom_simp0 F77NAME(psgetdim_qatom_simp0)
void psGetDim_qatom_simp0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get SIMP0 specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_m_simp0 F77NAME(psget_m_simp0)
void psGet_m_simp0(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SIMP0 specie mass
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_m_simp0 F77NAME(psset_m_simp0)
void psSet_m_simp0(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SIMP0 specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_m_simp0 F77NAME(psgetrnk_m_simp0)
void psGetRnk_m_simp0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIMP0 specie mass
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_m_simp0 F77NAME(psgetdim_m_simp0)
void psGetDim_m_simp0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get atomic impurity species in simulation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_simp0_name F77NAME(psget_simp0_name)
void psGet_simp0_name(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set atomic impurity species in simulation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_simp0_name F77NAME(psset_simp0_name)
void psSet_simp0_name(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of atomic impurity species in simulation
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_simp0_name F77NAME(psgetsz_simp0_name)
void psGetSz_simp0_name(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of atomic impurity species in simulation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_simp0_name F77NAME(psgetrnk_simp0_name)
void psGetRnk_simp0_name(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of atomic impurity species in simulation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_simp0_name F77NAME(psgetdim_simp0_name)
void psGetDim_simp0_name(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get map simp0 index to "s" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_simp0_to_s F77NAME(psget_simp0_to_s)
void psGet_simp0_to_s(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set map simp0 index to "s" list
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_simp0_to_s F77NAME(psset_simp0_to_s)
void psSet_simp0_to_s(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of map simp0 index to "s" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_simp0_to_s F77NAME(psgetrnk_simp0_to_s)
void psGetRnk_simp0_to_s(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of map simp0 index to "s" list
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_simp0_to_s F77NAME(psgetdim_simp0_to_s)
void psGetDim_simp0_to_s(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get index map from neutral source to neutral species, (computed from GAS_ATOM(ngsc0))., this indicates the species injected by the source, although charge exchange induces a source/sink, profile of additional species proportional to, each source.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sc0_to_sgas F77NAME(psget_sc0_to_sgas)
void psGet_sc0_to_sgas(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set index map from neutral source to neutral species, (computed from GAS_ATOM(ngsc0))., this indicates the species injected by the source, although charge exchange induces a source/sink, profile of additional species proportional to, each source.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sc0_to_sgas F77NAME(psset_sc0_to_sgas)
void psSet_sc0_to_sgas(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of index map from neutral source to neutral species, (computed from GAS_ATOM(ngsc0))., this indicates the species injected by the source, although charge exchange induces a source/sink, profile of additional species proportional to, each source.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sc0_to_sgas F77NAME(psgetrnk_sc0_to_sgas)
void psGetRnk_sc0_to_sgas(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of index map from neutral source to neutral species, (computed from GAS_ATOM(ngsc0))., this indicates the species injected by the source, although charge exchange induces a source/sink, profile of additional species proportional to, each source.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sc0_to_sgas F77NAME(psgetdim_sc0_to_sgas)
void psGetDim_sc0_to_sgas(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho F77NAME(psget_nrho)
void psGet_nrho(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho F77NAME(psset_nrho)
void psSet_nrho(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (PLASMA)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho F77NAME(psget_rho)
void psGet_rho(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (PLASMA)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho F77NAME(psset_rho)
void psSet_rho(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (PLASMA)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho F77NAME(psgetrnk_rho)
void psGetRnk_rho(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (PLASMA)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho F77NAME(psgetdim_rho)
void psGetDim_rho(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of trcat (TR_categories)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ntrcat F77NAME(psget_ntrcat)
void psGet_ntrcat(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of trcat (TR_categories)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ntrcat F77NAME(psset_ntrcat)
void psSet_ntrcat(int* iobj, const int* data, int* ierr);

/**
 * Get Application defined list of, transport categories (possible examples: NC for neoclassical,, TURB for turbulent, SAW for sawtooth induced, ...); used to, dimension profile data provided to quantify transport rates, according to underlying physics
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_trcat F77NAME(psget_trcat)
void psGet_trcat(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set Application defined list of, transport categories (possible examples: NC for neoclassical,, TURB for turbulent, SAW for sawtooth induced, ...); used to, dimension profile data provided to quantify transport rates, according to underlying physics
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_trcat F77NAME(psset_trcat)
void psSet_trcat(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Application defined list of, transport categories (possible examples: NC for neoclassical,, TURB for turbulent, SAW for sawtooth induced, ...); used to, dimension profile data provided to quantify transport rates, according to underlying physics
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_trcat F77NAME(psgetsz_trcat)
void psGetSz_trcat(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of Application defined list of, transport categories (possible examples: NC for neoclassical,, TURB for turbulent, SAW for sawtooth induced, ...); used to, dimension profile data provided to quantify transport rates, according to underlying physics
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_trcat F77NAME(psgetrnk_trcat)
void psGetRnk_trcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Application defined list of, transport categories (possible examples: NC for neoclassical,, TURB for turbulent, SAW for sawtooth induced, ...); used to, dimension profile data provided to quantify transport rates, according to underlying physics
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_trcat F77NAME(psgetdim_trcat)
void psGetDim_trcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get short description or ID of transport models
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_trmodels F77NAME(psget_trmodels)
void psGet_trmodels(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set short description or ID of transport models
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_trmodels F77NAME(psset_trmodels)
void psSet_trmodels(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of short description or ID of transport models
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_trmodels F77NAME(psgetsz_trmodels)
void psGetSz_trmodels(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of short description or ID of transport models
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_trmodels F77NAME(psgetrnk_trmodels)
void psGetRnk_trmodels(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of short description or ID of transport models
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_trmodels F77NAME(psgetdim_trmodels)
void psGetDim_trmodels(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_eq (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_eq F77NAME(psget_nrho_eq)
void psGet_nrho_eq(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_eq (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_eq F77NAME(psset_nrho_eq)
void psSet_nrho_eq(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (EQ)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_eq F77NAME(psget_rho_eq)
void psGet_rho_eq(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (EQ)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_eq F77NAME(psset_rho_eq)
void psSet_rho_eq(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (EQ)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_eq F77NAME(psgetrnk_rho_eq)
void psGetRnk_rho_eq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (EQ)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_eq F77NAME(psgetdim_rho_eq)
void psGetDim_rho_eq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of th_eq (TH coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nth_eq F77NAME(psget_nth_eq)
void psGet_nth_eq(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of th_eq (TH coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nth_eq F77NAME(psset_nth_eq)
void psSet_nth_eq(int* iobj, const int* data, int* ierr);

/**
 * Get theta grid (EQ)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_th_eq F77NAME(psget_th_eq)
void psGet_th_eq(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set theta grid (EQ)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_th_eq F77NAME(psset_th_eq)
void psSet_th_eq(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of theta grid (EQ)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_th_eq F77NAME(psgetrnk_th_eq)
void psGetRnk_th_eq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of theta grid (EQ)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_th_eq F77NAME(psgetdim_th_eq)
void psGetDim_th_eq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of R_grid (R coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nr F77NAME(psget_nr)
void psGet_nr(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of R_grid (R coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nr F77NAME(psset_nr)
void psSet_nr(int* iobj, const int* data, int* ierr);

/**
 * Get R grid
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_grid F77NAME(psget_r_grid)
void psGet_r_grid(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set R grid
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_grid F77NAME(psset_r_grid)
void psSet_r_grid(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of R grid
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_grid F77NAME(psgetrnk_r_grid)
void psGetRnk_r_grid(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R grid
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_grid F77NAME(psgetdim_r_grid)
void psGetDim_r_grid(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of Z_grid (Z coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nz F77NAME(psget_nz)
void psGet_nz(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of Z_grid (Z coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nz F77NAME(psset_nz)
void psSet_nz(int* iobj, const int* data, int* ierr);

/**
 * Get Z grid
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_grid F77NAME(psget_z_grid)
void psGet_z_grid(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Z grid
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_grid F77NAME(psset_z_grid)
void psSet_z_grid(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Z grid
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_grid F77NAME(psgetrnk_z_grid)
void psGetRnk_z_grid(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Z grid
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_grid F77NAME(psgetdim_z_grid)
void psGetDim_z_grid(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_eq_geo (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_eq_geo F77NAME(psget_nrho_eq_geo)
void psGet_nrho_eq_geo(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_eq_geo (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_eq_geo F77NAME(psset_nrho_eq_geo)
void psSet_nrho_eq_geo(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (EQ flux surface averages), this grid is built from rho_eq: nrho_eq_geo = 2*nrho_eq - 1, rho_eq_geo(1:nrho_eq_geo:2) = rho_eq(1:nrho_eq), rho_eq_geo(2:nrho_eq_geo:2) =, (rho_eq(1:nrho_eq-1)+rho_eq(2:nrho_eq))/2, i.e. a doubly fine grid for metric flux surface averages stored, as piecewise linear radidal profiles.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_eq_geo F77NAME(psget_rho_eq_geo)
void psGet_rho_eq_geo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (EQ flux surface averages), this grid is built from rho_eq: nrho_eq_geo = 2*nrho_eq - 1, rho_eq_geo(1:nrho_eq_geo:2) = rho_eq(1:nrho_eq), rho_eq_geo(2:nrho_eq_geo:2) =, (rho_eq(1:nrho_eq-1)+rho_eq(2:nrho_eq))/2, i.e. a doubly fine grid for metric flux surface averages stored, as piecewise linear radidal profiles.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_eq_geo F77NAME(psset_rho_eq_geo)
void psSet_rho_eq_geo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (EQ flux surface averages), this grid is built from rho_eq: nrho_eq_geo = 2*nrho_eq - 1, rho_eq_geo(1:nrho_eq_geo:2) = rho_eq(1:nrho_eq), rho_eq_geo(2:nrho_eq_geo:2) =, (rho_eq(1:nrho_eq-1)+rho_eq(2:nrho_eq))/2, i.e. a doubly fine grid for metric flux surface averages stored, as piecewise linear radidal profiles.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_eq_geo F77NAME(psgetrnk_rho_eq_geo)
void psGetRnk_rho_eq_geo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (EQ flux surface averages), this grid is built from rho_eq: nrho_eq_geo = 2*nrho_eq - 1, rho_eq_geo(1:nrho_eq_geo:2) = rho_eq(1:nrho_eq), rho_eq_geo(2:nrho_eq_geo:2) =, (rho_eq(1:nrho_eq-1)+rho_eq(2:nrho_eq))/2, i.e. a doubly fine grid for metric flux surface averages stored, as piecewise linear radidal profiles.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_eq_geo F77NAME(psgetdim_rho_eq_geo)
void psGetDim_rho_eq_geo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of psmom_num (PS_moments)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_npsmom F77NAME(psget_npsmom)
void psGet_npsmom(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of psmom_num (PS_moments)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_npsmom F77NAME(psset_npsmom)
void psSet_npsmom(int* iobj, const int* data, int* ierr);

/**
 * Get Pfirsch-Schlutter moments, if call to compute PS moments occurs and this has not been', "initialized, npsmom=16 will be set, and psmom_num(1)='1',", "psmom_num(2)='2', ..., psmom_num(16)='16'"]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_psmom_num F77NAME(psget_psmom_num)
void psGet_psmom_num(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set Pfirsch-Schlutter moments, if call to compute PS moments occurs and this has not been', "initialized, npsmom=16 will be set, and psmom_num(1)='1',", "psmom_num(2)='2', ..., psmom_num(16)='16'"]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_psmom_num F77NAME(psset_psmom_num)
void psSet_psmom_num(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Pfirsch-Schlutter moments, if call to compute PS moments occurs and this has not been', "initialized, npsmom=16 will be set, and psmom_num(1)='1',", "psmom_num(2)='2', ..., psmom_num(16)='16'"]
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_psmom_num F77NAME(psgetsz_psmom_num)
void psGetSz_psmom_num(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of Pfirsch-Schlutter moments, if call to compute PS moments occurs and this has not been', "initialized, npsmom=16 will be set, and psmom_num(1)='1',", "psmom_num(2)='2', ..., psmom_num(16)='16'"]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_psmom_num F77NAME(psgetrnk_psmom_num)
void psGetRnk_psmom_num(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Pfirsch-Schlutter moments, if call to compute PS moments occurs and this has not been', "initialized, npsmom=16 will be set, and psmom_num(1)='1',", "psmom_num(2)='2', ..., psmom_num(16)='16'"]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_psmom_num F77NAME(psgetdim_psmom_num)
void psGetDim_psmom_num(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get number of Fourier (R,Z) moments, requested for Fourier Spline representation, R(x,th) = R0(x) + sum x*(xRj(x)*cos(j*th) + xRj~(x)*sin(j*th)), Z(x,th) = Z0(x) + sum x*(xZj~(x)*cos(j*th) + xZj(x)*sin(j*th))
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nmom F77NAME(psget_nmom)
void psGet_nmom(int* iobj, int* data, int* ierr);

/**
 * Set number of Fourier (R,Z) moments, requested for Fourier Spline representation, R(x,th) = R0(x) + sum x*(xRj(x)*cos(j*th) + xRj~(x)*sin(j*th)), Z(x,th) = Z0(x) + sum x*(xZj~(x)*cos(j*th) + xZj(x)*sin(j*th))
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nmom F77NAME(psset_nmom)
void psSet_nmom(int* iobj, const int* data, int* ierr);

/**
 * Get item list dimension of eqmom_num (EQ_moments)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_neqmom F77NAME(psget_neqmom)
void psGet_neqmom(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of eqmom_num (EQ_moments)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_neqmom F77NAME(psset_neqmom)
void psSet_neqmom(int* iobj, const int* data, int* ierr);

/**
 * Get Equilibrium moments', "neqmom = nmom; eqmom_num(1)='1', eqmom_num(2)='2', etc..."]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eqmom_num F77NAME(psget_eqmom_num)
void psGet_eqmom_num(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set Equilibrium moments', "neqmom = nmom; eqmom_num(1)='1', eqmom_num(2)='2', etc..."]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eqmom_num F77NAME(psset_eqmom_num)
void psSet_eqmom_num(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Equilibrium moments', "neqmom = nmom; eqmom_num(1)='1', eqmom_num(2)='2', etc..."]
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_eqmom_num F77NAME(psgetsz_eqmom_num)
void psGetSz_eqmom_num(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of Equilibrium moments', "neqmom = nmom; eqmom_num(1)='1', eqmom_num(2)='2', etc..."]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_eqmom_num F77NAME(psgetrnk_eqmom_num)
void psGetRnk_eqmom_num(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Equilibrium moments', "neqmom = nmom; eqmom_num(1)='1', eqmom_num(2)='2', etc..."]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_eqmom_num F77NAME(psgetdim_eqmom_num)
void psGetDim_eqmom_num(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_nbi (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_nbi F77NAME(psget_nrho_nbi)
void psGet_nrho_nbi(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_nbi (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_nbi F77NAME(psset_nrho_nbi)
void psSet_nrho_nbi(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid -- NBI
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_nbi F77NAME(psget_rho_nbi)
void psGet_rho_nbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid -- NBI
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_nbi F77NAME(psset_rho_nbi)
void psSet_rho_nbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid -- NBI
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_nbi F77NAME(psgetrnk_rho_nbi)
void psGetRnk_rho_nbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid -- NBI
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_nbi F77NAME(psgetdim_rho_nbi)
void psGetDim_rho_nbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_fus (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_fus F77NAME(psget_nrho_fus)
void psGet_nrho_fus(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_fus (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_fus F77NAME(psset_nrho_fus)
void psSet_nrho_fus(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid -- Fusion products model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_fus F77NAME(psget_rho_fus)
void psGet_rho_fus(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid -- Fusion products model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_fus F77NAME(psset_rho_fus)
void psSet_rho_fus(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid -- Fusion products model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_fus F77NAME(psgetrnk_rho_fus)
void psGetRnk_rho_fus(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid -- Fusion products model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_fus F77NAME(psgetdim_rho_fus)
void psGetDim_rho_fus(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_icrf (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_icrf F77NAME(psget_nrho_icrf)
void psGet_nrho_icrf(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_icrf (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_icrf F77NAME(psset_nrho_icrf)
void psSet_nrho_icrf(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (RF)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_icrf F77NAME(psget_rho_icrf)
void psGet_rho_icrf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (RF)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_icrf F77NAME(psset_rho_icrf)
void psSet_rho_icrf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (RF)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_icrf F77NAME(psgetrnk_rho_icrf)
void psGetRnk_rho_icrf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (RF)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_icrf F77NAME(psgetdim_rho_icrf)
void psGetDim_rho_icrf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get minority density fraction if kdens_rfmin="fraction", if so, it must have non-zero positive value for each minority ion specie., sum(fracmin) << 1 is expected.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fracmin F77NAME(psget_fracmin)
void psGet_fracmin(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set minority density fraction if kdens_rfmin="fraction", if so, it must have non-zero positive value for each minority ion specie., sum(fracmin) << 1 is expected.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fracmin F77NAME(psset_fracmin)
void psSet_fracmin(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of minority density fraction if kdens_rfmin="fraction", if so, it must have non-zero positive value for each minority ion specie., sum(fracmin) << 1 is expected.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_fracmin F77NAME(psgetrnk_fracmin)
void psGetRnk_fracmin(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of minority density fraction if kdens_rfmin="fraction", if so, it must have non-zero positive value for each minority ion specie., sum(fracmin) << 1 is expected.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_fracmin F77NAME(psgetdim_fracmin)
void psGetDim_fracmin(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get = "fraction" => nmini(i) = fracmin(i)*ne, = any other value (e.g. "data" or "model") then, the minority density is set by some other, means (e.g. read in from another data source).
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_kdens_rfmin F77NAME(psget_kdens_rfmin)
void psGet_kdens_rfmin(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set = "fraction" => nmini(i) = fracmin(i)*ne, = any other value (e.g. "data" or "model") then, the minority density is set by some other, means (e.g. read in from another data source).
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_kdens_rfmin F77NAME(psset_kdens_rfmin)
void psSet_kdens_rfmin(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of = "fraction" => nmini(i) = fracmin(i)*ne, = any other value (e.g. "data" or "model") then, the minority density is set by some other, means (e.g. read in from another data source).
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_kdens_rfmin F77NAME(psgetsz_kdens_rfmin)
void psGetSz_kdens_rfmin(int* iobj, int* size, int* ierr); 

/**
 * Get grid dimension of rho_ecrf (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_ecrf F77NAME(psget_nrho_ecrf)
void psGet_nrho_ecrf(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_ecrf (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_ecrf F77NAME(psset_nrho_ecrf)
void psSet_nrho_ecrf(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid -- ECRF
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_ecrf F77NAME(psget_rho_ecrf)
void psGet_rho_ecrf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid -- ECRF
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_ecrf F77NAME(psset_rho_ecrf)
void psSet_rho_ecrf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid -- ECRF
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_ecrf F77NAME(psgetrnk_rho_ecrf)
void psGetRnk_rho_ecrf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid -- ECRF
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_ecrf F77NAME(psgetdim_rho_ecrf)
void psGetDim_rho_ecrf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_lhrf (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_lhrf F77NAME(psget_nrho_lhrf)
void psGet_nrho_lhrf(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_lhrf (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_lhrf F77NAME(psset_nrho_lhrf)
void psSet_nrho_lhrf(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid -- LHRF
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_lhrf F77NAME(psget_rho_lhrf)
void psGet_rho_lhrf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid -- LHRF
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_lhrf F77NAME(psset_rho_lhrf)
void psSet_rho_lhrf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid -- LHRF
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_lhrf F77NAME(psgetrnk_rho_lhrf)
void psGetRnk_rho_lhrf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid -- LHRF
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_lhrf F77NAME(psgetdim_rho_lhrf)
void psGetDim_rho_lhrf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_pel (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_pel F77NAME(psget_nrho_pel)
void psGet_nrho_pel(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_pel (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_pel F77NAME(psset_nrho_pel)
void psSet_nrho_pel(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid -- PEL
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_pel F77NAME(psget_rho_pel)
void psGet_rho_pel(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid -- PEL
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_pel F77NAME(psset_rho_pel)
void psSet_rho_pel(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid -- PEL
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_pel F77NAME(psgetrnk_rho_pel)
void psGetRnk_rho_pel(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid -- PEL
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_pel F77NAME(psgetdim_rho_pel)
void psGetDim_rho_pel(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_rw (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_rw F77NAME(psget_nrho_rw)
void psGet_nrho_rw(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_rw (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_rw F77NAME(psset_nrho_rw)
void psSet_nrho_rw(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid -- RUNAWAY electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_rw F77NAME(psget_rho_rw)
void psGet_rho_rw(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid -- RUNAWAY electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_rw F77NAME(psset_rho_rw)
void psSet_rho_rw(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid -- RUNAWAY electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_rw F77NAME(psgetrnk_rho_rw)
void psGetRnk_rho_rw(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid -- RUNAWAY electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_rw F77NAME(psgetdim_rho_rw)
void psGetDim_rho_rw(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_rad (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_rad F77NAME(psget_nrho_rad)
void psGet_nrho_rad(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_rad (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_rad F77NAME(psset_nrho_rad)
void psSet_nrho_rad(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (RAD)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_rad F77NAME(psget_rho_rad)
void psGet_rho_rad(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (RAD)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_rad F77NAME(psset_rho_rad)
void psSet_rho_rad(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (RAD)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_rad F77NAME(psgetrnk_rho_rad)
void psGetRnk_rho_rad(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (RAD)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_rad F77NAME(psgetdim_rho_rad)
void psGetDim_rho_rad(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_mist (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_mist F77NAME(psget_nrho_mist)
void psGet_nrho_mist(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_mist (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_mist F77NAME(psset_nrho_mist)
void psSet_nrho_mist(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (PLASMA) impurity-driven sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_mist F77NAME(psget_rho_mist)
void psGet_rho_mist(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (PLASMA) impurity-driven sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_mist F77NAME(psset_rho_mist)
void psSet_rho_mist(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (PLASMA) impurity-driven sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_mist F77NAME(psgetrnk_rho_mist)
void psGetRnk_rho_mist(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (PLASMA) impurity-driven sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_mist F77NAME(psgetdim_rho_mist)
void psGetDim_rho_mist(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_gas (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_gas F77NAME(psget_nrho_gas)
void psGet_nrho_gas(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_gas (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_gas F77NAME(psset_nrho_gas)
void psSet_nrho_gas(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (GAS -- neutral gas model)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_gas F77NAME(psget_rho_gas)
void psGet_rho_gas(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (GAS -- neutral gas model)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_gas F77NAME(psset_rho_gas)
void psSet_rho_gas(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (GAS -- neutral gas model)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_gas F77NAME(psgetrnk_rho_gas)
void psGetRnk_rho_gas(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (GAS -- neutral gas model)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_gas F77NAME(psgetdim_rho_gas)
void psGetDim_rho_gas(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_lmhd (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_lmhd F77NAME(psget_nrho_lmhd)
void psGet_nrho_lmhd(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_lmhd (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_lmhd F77NAME(psset_nrho_lmhd)
void psSet_nrho_lmhd(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (LMHD component)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_lmhd F77NAME(psget_rho_lmhd)
void psGet_rho_lmhd(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (LMHD component)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_lmhd F77NAME(psset_rho_lmhd)
void psSet_rho_lmhd(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (LMHD component)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_lmhd F77NAME(psgetrnk_rho_lmhd)
void psGetRnk_rho_lmhd(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (LMHD component)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_lmhd F77NAME(psgetdim_rho_lmhd)
void psGetDim_rho_lmhd(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of Tor_mode_label (toroidal_modes)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_mmodes F77NAME(psget_mmodes)
void psGet_mmodes(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of Tor_mode_label (toroidal_modes)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_mmodes F77NAME(psset_mmodes)
void psSet_mmodes(int* iobj, const int* data, int* ierr);

/**
 * Get Toroidal modes to monitor
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tor_mode_label F77NAME(psget_tor_mode_label)
void psGet_tor_mode_label(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set Toroidal modes to monitor
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tor_mode_label F77NAME(psset_tor_mode_label)
void psSet_tor_mode_label(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of Toroidal modes to monitor
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_tor_mode_label F77NAME(psgetsz_tor_mode_label)
void psGetSz_tor_mode_label(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of Toroidal modes to monitor
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tor_mode_label F77NAME(psgetrnk_tor_mode_label)
void psGetRnk_tor_mode_label(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Toroidal modes to monitor
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tor_mode_label F77NAME(psgetdim_tor_mode_label)
void psGetDim_tor_mode_label(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get (from input) Toroidal modes monitored, set at initialization, would not vary in time, likely just: 1,2,3,...,mmodes
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tor_mode_no F77NAME(psget_tor_mode_no)
void psGet_tor_mode_no(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set (from input) Toroidal modes monitored, set at initialization, would not vary in time, likely just: 1,2,3,...,mmodes
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tor_mode_no F77NAME(psset_tor_mode_no)
void psSet_tor_mode_no(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of (from input) Toroidal modes monitored, set at initialization, would not vary in time, likely just: 1,2,3,...,mmodes
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tor_mode_no F77NAME(psgetrnk_tor_mode_no)
void psGetRnk_tor_mode_no(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of (from input) Toroidal modes monitored, set at initialization, would not vary in time, likely just: 1,2,3,...,mmodes
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tor_mode_no F77NAME(psgetdim_tor_mode_no)
void psGetDim_tor_mode_no(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of Newcomb_code (Newcomb_codes)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nnewcomb F77NAME(psget_nnewcomb)
void psGet_nnewcomb(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of Newcomb_code (Newcomb_codes)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nnewcomb F77NAME(psset_nnewcomb)
void psSet_nnewcomb(int* iobj, const int* data, int* ierr);

/**
 * Get name(s) of Newcomb code(s) used
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_newcomb_code F77NAME(psget_newcomb_code)
void psGet_newcomb_code(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set name(s) of Newcomb code(s) used
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_newcomb_code F77NAME(psset_newcomb_code)
void psSet_newcomb_code(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of name(s) of Newcomb code(s) used
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_newcomb_code F77NAME(psgetsz_newcomb_code)
void psGetSz_newcomb_code(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of name(s) of Newcomb code(s) used
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_newcomb_code F77NAME(psgetrnk_newcomb_code)
void psGetRnk_newcomb_code(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of name(s) of Newcomb code(s) used
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_newcomb_code F77NAME(psgetdim_newcomb_code)
void psGetDim_newcomb_code(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of DeltaW_code (Delta_W_codes)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ndelta_w F77NAME(psget_ndelta_w)
void psGet_ndelta_w(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of DeltaW_code (Delta_W_codes)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ndelta_w F77NAME(psset_ndelta_w)
void psSet_ndelta_w(int* iobj, const int* data, int* ierr);

/**
 * Get name(s) of delta(W) code(s) used
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_deltaw_code F77NAME(psget_deltaw_code)
void psGet_deltaw_code(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set name(s) of delta(W) code(s) used
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_deltaw_code F77NAME(psset_deltaw_code)
void psSet_deltaw_code(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of name(s) of delta(W) code(s) used
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_deltaw_code F77NAME(psgetsz_deltaw_code)
void psGetSz_deltaw_code(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of name(s) of delta(W) code(s) used
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_deltaw_code F77NAME(psgetrnk_deltaw_code)
void psGetRnk_deltaw_code(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of name(s) of delta(W) code(s) used
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_deltaw_code F77NAME(psgetdim_deltaw_code)
void psGetDim_deltaw_code(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get item list dimension of Balloon_code (Balloon_codes)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nballoon F77NAME(psget_nballoon)
void psGet_nballoon(int* iobj, int* data, int* ierr);

/**
 * Set item list dimension of Balloon_code (Balloon_codes)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nballoon F77NAME(psset_nballoon)
void psSet_nballoon(int* iobj, const int* data, int* ierr);

/**
 * Get name(s) of Ballooning code(s) used
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_balloon_code F77NAME(psget_balloon_code)
void psGet_balloon_code(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set name(s) of Ballooning code(s) used
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_balloon_code F77NAME(psset_balloon_code)
void psSet_balloon_code(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of name(s) of Ballooning code(s) used
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_balloon_code F77NAME(psgetsz_balloon_code)
void psGetSz_balloon_code(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of name(s) of Ballooning code(s) used
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_balloon_code F77NAME(psgetrnk_balloon_code)
void psGetRnk_balloon_code(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of name(s) of Ballooning code(s) used
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_balloon_code F77NAME(psgetdim_balloon_code)
void psGetDim_balloon_code(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get mapper code used for each Newcomb code
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_newcomb_mapper F77NAME(psget_newcomb_mapper)
void psGet_newcomb_mapper(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set mapper code used for each Newcomb code
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_newcomb_mapper F77NAME(psset_newcomb_mapper)
void psSet_newcomb_mapper(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of mapper code used for each Newcomb code
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_newcomb_mapper F77NAME(psgetsz_newcomb_mapper)
void psGetSz_newcomb_mapper(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of mapper code used for each Newcomb code
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_newcomb_mapper F77NAME(psgetrnk_newcomb_mapper)
void psGetRnk_newcomb_mapper(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of mapper code used for each Newcomb code
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_newcomb_mapper F77NAME(psgetdim_newcomb_mapper)
void psGetDim_newcomb_mapper(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get mapper code used for each delta(W) code
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_deltaw_mapper F77NAME(psget_deltaw_mapper)
void psGet_deltaw_mapper(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set mapper code used for each delta(W) code
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_deltaw_mapper F77NAME(psset_deltaw_mapper)
void psSet_deltaw_mapper(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of mapper code used for each delta(W) code
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_deltaw_mapper F77NAME(psgetsz_deltaw_mapper)
void psGetSz_deltaw_mapper(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of mapper code used for each delta(W) code
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_deltaw_mapper F77NAME(psgetrnk_deltaw_mapper)
void psGetRnk_deltaw_mapper(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of mapper code used for each delta(W) code
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_deltaw_mapper F77NAME(psgetdim_deltaw_mapper)
void psGetDim_deltaw_mapper(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get mapper code used for each ballooning code
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_balloon_mapper F77NAME(psget_balloon_mapper)
void psGet_balloon_mapper(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set mapper code used for each ballooning code
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_balloon_mapper F77NAME(psset_balloon_mapper)
void psSet_balloon_mapper(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of mapper code used for each ballooning code
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_balloon_mapper F77NAME(psgetsz_balloon_mapper)
void psGetSz_balloon_mapper(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of mapper code used for each ballooning code
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_balloon_mapper F77NAME(psgetrnk_balloon_mapper)
void psGetRnk_balloon_mapper(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of mapper code used for each ballooning code
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_balloon_mapper F77NAME(psgetdim_balloon_mapper)
void psGetDim_balloon_mapper(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get name of MHD equilibrium refinement code used
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lmhd_eq_code F77NAME(psget_lmhd_eq_code)
void psGet_lmhd_eq_code(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set name of MHD equilibrium refinement code used
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lmhd_eq_code F77NAME(psset_lmhd_eq_code)
void psSet_lmhd_eq_code(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of name of MHD equilibrium refinement code used
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_lmhd_eq_code F77NAME(psgetsz_lmhd_eq_code)
void psGetSz_lmhd_eq_code(int* iobj, int* size, int* ierr); 

/**
 * Get grid dimension of R_ripple (R coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nr_rip F77NAME(psget_nr_rip)
void psGet_nr_rip(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of R_ripple (R coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nr_rip F77NAME(psset_nr_rip)
void psSet_nr_rip(int* iobj, const int* data, int* ierr);

/**
 * Get R grid for TF ripple field(s)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_ripple F77NAME(psget_r_ripple)
void psGet_r_ripple(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set R grid for TF ripple field(s)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_ripple F77NAME(psset_r_ripple)
void psSet_r_ripple(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of R grid for TF ripple field(s)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_ripple F77NAME(psgetrnk_r_ripple)
void psGetRnk_r_ripple(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R grid for TF ripple field(s)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_ripple F77NAME(psgetdim_r_ripple)
void psGetDim_r_ripple(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of Z_ripple (Z coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nz_rip F77NAME(psget_nz_rip)
void psGet_nz_rip(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of Z_ripple (Z coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nz_rip F77NAME(psset_nz_rip)
void psSet_nz_rip(int* iobj, const int* data, int* ierr);

/**
 * Get Z grid for TF ripple field(s)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_ripple F77NAME(psget_z_ripple)
void psGet_z_ripple(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Z grid for TF ripple field(s)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_ripple F77NAME(psset_z_ripple)
void psSet_z_ripple(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Z grid for TF ripple field(s)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_ripple F77NAME(psgetrnk_z_ripple)
void psGetRnk_z_ripple(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Z grid for TF ripple field(s)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_ripple F77NAME(psgetdim_z_ripple)
void psGetDim_z_ripple(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_anomth (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_anomth F77NAME(psget_nrho_anomth)
void psGet_nrho_anomth(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_anomth (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_anomth F77NAME(psset_nrho_anomth)
void psSet_nrho_anomth(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (1d anomalous data for 1d, transport models)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_anomth F77NAME(psget_rho_anomth)
void psGet_rho_anomth(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (1d anomalous data for 1d, transport models)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_anomth F77NAME(psset_rho_anomth)
void psSet_rho_anomth(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (1d anomalous data for 1d, transport models)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_anomth F77NAME(psgetrnk_rho_anomth)
void psGetRnk_rho_anomth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (1d anomalous data for 1d, transport models)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_anomth F77NAME(psgetdim_rho_anomth)
void psGetDim_rho_anomth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_anom (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_anom F77NAME(psget_nrho_anom)
void psGet_nrho_anom(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_anom (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_anom F77NAME(psset_nrho_anom)
void psSet_nrho_anom(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (1d anomalous transport profiles)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_anom F77NAME(psget_rho_anom)
void psGet_rho_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (1d anomalous transport profiles)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_anom F77NAME(psset_rho_anom)
void psSet_rho_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (1d anomalous transport profiles)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_anom F77NAME(psgetrnk_rho_anom)
void psGetRnk_rho_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (1d anomalous transport profiles)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_anom F77NAME(psgetdim_rho_anom)
void psGetDim_rho_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of E_anom (E coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nefi_anom F77NAME(psget_nefi_anom)
void psGet_nefi_anom(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of E_anom (E coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nefi_anom F77NAME(psset_nefi_anom)
void psSet_nefi_anom(int* iobj, const int* data, int* ierr);

/**
 * Get (optional) energy grid (1d profiles), for separated variation of fast ion, anomalous transport with fast ion energy
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_e_anom F77NAME(psget_e_anom)
void psGet_e_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set (optional) energy grid (1d profiles), for separated variation of fast ion, anomalous transport with fast ion energy
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_e_anom F77NAME(psset_e_anom)
void psSet_e_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of (optional) energy grid (1d profiles), for separated variation of fast ion, anomalous transport with fast ion energy
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_e_anom F77NAME(psgetrnk_e_anom)
void psGetRnk_e_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of (optional) energy grid (1d profiles), for separated variation of fast ion, anomalous transport with fast ion energy
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_e_anom F77NAME(psgetdim_e_anom)
void psGetDim_e_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of rho_anom2 (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrho_anom2 F77NAME(psget_nrho_anom2)
void psGet_nrho_anom2(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of rho_anom2 (RHO coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrho_anom2 F77NAME(psset_nrho_anom2)
void psSet_nrho_anom2(int* iobj, const int* data, int* ierr);

/**
 * Get rho grid (2d anomalous transport profiles)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_anom2 F77NAME(psget_rho_anom2)
void psGet_rho_anom2(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rho grid (2d anomalous transport profiles)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_anom2 F77NAME(psset_rho_anom2)
void psSet_rho_anom2(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rho grid (2d anomalous transport profiles)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_anom2 F77NAME(psgetrnk_rho_anom2)
void psGetRnk_rho_anom2(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rho grid (2d anomalous transport profiles)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_anom2 F77NAME(psgetdim_rho_anom2)
void psGetDim_rho_anom2(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get grid dimension of E_anom2 (E coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nefi_anom2 F77NAME(psget_nefi_anom2)
void psGet_nefi_anom2(int* iobj, int* data, int* ierr);

/**
 * Set grid dimension of E_anom2 (E coordinate)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nefi_anom2 F77NAME(psset_nefi_anom2)
void psSet_nefi_anom2(int* iobj, const int* data, int* ierr);

/**
 * Get energy grid (2d anomalous transport profiles), for Db(E,rho), separate profiles for various, pitch related limiting orbit topologies:, deeply trapped, barely trapped, barely passing  co/ctr, vpll/v -> 1 limit  co/ctr
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_e_anom2 F77NAME(psget_e_anom2)
void psGet_e_anom2(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set energy grid (2d anomalous transport profiles), for Db(E,rho), separate profiles for various, pitch related limiting orbit topologies:, deeply trapped, barely trapped, barely passing  co/ctr, vpll/v -> 1 limit  co/ctr
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_e_anom2 F77NAME(psset_e_anom2)
void psSet_e_anom2(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of energy grid (2d anomalous transport profiles), for Db(E,rho), separate profiles for various, pitch related limiting orbit topologies:, deeply trapped, barely trapped, barely passing  co/ctr, vpll/v -> 1 limit  co/ctr
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_e_anom2 F77NAME(psgetrnk_e_anom2)
void psGetRnk_e_anom2(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of energy grid (2d anomalous transport profiles), for Db(E,rho), separate profiles for various, pitch related limiting orbit topologies:, deeply trapped, barely trapped, barely passing  co/ctr, vpll/v -> 1 limit  co/ctr
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_e_anom2 F77NAME(psgetdim_e_anom2)
void psGetDim_e_anom2(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get number of points, ky grid ( anomalous data over ky spectrum)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nky_anomth F77NAME(psget_nky_anomth)
void psGet_nky_anomth(int* iobj, int* data, int* ierr);

/**
 * Set number of points, ky grid ( anomalous data over ky spectrum)
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nky_anomth F77NAME(psset_nky_anomth)
void psSet_nky_anomth(int* iobj, const int* data, int* ierr);

/**
 * Get number of points, ky grid for MMM model
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nky_mmm F77NAME(psget_nky_mmm)
void psGet_nky_mmm(int* iobj, int* data, int* ierr);

/**
 * Set number of points, ky grid for MMM model
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nky_mmm F77NAME(psset_nky_mmm)
void psSet_nky_mmm(int* iobj, const int* data, int* ierr);

/**
 * Get index of circuit to which each coil belongs, (derived from machine description): coil j, named coil_name(j),, belongs to the circuit named circuit_name(icircuit_coil(j)).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_icircuit_coil F77NAME(psget_icircuit_coil)
void psGet_icircuit_coil(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set index of circuit to which each coil belongs, (derived from machine description): coil j, named coil_name(j),, belongs to the circuit named circuit_name(icircuit_coil(j)).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_icircuit_coil F77NAME(psset_icircuit_coil)
void psSet_icircuit_coil(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of index of circuit to which each coil belongs, (derived from machine description): coil j, named coil_name(j),, belongs to the circuit named circuit_name(icircuit_coil(j)).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_icircuit_coil F77NAME(psgetrnk_icircuit_coil)
void psGetRnk_icircuit_coil(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of index of circuit to which each coil belongs, (derived from machine description): coil j, named coil_name(j),, belongs to the circuit named circuit_name(icircuit_coil(j)).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_icircuit_coil F77NAME(psgetdim_icircuit_coil)
void psGetDim_icircuit_coil(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get time at beginning of IPS macro timestep
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_t0 F77NAME(psget_t0)
void psGet_t0(int* iobj, double* data, int* ierr);

/**
 * Set time at beginning of IPS macro timestep
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_t0 F77NAME(psset_t0)
void psSet_t0(int* iobj, const double* data, int* ierr);

/**
 * Get time at end of IPS macro timestep
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_t1 F77NAME(psget_t1)
void psGet_t1(int* iobj, double* data, int* ierr);

/**
 * Set time at end of IPS macro timestep
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_t1 F77NAME(psset_t1)
void psSet_t1(int* iobj, const double* data, int* ierr);

/**
 * Get [d(Philim)/dt]/[2*Philim]
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eldot F77NAME(psget_eldot)
void psGet_eldot(int* iobj, double* data, int* ierr);

/**
 * Set [d(Philim)/dt]/[2*Philim]
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eldot F77NAME(psset_eldot)
void psSet_eldot(int* iobj, const double* data, int* ierr);

/**
 * Get line-averaged electron density
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nebar F77NAME(psget_nebar)
void psGet_nebar(int* iobj, double* data, int* ierr);

/**
 * Set line-averaged electron density
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nebar F77NAME(psset_nebar)
void psSet_nebar(int* iobj, const double* data, int* ierr);

/**
 * Get specie density measurement flag
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ns_is_input F77NAME(psget_ns_is_input)
void psGet_ns_is_input(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set specie density measurement flag
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ns_is_input F77NAME(psset_ns_is_input)
void psSet_ns_is_input(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of specie density measurement flag
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ns_is_input F77NAME(psgetrnk_ns_is_input)
void psGetRnk_ns_is_input(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie density measurement flag
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ns_is_input F77NAME(psgetdim_ns_is_input)
void psGetDim_ns_is_input(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get specie temperature measurement flag
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ts_is_input F77NAME(psget_ts_is_input)
void psGet_ts_is_input(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set specie temperature measurement flag
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ts_is_input F77NAME(psset_ts_is_input)
void psSet_ts_is_input(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of specie temperature measurement flag
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ts_is_input F77NAME(psgetrnk_ts_is_input)
void psGetRnk_ts_is_input(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie temperature measurement flag
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ts_is_input F77NAME(psgetdim_ts_is_input)
void psGetDim_ts_is_input(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get specie outer midplane toroidal velocit flag
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vtor_is_input F77NAME(psget_vtor_is_input)
void psGet_vtor_is_input(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set specie outer midplane toroidal velocit flag
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vtor_is_input F77NAME(psset_vtor_is_input)
void psSet_vtor_is_input(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of specie outer midplane toroidal velocit flag
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vtor_is_input F77NAME(psgetrnk_vtor_is_input)
void psGetRnk_vtor_is_input(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie outer midplane toroidal velocit flag
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vtor_is_input F77NAME(psgetdim_vtor_is_input)
void psGetDim_vtor_is_input(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get specie outer midplane poloidal velocit flag
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vpol_is_input F77NAME(psget_vpol_is_input)
void psGet_vpol_is_input(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set specie outer midplane poloidal velocit flag
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vpol_is_input F77NAME(psset_vpol_is_input)
void psSet_vpol_is_input(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of specie outer midplane poloidal velocit flag
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vpol_is_input F77NAME(psgetrnk_vpol_is_input)
void psGetRnk_vpol_is_input(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie outer midplane poloidal velocit flag
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vpol_is_input F77NAME(psgetdim_vpol_is_input)
void psGetDim_vpol_is_input(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Electron temperature at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_te_bdy F77NAME(psget_te_bdy)
void psGet_te_bdy(int* iobj, double* data, int* ierr);

/**
 * Set Electron temperature at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_te_bdy F77NAME(psset_te_bdy)
void psSet_te_bdy(int* iobj, const double* data, int* ierr);

/**
 * Get Ion temperature at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ti_bdy F77NAME(psget_ti_bdy)
void psGet_ti_bdy(int* iobj, double* data, int* ierr);

/**
 * Set Ion temperature at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ti_bdy F77NAME(psset_ti_bdy)
void psSet_ti_bdy(int* iobj, const double* data, int* ierr);

/**
 * Get toroidal angular velocity at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_omegat_bdy F77NAME(psget_omegat_bdy)
void psGet_omegat_bdy(int* iobj, double* data, int* ierr);

/**
 * Set toroidal angular velocity at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_omegat_bdy F77NAME(psset_omegat_bdy)
void psSet_omegat_bdy(int* iobj, const double* data, int* ierr);

/**
 * Get specie densities at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ns_bdy F77NAME(psget_ns_bdy)
void psGet_ns_bdy(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set specie densities at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ns_bdy F77NAME(psset_ns_bdy)
void psSet_ns_bdy(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of specie densities at/beyond boundary
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ns_bdy F77NAME(psgetrnk_ns_bdy)
void psGetRnk_ns_bdy(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie densities at/beyond boundary
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ns_bdy F77NAME(psgetdim_ns_bdy)
void psGetDim_ns_bdy(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get location beyond which Te is known
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_bdy_te F77NAME(psget_rho_bdy_te)
void psGet_rho_bdy_te(int* iobj, double* data, int* ierr);

/**
 * Set location beyond which Te is known
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_bdy_te F77NAME(psset_rho_bdy_te)
void psSet_rho_bdy_te(int* iobj, const double* data, int* ierr);

/**
 * Get location beyond which Ti is known
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_bdy_ti F77NAME(psget_rho_bdy_ti)
void psGet_rho_bdy_ti(int* iobj, double* data, int* ierr);

/**
 * Set location beyond which Ti is known
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_bdy_ti F77NAME(psset_rho_bdy_ti)
void psSet_rho_bdy_ti(int* iobj, const double* data, int* ierr);

/**
 * Get location beyond which angular velocity is known
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_bdy_omegat F77NAME(psget_rho_bdy_omegat)
void psGet_rho_bdy_omegat(int* iobj, double* data, int* ierr);

/**
 * Set location beyond which angular velocity is known
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_bdy_omegat F77NAME(psset_rho_bdy_omegat)
void psSet_rho_bdy_omegat(int* iobj, const double* data, int* ierr);

/**
 * Get locations beyond which densities are known
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rho_bdy_ns F77NAME(psget_rho_bdy_ns)
void psGet_rho_bdy_ns(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set locations beyond which densities are known
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rho_bdy_ns F77NAME(psset_rho_bdy_ns)
void psSet_rho_bdy_ns(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of locations beyond which densities are known
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rho_bdy_ns F77NAME(psgetrnk_rho_bdy_ns)
void psGetRnk_rho_bdy_ns(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of locations beyond which densities are known
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rho_bdy_ns F77NAME(psgetdim_rho_bdy_ns)
void psGetDim_rho_bdy_ns(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get toroidal voltage at surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vsur F77NAME(psget_vsur)
void psGet_vsur(int* iobj, double* data, int* ierr);

/**
 * Set toroidal voltage at surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vsur F77NAME(psset_vsur)
void psSet_vsur(int* iobj, const double* data, int* ierr);

/**
 * Get Machine_Description section lock
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lock_machine_descr F77NAME(psget_lock_machine_descr)
void psGet_lock_machine_descr(int* iobj, int* data, int* ierr);

/**
 * Set Machine_Description section lock
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lock_machine_descr F77NAME(psset_lock_machine_descr)
void psSet_lock_machine_descr(int* iobj, const int* data, int* ierr);

/**
 * Get Shot_Configuration section lock
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lock_shot_config F77NAME(psget_lock_shot_config)
void psGet_lock_shot_config(int* iobj, int* data, int* ierr);

/**
 * Set Shot_Configuration section lock
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lock_shot_config F77NAME(psset_lock_shot_config)
void psSet_lock_shot_config(int* iobj, const int* data, int* ierr);

/**
 * Get Simulation_Init section lock
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lock_sim_init F77NAME(psget_lock_sim_init)
void psGet_lock_sim_init(int* iobj, int* data, int* ierr);

/**
 * Set Simulation_Init section lock
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lock_sim_init F77NAME(psset_lock_sim_init)
void psSet_lock_sim_init(int* iobj, const int* data, int* ierr);

/**
 * Get edge neutral sources (atoms/sec), these numbers normalize numerous GAS profiles
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sc0 F77NAME(psget_sc0)
void psGet_sc0(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set edge neutral sources (atoms/sec), these numbers normalize numerous GAS profiles
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sc0 F77NAME(psset_sc0)
void psSet_sc0(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of edge neutral sources (atoms/sec), these numbers normalize numerous GAS profiles
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sc0 F77NAME(psgetrnk_sc0)
void psGetRnk_sc0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of edge neutral sources (atoms/sec), these numbers normalize numerous GAS profiles
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sc0 F77NAME(psgetdim_sc0)
void psGetDim_sc0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get average energy of neutral sources, "(3/2)*T0", [in reference frame of (vphi0_av)]; some models, impose a minimum value such as 0.005 KeV.  The, value can effect penetration of neutrals and, depth of edge-driven charge exchange loss, but, (depending on plasma parameters) the effect, is often weak.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_e0_av F77NAME(psget_e0_av)
void psGet_e0_av(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set average energy of neutral sources, "(3/2)*T0", [in reference frame of (vphi0_av)]; some models, impose a minimum value such as 0.005 KeV.  The, value can effect penetration of neutrals and, depth of edge-driven charge exchange loss, but, (depending on plasma parameters) the effect, is often weak.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_e0_av F77NAME(psset_e0_av)
void psSet_e0_av(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of average energy of neutral sources, "(3/2)*T0", [in reference frame of (vphi0_av)]; some models, impose a minimum value such as 0.005 KeV.  The, value can effect penetration of neutrals and, depth of edge-driven charge exchange loss, but, (depending on plasma parameters) the effect, is often weak.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_e0_av F77NAME(psgetrnk_e0_av)
void psGetRnk_e0_av(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of average energy of neutral sources, "(3/2)*T0", [in reference frame of (vphi0_av)]; some models, impose a minimum value such as 0.005 KeV.  The, value can effect penetration of neutrals and, depth of edge-driven charge exchange loss, but, (depending on plasma parameters) the effect, is often weak.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_e0_av F77NAME(psgetdim_e0_av)
void psGetDim_e0_av(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get average toroidal velocity of neutral source, (some models may assume this is zero).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vphi0_av F77NAME(psget_vphi0_av)
void psGet_vphi0_av(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set average toroidal velocity of neutral source, (some models may assume this is zero).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vphi0_av F77NAME(psset_vphi0_av)
void psSet_vphi0_av(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of average toroidal velocity of neutral source, (some models may assume this is zero).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vphi0_av F77NAME(psgetrnk_vphi0_av)
void psGetRnk_vphi0_av(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of average toroidal velocity of neutral source, (some models may assume this is zero).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vphi0_av F77NAME(psgetdim_vphi0_av)
void psGetDim_vphi0_av(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Hydrogenic neutral density in scrape off region, This is a simplified 0d specification of neutral density, beyond the plasma boundary, that can be used to deplete, fast ion orbits that go beyond the boundary via charge, exchange, in some models.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dn0out F77NAME(psget_dn0out)
void psGet_dn0out(int* iobj, double* data, int* ierr);

/**
 * Set Hydrogenic neutral density in scrape off region, This is a simplified 0d specification of neutral density, beyond the plasma boundary, that can be used to deplete, fast ion orbits that go beyond the boundary via charge, exchange, in some models.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dn0out F77NAME(psset_dn0out)
void psSet_dn0out(int* iobj, const double* data, int* ierr);

/**
 * Get impurity source magnitude (atoms/sec), these numbers normalize "sii_xs" source profiles
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_xs F77NAME(psget_xs)
void psGet_xs(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set impurity source magnitude (atoms/sec), these numbers normalize "sii_xs" source profiles
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_xs F77NAME(psset_xs)
void psSet_xs(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of impurity source magnitude (atoms/sec), these numbers normalize "sii_xs" source profiles
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_xs F77NAME(psgetrnk_xs)
void psGetRnk_xs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of impurity source magnitude (atoms/sec), these numbers normalize "sii_xs" source profiles
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_xs F77NAME(psgetdim_xs)
void psGetDim_xs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get power on each beam source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_power_nbi F77NAME(psget_power_nbi)
void psGet_power_nbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set power on each beam source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_power_nbi F77NAME(psset_power_nbi)
void psSet_power_nbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of power on each beam source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_power_nbi F77NAME(psgetrnk_power_nbi)
void psGetRnk_power_nbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of power on each beam source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_power_nbi F77NAME(psgetdim_power_nbi)
void psGetDim_power_nbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get energy of each beam source **keV**
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_kvolt_nbi F77NAME(psget_kvolt_nbi)
void psGet_kvolt_nbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set energy of each beam source **keV**
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_kvolt_nbi F77NAME(psset_kvolt_nbi)
void psSet_kvolt_nbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of energy of each beam source **keV**
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_kvolt_nbi F77NAME(psgetrnk_kvolt_nbi)
void psGetRnk_kvolt_nbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of energy of each beam source **keV**
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_kvolt_nbi F77NAME(psgetdim_kvolt_nbi)
void psGetDim_kvolt_nbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fraction of beam current at full voltage
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_frac_full F77NAME(psget_frac_full)
void psGet_frac_full(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set fraction of beam current at full voltage
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_frac_full F77NAME(psset_frac_full)
void psSet_frac_full(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of fraction of beam current at full voltage
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_frac_full F77NAME(psgetrnk_frac_full)
void psGetRnk_frac_full(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fraction of beam current at full voltage
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_frac_full F77NAME(psgetdim_frac_full)
void psGetDim_frac_full(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fraction of beam current at half voltage, 1-frac_full(ib)-frac_half(ib) = fraction at (1/3) voltage
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_frac_half F77NAME(psget_frac_half)
void psGet_frac_half(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set fraction of beam current at half voltage, 1-frac_full(ib)-frac_half(ib) = fraction at (1/3) voltage
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_frac_half F77NAME(psset_frac_half)
void psSet_frac_half(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of fraction of beam current at half voltage, 1-frac_full(ib)-frac_half(ib) = fraction at (1/3) voltage
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_frac_half F77NAME(psgetrnk_frac_half)
void psGetRnk_frac_half(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fraction of beam current at half voltage, 1-frac_full(ib)-frac_half(ib) = fraction at (1/3) voltage
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_frac_half F77NAME(psgetdim_frac_half)
void psGetDim_frac_half(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get power injected as trace element (if any), total power on beam ib is power_nbi(ib) + power_nbi_trace(ib)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_power_nbi_trace F77NAME(psget_power_nbi_trace)
void psGet_power_nbi_trace(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set power injected as trace element (if any), total power on beam ib is power_nbi(ib) + power_nbi_trace(ib)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_power_nbi_trace F77NAME(psset_power_nbi_trace)
void psSet_power_nbi_trace(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of power injected as trace element (if any), total power on beam ib is power_nbi(ib) + power_nbi_trace(ib)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_power_nbi_trace F77NAME(psgetrnk_power_nbi_trace)
void psGetRnk_power_nbi_trace(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of power injected as trace element (if any), total power on beam ib is power_nbi(ib) + power_nbi_trace(ib)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_power_nbi_trace F77NAME(psgetdim_power_nbi_trace)
void psGetDim_power_nbi_trace(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbeami_bdy F77NAME(psget_nbeami_bdy)
void psGet_nbeami_bdy(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbeami_bdy F77NAME(psset_nbeami_bdy)
void psSet_nbeami_bdy(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nbeami_bdy F77NAME(psgetrnk_nbeami_bdy)
void psGetRnk_nbeami_bdy(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nbeami_bdy F77NAME(psgetdim_nbeami_bdy)
void psGetDim_nbeami_bdy(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get RF minority ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nmini_bdy F77NAME(psget_nmini_bdy)
void psGet_nmini_bdy(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set RF minority ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nmini_bdy F77NAME(psset_nmini_bdy)
void psSet_nmini_bdy(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of RF minority ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nmini_bdy F77NAME(psgetrnk_nmini_bdy)
void psGetRnk_nmini_bdy(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of RF minority ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nmini_bdy F77NAME(psgetdim_nmini_bdy)
void psGetDim_nmini_bdy(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get power on each ICRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_power_ic F77NAME(psget_power_ic)
void psGet_power_ic(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set power on each ICRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_power_ic F77NAME(psset_power_ic)
void psSet_power_ic(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of power on each ICRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_power_ic F77NAME(psgetrnk_power_ic)
void psGetRnk_power_ic(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of power on each ICRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_power_ic F77NAME(psgetdim_power_ic)
void psGetDim_power_ic(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get distribution function filenames
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dist_fun F77NAME(psget_dist_fun)
void psGet_dist_fun(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set distribution function filenames
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dist_fun F77NAME(psset_dist_fun)
void psSet_dist_fun(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of distribution function filenames
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_dist_fun F77NAME(psgetsz_dist_fun)
void psGetSz_dist_fun(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of distribution function filenames
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dist_fun F77NAME(psgetrnk_dist_fun)
void psGetRnk_dist_fun(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of distribution function filenames
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dist_fun F77NAME(psgetdim_dist_fun)
void psGetDim_dist_fun(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get quasilinear operator filenames
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ql_operator F77NAME(psget_ql_operator)
void psGet_ql_operator(int* iobj, const int* n1, char* data, int* ierr, size_t data_len);

/**
 * Set quasilinear operator filenames
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ql_operator F77NAME(psset_ql_operator)
void psSet_ql_operator(int* iobj, const int* n1, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of quasilinear operator filenames
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_ql_operator F77NAME(psgetsz_ql_operator)
void psGetSz_ql_operator(int* iobj, int* size, int* ierr); 

/**
 * Get number of dimension of quasilinear operator filenames
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ql_operator F77NAME(psgetrnk_ql_operator)
void psGetRnk_ql_operator(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of quasilinear operator filenames
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ql_operator F77NAME(psgetdim_ql_operator)
void psGetDim_ql_operator(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get =1 if minority specie is thermalized, =0: never set; =2: non-thermal.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_isthermal F77NAME(psget_isthermal)
void psGet_isthermal(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set =1 if minority specie is thermalized, =0: never set; =2: non-thermal.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_isthermal F77NAME(psset_isthermal)
void psSet_isthermal(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of =1 if minority specie is thermalized, =0: never set; =2: non-thermal.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_isthermal F77NAME(psgetrnk_isthermal)
void psGetRnk_isthermal(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of =1 if minority specie is thermalized, =0: never set; =2: non-thermal.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_isthermal F77NAME(psgetdim_isthermal)
void psGetDim_isthermal(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get RF power absorbed inside plasma
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_picrf_abs F77NAME(psget_picrf_abs)
void psGet_picrf_abs(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set RF power absorbed inside plasma
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_picrf_abs F77NAME(psset_picrf_abs)
void psSet_picrf_abs(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of RF power absorbed inside plasma
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_picrf_abs F77NAME(psgetrnk_picrf_abs)
void psGetRnk_picrf_abs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of RF power absorbed inside plasma
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_picrf_abs F77NAME(psgetdim_picrf_abs)
void psGetDim_picrf_abs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get absorbed spectrum n_phi weight, power_ic(iant)*wt_nphi_abs(ind,iant), gives power in toroidal mode, nphi(ind,iant), "ind" covers range 1:num_nphi(iant)., see vacuum spectrum wt_nphi(...)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_wt_nphi_abs F77NAME(psget_wt_nphi_abs)
void psGet_wt_nphi_abs(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set absorbed spectrum n_phi weight, power_ic(iant)*wt_nphi_abs(ind,iant), gives power in toroidal mode, nphi(ind,iant), "ind" covers range 1:num_nphi(iant)., see vacuum spectrum wt_nphi(...)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_wt_nphi_abs F77NAME(psset_wt_nphi_abs)
void psSet_wt_nphi_abs(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of absorbed spectrum n_phi weight, power_ic(iant)*wt_nphi_abs(ind,iant), gives power in toroidal mode, nphi(ind,iant), "ind" covers range 1:num_nphi(iant)., see vacuum spectrum wt_nphi(...)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_wt_nphi_abs F77NAME(psgetrnk_wt_nphi_abs)
void psGetRnk_wt_nphi_abs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of absorbed spectrum n_phi weight, power_ic(iant)*wt_nphi_abs(ind,iant), gives power in toroidal mode, nphi(ind,iant), "ind" covers range 1:num_nphi(iant)., see vacuum spectrum wt_nphi(...)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_wt_nphi_abs F77NAME(psgetdim_wt_nphi_abs)
void psGetDim_wt_nphi_abs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get RF power deposited outside plasma
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_picrf_ext F77NAME(psget_picrf_ext)
void psGet_picrf_ext(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set RF power deposited outside plasma
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_picrf_ext F77NAME(psset_picrf_ext)
void psSet_picrf_ext(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of RF power deposited outside plasma
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_picrf_ext F77NAME(psgetrnk_picrf_ext)
void psGetRnk_picrf_ext(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of RF power deposited outside plasma
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_picrf_ext F77NAME(psgetdim_picrf_ext)
void psGetDim_picrf_ext(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fraction of power deposited outside, plasma vs. nphi, antenna #.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_wt_nphi_ext F77NAME(psget_wt_nphi_ext)
void psGet_wt_nphi_ext(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set fraction of power deposited outside, plasma vs. nphi, antenna #.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_wt_nphi_ext F77NAME(psset_wt_nphi_ext)
void psSet_wt_nphi_ext(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of fraction of power deposited outside, plasma vs. nphi, antenna #.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_wt_nphi_ext F77NAME(psgetrnk_wt_nphi_ext)
void psGetRnk_wt_nphi_ext(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fraction of power deposited outside, plasma vs. nphi, antenna #.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_wt_nphi_ext F77NAME(psgetdim_wt_nphi_ext)
void psGetDim_wt_nphi_ext(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nfusi_bdy F77NAME(psget_nfusi_bdy)
void psGet_nfusi_bdy(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set fusion ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nfusi_bdy F77NAME(psset_nfusi_bdy)
void psSet_nfusi_bdy(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nfusi_bdy F77NAME(psgetrnk_nfusi_bdy)
void psGetRnk_nfusi_bdy(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion densities at/beyond boundary
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nfusi_bdy F77NAME(psgetdim_nfusi_bdy)
void psGetDim_nfusi_bdy(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get power on each ECRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_power_ec F77NAME(psget_power_ec)
void psGet_power_ec(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set power on each ECRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_power_ec F77NAME(psset_power_ec)
void psSet_power_ec(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of power on each ECRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_power_ec F77NAME(psgetrnk_power_ec)
void psGetRnk_power_ec(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of power on each ECRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_power_ec F77NAME(psgetdim_power_ec)
void psGetDim_power_ec(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get power on each LHRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_power_lh F77NAME(psget_power_lh)
void psGet_power_lh(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set power on each LHRF source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_power_lh F77NAME(psset_power_lh)
void psSet_power_lh(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of power on each LHRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_power_lh F77NAME(psgetrnk_power_lh)
void psGetRnk_power_lh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of power on each LHRF source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_power_lh F77NAME(psgetdim_power_lh)
void psGetDim_power_lh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get EFIT G-eqdsk file: psi(R,Z), g(psi), etc.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eqdsk_file F77NAME(psget_eqdsk_file)
void psGet_eqdsk_file(int* iobj, char* data, int* ierr, size_t data_len);

/**
 * Set EFIT G-eqdsk file: psi(R,Z), g(psi), etc.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eqdsk_file F77NAME(psset_eqdsk_file)
void psSet_eqdsk_file(int* iobj, const char* data, int* ierr, size_t data_len);

/**
 * Get character size of EFIT G-eqdsk file: psi(R,Z), g(psi), etc.
 * @param iobj reference to opaque plasma state object
 * @param size (out)
 * @param ierr error code (0=OK)
 */
#define psGetSz_eqdsk_file F77NAME(psgetsz_eqdsk_file)
void psGetSz_eqdsk_file(int* iobj, int* size, int* ierr); 

/**
 * Get R_min of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_min_lcfs F77NAME(psget_r_min_lcfs)
void psGet_r_min_lcfs(int* iobj, double* data, int* ierr);

/**
 * Set R_min of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_min_lcfs F77NAME(psset_r_min_lcfs)
void psSet_r_min_lcfs(int* iobj, const double* data, int* ierr);

/**
 * Get R_max of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_max_lcfs F77NAME(psget_r_max_lcfs)
void psGet_r_max_lcfs(int* iobj, double* data, int* ierr);

/**
 * Set R_max of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_max_lcfs F77NAME(psset_r_max_lcfs)
void psSet_r_max_lcfs(int* iobj, const double* data, int* ierr);

/**
 * Get Z_min of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_min_lcfs F77NAME(psget_z_min_lcfs)
void psGet_z_min_lcfs(int* iobj, double* data, int* ierr);

/**
 * Set Z_min of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_min_lcfs F77NAME(psset_z_min_lcfs)
void psSet_z_min_lcfs(int* iobj, const double* data, int* ierr);

/**
 * Get Z_max of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_max_lcfs F77NAME(psget_z_max_lcfs)
void psGet_z_max_lcfs(int* iobj, double* data, int* ierr);

/**
 * Set Z_max of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_max_lcfs F77NAME(psset_z_max_lcfs)
void psSet_z_max_lcfs(int* iobj, const double* data, int* ierr);

/**
 * Get R of magnetic axis
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_axis F77NAME(psget_r_axis)
void psGet_r_axis(int* iobj, double* data, int* ierr);

/**
 * Set R of magnetic axis
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_axis F77NAME(psset_r_axis)
void psSet_r_axis(int* iobj, const double* data, int* ierr);

/**
 * Get Z of magnetic axis
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_axis F77NAME(psget_z_axis)
void psGet_z_axis(int* iobj, double* data, int* ierr);

/**
 * Set Z of magnetic axis
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_axis F77NAME(psset_z_axis)
void psSet_z_axis(int* iobj, const double* data, int* ierr);

/**
 * Get |B|_min of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_min_lcfs F77NAME(psget_b_min_lcfs)
void psGet_b_min_lcfs(int* iobj, double* data, int* ierr);

/**
 * Set |B|_min of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_min_lcfs F77NAME(psset_b_min_lcfs)
void psSet_b_min_lcfs(int* iobj, const double* data, int* ierr);

/**
 * Get |B|_max of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_max_lcfs F77NAME(psget_b_max_lcfs)
void psGet_b_max_lcfs(int* iobj, double* data, int* ierr);

/**
 * Set |B|_max of last closed flux surface
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_max_lcfs F77NAME(psset_b_max_lcfs)
void psSet_b_max_lcfs(int* iobj, const double* data, int* ierr);

/**
 * Get |B| at magnetic axis
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_axis F77NAME(psget_b_axis)
void psGet_b_axis(int* iobj, double* data, int* ierr);

/**
 * Set |B| at magnetic axis
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_axis F77NAME(psset_b_axis)
void psSet_b_axis(int* iobj, const double* data, int* ierr);

/**
 * Get vacuum B field at axis
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_axis_vac F77NAME(psget_b_axis_vac)
void psGet_b_axis_vac(int* iobj, double* data, int* ierr);

/**
 * Set vacuum B field at axis
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_axis_vac F77NAME(psset_b_axis_vac)
void psSet_b_axis_vac(int* iobj, const double* data, int* ierr);

/**
 * Get delta(Psi) from magnetic axis to machine axis, subtract this from Psi(R,Z) to get a Psi value, that approaches zero as R-> zero: Psi ~ R*A_phi, (as in the EFIT free boundary representation)., Note: prescribed boundary code runs (e.g., traditional TRANSP runs) cannot know this, number; so Plasma States created from such run, data will leave this at zero.  Plasma States, using free boundary MHD equilibrium information, will always have a non-zero value here.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_psi_to_machine_axis F77NAME(psget_psi_to_machine_axis)
void psGet_psi_to_machine_axis(int* iobj, double* data, int* ierr);

/**
 * Set delta(Psi) from magnetic axis to machine axis, subtract this from Psi(R,Z) to get a Psi value, that approaches zero as R-> zero: Psi ~ R*A_phi, (as in the EFIT free boundary representation)., Note: prescribed boundary code runs (e.g., traditional TRANSP runs) cannot know this, number; so Plasma States created from such run, data will leave this at zero.  Plasma States, using free boundary MHD equilibrium information, will always have a non-zero value here.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_psi_to_machine_axis F77NAME(psset_psi_to_machine_axis)
void psSet_psi_to_machine_axis(int* iobj, const double* data, int* ierr);

/**
 * Get SIGNED circuit current, amps/turn within each coil attached to the indicated circult:, SIGN: + means current flows counter-clockwise, viewed from above, for, a coil (j) with Nturns(j) > 0; direction opposite if Nturns(j) < 0, - means the reverse., The SIGNED current in coil (j) is Nturns(j)*coil_apt(icircuit_coil(j));, a positive current flows counter-clockwise viewed from above., Any element of Nturns(...) and any element of coil_apt(...) can be, either positive or negative.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_coil_apt F77NAME(psget_coil_apt)
void psGet_coil_apt(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set SIGNED circuit current, amps/turn within each coil attached to the indicated circult:, SIGN: + means current flows counter-clockwise, viewed from above, for, a coil (j) with Nturns(j) > 0; direction opposite if Nturns(j) < 0, - means the reverse., The SIGNED current in coil (j) is Nturns(j)*coil_apt(icircuit_coil(j));, a positive current flows counter-clockwise viewed from above., Any element of Nturns(...) and any element of coil_apt(...) can be, either positive or negative.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_coil_apt F77NAME(psset_coil_apt)
void psSet_coil_apt(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of SIGNED circuit current, amps/turn within each coil attached to the indicated circult:, SIGN: + means current flows counter-clockwise, viewed from above, for, a coil (j) with Nturns(j) > 0; direction opposite if Nturns(j) < 0, - means the reverse., The SIGNED current in coil (j) is Nturns(j)*coil_apt(icircuit_coil(j));, a positive current flows counter-clockwise viewed from above., Any element of Nturns(...) and any element of coil_apt(...) can be, either positive or negative.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_coil_apt F77NAME(psgetrnk_coil_apt)
void psGetRnk_coil_apt(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of SIGNED circuit current, amps/turn within each coil attached to the indicated circult:, SIGN: + means current flows counter-clockwise, viewed from above, for, a coil (j) with Nturns(j) > 0; direction opposite if Nturns(j) < 0, - means the reverse., The SIGNED current in coil (j) is Nturns(j)*coil_apt(icircuit_coil(j));, a positive current flows counter-clockwise viewed from above., Any element of Nturns(...) and any element of coil_apt(...) can be, either positive or negative.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_coil_apt F77NAME(psgetdim_coil_apt)
void psGetDim_coil_apt(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 0: OK; =1: MHD equilibrium refinement failed, if this is non-zero, the entire LMHD calculation is abandoned!!
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_mhd_eq_status F77NAME(psget_mhd_eq_status)
void psGet_mhd_eq_status(int* iobj, int* data, int* ierr);

/**
 * Set 0: OK; =1: MHD equilibrium refinement failed, if this is non-zero, the entire LMHD calculation is abandoned!!
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_mhd_eq_status F77NAME(psset_mhd_eq_status)
void psSet_mhd_eq_status(int* iobj, const int* data, int* ierr);

/**
 * Get 0: OK; =1: at least one code error occurred.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lmhd_status F77NAME(psget_lmhd_status)
void psGet_lmhd_status(int* iobj, int* data, int* ierr);

/**
 * Set 0: OK; =1: at least one code error occurred.
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lmhd_status F77NAME(psset_lmhd_status)
void psSet_lmhd_status(int* iobj, const int* data, int* ierr);

/**
 * Get completion status: Newcomb codes
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_newcomb_status F77NAME(psget_newcomb_status)
void psGet_newcomb_status(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set completion status: Newcomb codes
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_newcomb_status F77NAME(psset_newcomb_status)
void psSet_newcomb_status(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of completion status: Newcomb codes
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_newcomb_status F77NAME(psgetrnk_newcomb_status)
void psGetRnk_newcomb_status(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of completion status: Newcomb codes
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_newcomb_status F77NAME(psgetdim_newcomb_status)
void psGetDim_newcomb_status(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get completion status: Delta(W) codes
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_deltaw_status F77NAME(psget_deltaw_status)
void psGet_deltaw_status(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set completion status: Delta(W) codes
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_deltaw_status F77NAME(psset_deltaw_status)
void psSet_deltaw_status(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of completion status: Delta(W) codes
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_deltaw_status F77NAME(psgetrnk_deltaw_status)
void psGetRnk_deltaw_status(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of completion status: Delta(W) codes
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_deltaw_status F77NAME(psgetdim_deltaw_status)
void psGetDim_deltaw_status(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get completion status: Ballooning codes, ** see also: balstab profile, below **
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_balloon_status F77NAME(psget_balloon_status)
void psGet_balloon_status(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set completion status: Ballooning codes, ** see also: balstab profile, below **
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_balloon_status F77NAME(psset_balloon_status)
void psSet_balloon_status(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of completion status: Ballooning codes, ** see also: balstab profile, below **
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_balloon_status F77NAME(psgetrnk_balloon_status)
void psGetRnk_balloon_status(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of completion status: Ballooning codes, ** see also: balstab profile, below **
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_balloon_status F77NAME(psgetdim_balloon_status)
void psGetDim_balloon_status(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 0: stable everywhere; =1: unstable somewhere
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_balloon_stable F77NAME(psget_balloon_stable)
void psGet_balloon_stable(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set 0: stable everywhere; =1: unstable somewhere
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_balloon_stable F77NAME(psset_balloon_stable)
void psSet_balloon_stable(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of 0: stable everywhere; =1: unstable somewhere
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_balloon_stable F77NAME(psgetrnk_balloon_stable)
void psGetRnk_balloon_stable(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 0: stable everywhere; =1: unstable somewhere
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_balloon_stable F77NAME(psgetdim_balloon_stable)
void psGetDim_balloon_stable(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 0: stable everywhere; =1: unstable somewhere
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_mercier_stable F77NAME(psget_mercier_stable)
void psGet_mercier_stable(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set 0: stable everywhere; =1: unstable somewhere
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_mercier_stable F77NAME(psset_mercier_stable)
void psSet_mercier_stable(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of 0: stable everywhere; =1: unstable somewhere
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_mercier_stable F77NAME(psgetrnk_mercier_stable)
void psGetRnk_mercier_stable(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 0: stable everywhere; =1: unstable somewhere
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_mercier_stable F77NAME(psgetdim_mercier_stable)
void psGetDim_mercier_stable(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get critical toroidal mode number for ballooning, unstable cases (-1 if could not be found).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tornum_balcrit F77NAME(psget_tornum_balcrit)
void psGet_tornum_balcrit(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Set critical toroidal mode number for ballooning, unstable cases (-1 if could not be found).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tornum_balcrit F77NAME(psset_tornum_balcrit)
void psSet_tornum_balcrit(int* iobj, const int* n1, const int* data, int* ierr);

/**
 * Get number of dimension of critical toroidal mode number for ballooning, unstable cases (-1 if could not be found).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tornum_balcrit F77NAME(psgetrnk_tornum_balcrit)
void psGetRnk_tornum_balcrit(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of critical toroidal mode number for ballooning, unstable cases (-1 if could not be found).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tornum_balcrit F77NAME(psgetdim_tornum_balcrit)
void psGetDim_tornum_balcrit(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 0: stable; 1: unstable;, element (i,j) indicates if toroidal mode number, Tor_mode_No(i) is stable or unstable according to, the code Newcomb_code(j)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_newcomb_stable F77NAME(psget_newcomb_stable)
void psGet_newcomb_stable(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Set 0: stable; 1: unstable;, element (i,j) indicates if toroidal mode number, Tor_mode_No(i) is stable or unstable according to, the code Newcomb_code(j)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_newcomb_stable F77NAME(psset_newcomb_stable)
void psSet_newcomb_stable(int* iobj, const int* n1, const int* n2, const int* data, int* ierr);

/**
 * Get number of dimension of 0: stable; 1: unstable;, element (i,j) indicates if toroidal mode number, Tor_mode_No(i) is stable or unstable according to, the code Newcomb_code(j)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_newcomb_stable F77NAME(psgetrnk_newcomb_stable)
void psGetRnk_newcomb_stable(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 0: stable; 1: unstable;, element (i,j) indicates if toroidal mode number, Tor_mode_No(i) is stable or unstable according to, the code Newcomb_code(j)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_newcomb_stable F77NAME(psgetdim_newcomb_stable)
void psGetDim_newcomb_stable(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 0: stable; 1: unstable;, element (i,j) indicates if toroidal mode number, Tor_mode_No(i) is stable or unstable according to, the code DeltaW_code(j)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_deltaw_stable F77NAME(psget_deltaw_stable)
void psGet_deltaw_stable(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Set 0: stable; 1: unstable;, element (i,j) indicates if toroidal mode number, Tor_mode_No(i) is stable or unstable according to, the code DeltaW_code(j)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_deltaw_stable F77NAME(psset_deltaw_stable)
void psSet_deltaw_stable(int* iobj, const int* n1, const int* n2, const int* data, int* ierr);

/**
 * Get number of dimension of 0: stable; 1: unstable;, element (i,j) indicates if toroidal mode number, Tor_mode_No(i) is stable or unstable according to, the code DeltaW_code(j)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_deltaw_stable F77NAME(psgetrnk_deltaw_stable)
void psGetRnk_deltaw_stable(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 0: stable; 1: unstable;, element (i,j) indicates if toroidal mode number, Tor_mode_No(i) is stable or unstable according to, the code DeltaW_code(j)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_deltaw_stable F77NAME(psgetdim_deltaw_stable)
void psGetDim_deltaw_stable(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ideal growth rate, from a delta-W linear MHD code, normalized to the, Alfven time Rq/V_a where:, R -- major radius of magnetic axis, V_a -- alfven speed at magnetic axis, q = qmin  (minimum q anywhere in equilibrium)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gamma_lmhd F77NAME(psget_gamma_lmhd)
void psGet_gamma_lmhd(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ideal growth rate, from a delta-W linear MHD code, normalized to the, Alfven time Rq/V_a where:, R -- major radius of magnetic axis, V_a -- alfven speed at magnetic axis, q = qmin  (minimum q anywhere in equilibrium)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gamma_lmhd F77NAME(psset_gamma_lmhd)
void psSet_gamma_lmhd(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ideal growth rate, from a delta-W linear MHD code, normalized to the, Alfven time Rq/V_a where:, R -- major radius of magnetic axis, V_a -- alfven speed at magnetic axis, q = qmin  (minimum q anywhere in equilibrium)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gamma_lmhd F77NAME(psgetrnk_gamma_lmhd)
void psGetRnk_gamma_lmhd(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ideal growth rate, from a delta-W linear MHD code, normalized to the, Alfven time Rq/V_a where:, R -- major radius of magnetic axis, V_a -- alfven speed at magnetic axis, q = qmin  (minimum q anywhere in equilibrium)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gamma_lmhd F77NAME(psgetdim_gamma_lmhd)
void psGetDim_gamma_lmhd(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get type of fast ion diffusivity, =4: 2D fast ion diffusivity from ufiles, =6: fast ion diffusivity from dep code
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nmdifb F77NAME(psget_nmdifb)
void psGet_nmdifb(int* iobj, int* data, int* ierr);

/**
 * Set type of fast ion diffusivity, =4: 2D fast ion diffusivity from ufiles, =6: fast ion diffusivity from dep code
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nmdifb F77NAME(psset_nmdifb)
void psSet_nmdifb(int* iobj, const int* data, int* ierr);

/**
 * Get model density, boundary value
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nmodel_bdy F77NAME(psget_nmodel_bdy)
void psGet_nmodel_bdy(int* iobj, double* data, int* ierr);

/**
 * Set model density, boundary value
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nmodel_bdy F77NAME(psset_nmodel_bdy)
void psSet_nmodel_bdy(int* iobj, const double* data, int* ierr);

/**
 * Get model temperature, boundary value
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tmodel_bdy F77NAME(psget_tmodel_bdy)
void psGet_tmodel_bdy(int* iobj, double* data, int* ierr);

/**
 * Set model temperature, boundary value
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tmodel_bdy F77NAME(psset_tmodel_bdy)
void psSet_tmodel_bdy(int* iobj, const double* data, int* ierr);

/**
 * Get thermal specie density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ns F77NAME(psget_ns)
void psGet_ns(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set thermal specie density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ns F77NAME(psset_ns)
void psSet_ns(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of thermal specie density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ns F77NAME(psgetrnk_ns)
void psGetRnk_ns(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal specie density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ns F77NAME(psgetdim_ns)
void psGetDim_ns(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for ns profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ns F77NAME(psget_id_ns)
void psGet_id_ns(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for ns profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_ns F77NAME(psgetrnk_id_ns)
void psGetRnk_id_ns(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for ns profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_ns F77NAME(psgetdim_id_ns)
void psGetDim_id_ns(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get thermal specie temperature
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ts F77NAME(psget_ts)
void psGet_ts(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set thermal specie temperature
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ts F77NAME(psset_ts)
void psSet_ts(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of thermal specie temperature
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ts F77NAME(psgetrnk_ts)
void psGetRnk_ts(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal specie temperature
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ts F77NAME(psgetdim_ts)
void psGetDim_ts(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for Ts profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ts F77NAME(psget_id_ts)
void psGet_id_ts(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for Ts profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_ts F77NAME(psgetrnk_id_ts)
void psGetRnk_id_ts(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for Ts profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_ts F77NAME(psgetdim_id_ts)
void psGetDim_id_ts(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get thermal specie <vpll>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_v_pars F77NAME(psget_v_pars)
void psGet_v_pars(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set thermal specie <vpll>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_v_pars F77NAME(psset_v_pars)
void psSet_v_pars(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of thermal specie <vpll>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_v_pars F77NAME(psgetrnk_v_pars)
void psGetRnk_v_pars(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal specie <vpll>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_v_pars F77NAME(psgetdim_v_pars)
void psGetDim_v_pars(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for v_pars profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_v_pars F77NAME(psget_id_v_pars)
void psGet_id_v_pars(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for v_pars profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_v_pars F77NAME(psgetrnk_id_v_pars)
void psGetRnk_id_v_pars(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for v_pars profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_v_pars F77NAME(psgetdim_id_v_pars)
void psGetDim_id_v_pars(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get thermal specie <vper>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_v_pers F77NAME(psget_v_pers)
void psGet_v_pers(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set thermal specie <vper>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_v_pers F77NAME(psset_v_pers)
void psSet_v_pers(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of thermal specie <vper>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_v_pers F77NAME(psgetrnk_v_pers)
void psGetRnk_v_pers(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal specie <vper>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_v_pers F77NAME(psgetdim_v_pers)
void psGetDim_v_pers(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for v_pers profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_v_pers F77NAME(psget_id_v_pers)
void psGet_id_v_pers(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for v_pers profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_v_pers F77NAME(psgetrnk_id_v_pers)
void psGetRnk_id_v_pers(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for v_pers profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_v_pers F77NAME(psgetdim_id_v_pers)
void psGetDim_id_v_pers(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get toroidal velocity, outer half midplane
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vtor_omp F77NAME(psget_vtor_omp)
void psGet_vtor_omp(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set toroidal velocity, outer half midplane
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vtor_omp F77NAME(psset_vtor_omp)
void psSet_vtor_omp(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of toroidal velocity, outer half midplane
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vtor_omp F77NAME(psgetrnk_vtor_omp)
void psGetRnk_vtor_omp(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of toroidal velocity, outer half midplane
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vtor_omp F77NAME(psgetdim_vtor_omp)
void psGetDim_vtor_omp(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for vtor_omp profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vtor_omp F77NAME(psget_id_vtor_omp)
void psGet_id_vtor_omp(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for vtor_omp profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_vtor_omp F77NAME(psgetrnk_id_vtor_omp)
void psGetRnk_id_vtor_omp(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for vtor_omp profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_vtor_omp F77NAME(psgetdim_id_vtor_omp)
void psGetDim_id_vtor_omp(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get poloidal velocity, outer half midplane
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vpol_omp F77NAME(psget_vpol_omp)
void psGet_vpol_omp(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set poloidal velocity, outer half midplane
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vpol_omp F77NAME(psset_vpol_omp)
void psSet_vpol_omp(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of poloidal velocity, outer half midplane
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vpol_omp F77NAME(psgetrnk_vpol_omp)
void psGetRnk_vpol_omp(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of poloidal velocity, outer half midplane
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vpol_omp F77NAME(psgetdim_vpol_omp)
void psGetDim_vpol_omp(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for vpol_omp profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vpol_omp F77NAME(psget_id_vpol_omp)
void psGet_id_vpol_omp(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for vpol_omp profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_vpol_omp F77NAME(psgetrnk_id_vpol_omp)
void psGetRnk_id_vpol_omp(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for vpol_omp profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_vpol_omp F77NAME(psgetdim_id_vpol_omp)
void psGetDim_id_vpol_omp(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get toroidal velocity, inner half midplane
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vtor_inmp F77NAME(psget_vtor_inmp)
void psGet_vtor_inmp(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set toroidal velocity, inner half midplane
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vtor_inmp F77NAME(psset_vtor_inmp)
void psSet_vtor_inmp(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of toroidal velocity, inner half midplane
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vtor_inmp F77NAME(psgetrnk_vtor_inmp)
void psGetRnk_vtor_inmp(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of toroidal velocity, inner half midplane
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vtor_inmp F77NAME(psgetdim_vtor_inmp)
void psGetDim_vtor_inmp(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for vtor_inmp profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vtor_inmp F77NAME(psget_id_vtor_inmp)
void psGet_id_vtor_inmp(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for vtor_inmp profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_vtor_inmp F77NAME(psgetrnk_id_vtor_inmp)
void psGetRnk_id_vtor_inmp(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for vtor_inmp profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_vtor_inmp F77NAME(psgetdim_id_vtor_inmp)
void psGetDim_id_vtor_inmp(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get poloidal velocity, inner half midplane
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vpol_inmp F77NAME(psget_vpol_inmp)
void psGet_vpol_inmp(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set poloidal velocity, inner half midplane
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vpol_inmp F77NAME(psset_vpol_inmp)
void psSet_vpol_inmp(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of poloidal velocity, inner half midplane
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vpol_inmp F77NAME(psgetrnk_vpol_inmp)
void psGetRnk_vpol_inmp(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of poloidal velocity, inner half midplane
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vpol_inmp F77NAME(psgetdim_vpol_inmp)
void psGetDim_vpol_inmp(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for vpol_inmp profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vpol_inmp F77NAME(psget_id_vpol_inmp)
void psGet_id_vpol_inmp(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for vpol_inmp profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_vpol_inmp F77NAME(psgetrnk_id_vpol_inmp)
void psGetRnk_id_vpol_inmp(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for vpol_inmp profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_vpol_inmp F77NAME(psgetdim_id_vpol_inmp)
void psGetDim_id_vpol_inmp(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get loop voltage
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_v_loop F77NAME(psget_v_loop)
void psGet_v_loop(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set loop voltage
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_v_loop F77NAME(psset_v_loop)
void psSet_v_loop(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of loop voltage
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_v_loop F77NAME(psgetrnk_v_loop)
void psGetRnk_v_loop(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of loop voltage
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_v_loop F77NAME(psgetdim_v_loop)
void psGetDim_v_loop(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for V_loop profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_v_loop F77NAME(psget_id_v_loop)
void psGet_id_v_loop(int* iobj, int* data, int* ierr);

/**
 * Get Zeff (sum[nj*Zj**2]/ne)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zeff F77NAME(psget_zeff)
void psGet_zeff(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Zeff (sum[nj*Zj**2]/ne)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zeff F77NAME(psset_zeff)
void psSet_zeff(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Zeff (sum[nj*Zj**2]/ne)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_zeff F77NAME(psgetrnk_zeff)
void psGetRnk_zeff(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Zeff (sum[nj*Zj**2]/ne)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_zeff F77NAME(psgetdim_zeff)
void psGetDim_zeff(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Zeff profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_zeff F77NAME(psget_id_zeff)
void psGet_id_zeff(int* iobj, int* data, int* ierr);

/**
 * Get Thermal ion contribution to Zeff
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zeff_th F77NAME(psget_zeff_th)
void psGet_zeff_th(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Thermal ion contribution to Zeff
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zeff_th F77NAME(psset_zeff_th)
void psSet_zeff_th(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Thermal ion contribution to Zeff
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_zeff_th F77NAME(psgetrnk_zeff_th)
void psGetRnk_zeff_th(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Thermal ion contribution to Zeff
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_zeff_th F77NAME(psgetdim_zeff_th)
void psGetDim_zeff_th(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Zeff_th profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_zeff_th F77NAME(psget_id_zeff_th)
void psGet_id_zeff_th(int* iobj, int* data, int* ierr);

/**
 * Get Fast ion contribution to Zeff
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_zeff_fi F77NAME(psget_zeff_fi)
void psGet_zeff_fi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Fast ion contribution to Zeff
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_zeff_fi F77NAME(psset_zeff_fi)
void psSet_zeff_fi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Fast ion contribution to Zeff
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_zeff_fi F77NAME(psgetrnk_zeff_fi)
void psGetRnk_zeff_fi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Fast ion contribution to Zeff
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_zeff_fi F77NAME(psgetdim_zeff_fi)
void psGetDim_zeff_fi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Zeff_fi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_zeff_fi F77NAME(psget_id_zeff_fi)
void psGet_id_zeff_fi(int* iobj, int* data, int* ierr);

/**
 * Get fast ion depletion: sum[nj*Zj/ne]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fi_depletion F77NAME(psget_fi_depletion)
void psGet_fi_depletion(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set fast ion depletion: sum[nj*Zj/ne]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fi_depletion F77NAME(psset_fi_depletion)
void psSet_fi_depletion(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of fast ion depletion: sum[nj*Zj/ne]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_fi_depletion F77NAME(psgetrnk_fi_depletion)
void psGetRnk_fi_depletion(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fast ion depletion: sum[nj*Zj/ne]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_fi_depletion F77NAME(psgetdim_fi_depletion)
void psGetDim_fi_depletion(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Fi_depletion profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_fi_depletion F77NAME(psget_id_fi_depletion)
void psGet_id_fi_depletion(int* iobj, int* data, int* ierr);

/**
 * Get total thermal ion density, should match sum ns(:,1:nspec_th)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ni F77NAME(psget_ni)
void psGet_ni(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set total thermal ion density, should match sum ns(:,1:nspec_th)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ni F77NAME(psset_ni)
void psSet_ni(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of total thermal ion density, should match sum ns(:,1:nspec_th)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ni F77NAME(psgetrnk_ni)
void psGetRnk_ni(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of total thermal ion density, should match sum ns(:,1:nspec_th)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ni F77NAME(psgetdim_ni)
void psGetDim_ni(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for ni profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ni F77NAME(psget_id_ni)
void psGet_id_ni(int* iobj, int* data, int* ierr);

/**
 * Get ion temperature, single profile for all thermal, ion species; should be consistent, with ns & Ts
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ti F77NAME(psget_ti)
void psGet_ti(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ion temperature, single profile for all thermal, ion species; should be consistent, with ns & Ts
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ti F77NAME(psset_ti)
void psSet_ti(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ion temperature, single profile for all thermal, ion species; should be consistent, with ns & Ts
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ti F77NAME(psgetrnk_ti)
void psGetRnk_ti(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion temperature, single profile for all thermal, ion species; should be consistent, with ns & Ts
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ti F77NAME(psgetdim_ti)
void psGetDim_ti(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Ti profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ti F77NAME(psget_id_ti)
void psGet_id_ti(int* iobj, int* data, int* ierr);

/**
 * Get ion toroidal angular velocity, single profile for all thermal, ion species; should be consistent, with ns & v_pars.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_omegat F77NAME(psget_omegat)
void psGet_omegat(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ion toroidal angular velocity, single profile for all thermal, ion species; should be consistent, with ns & v_pars.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_omegat F77NAME(psset_omegat)
void psSet_omegat(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ion toroidal angular velocity, single profile for all thermal, ion species; should be consistent, with ns & v_pars.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_omegat F77NAME(psgetrnk_omegat)
void psGetRnk_omegat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion toroidal angular velocity, single profile for all thermal, ion species; should be consistent, with ns & v_pars.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_omegat F77NAME(psgetdim_omegat)
void psGetDim_omegat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for omegat profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_omegat F77NAME(psget_id_omegat)
void psGet_id_omegat(int* iobj, int* data, int* ierr);

/**
 * Get radial electrostatic potential, at zone bdys
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_epot F77NAME(psget_epot)
void psGet_epot(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set radial electrostatic potential, at zone bdys
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_epot F77NAME(psset_epot)
void psSet_epot(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of radial electrostatic potential, at zone bdys
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_epot F77NAME(psgetrnk_epot)
void psGetRnk_epot(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of radial electrostatic potential, at zone bdys
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_epot F77NAME(psgetdim_epot)
void psGetDim_epot(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Epot profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_epot F77NAME(psget_id_epot)
void psGet_id_epot(int* iobj, int* data, int* ierr);

/**
 * Get iota profile (1/q)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_iota F77NAME(psget_iota)
void psGet_iota(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set iota profile (1/q)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_iota F77NAME(psset_iota)
void psSet_iota(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of iota profile (1/q)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_iota F77NAME(psgetrnk_iota)
void psGetRnk_iota(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of iota profile (1/q)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_iota F77NAME(psgetdim_iota)
void psGetDim_iota(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for iota profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_iota F77NAME(psget_id_iota)
void psGet_id_iota(int* iobj, int* data, int* ierr);

/**
 * Get parallel electrical resistivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eta_parallel F77NAME(psget_eta_parallel)
void psGet_eta_parallel(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set parallel electrical resistivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eta_parallel F77NAME(psset_eta_parallel)
void psSet_eta_parallel(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of parallel electrical resistivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_eta_parallel F77NAME(psgetrnk_eta_parallel)
void psGetRnk_eta_parallel(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of parallel electrical resistivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_eta_parallel F77NAME(psgetdim_eta_parallel)
void psGetDim_eta_parallel(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for eta_parallel profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_eta_parallel F77NAME(psget_id_eta_parallel)
void psGet_id_eta_parallel(int* iobj, int* data, int* ierr);

/**
 * Get Ohmic current, i.e. inductive current driven by toroidal loop voltage, in the toroidal direction, Amps/zone:  sum of:, curr_ohmic + curr_bootstrap + RF driven currents +, fast ion driven currents + runaway electron current +, diamagnetic current => curt (total enclosed toroidal, current) in the EQ component.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curr_ohmic F77NAME(psget_curr_ohmic)
void psGet_curr_ohmic(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ohmic current, i.e. inductive current driven by toroidal loop voltage, in the toroidal direction, Amps/zone:  sum of:, curr_ohmic + curr_bootstrap + RF driven currents +, fast ion driven currents + runaway electron current +, diamagnetic current => curt (total enclosed toroidal, current) in the EQ component.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curr_ohmic F77NAME(psset_curr_ohmic)
void psSet_curr_ohmic(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ohmic current, i.e. inductive current driven by toroidal loop voltage, in the toroidal direction, Amps/zone:  sum of:, curr_ohmic + curr_bootstrap + RF driven currents +, fast ion driven currents + runaway electron current +, diamagnetic current => curt (total enclosed toroidal, current) in the EQ component.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curr_ohmic F77NAME(psgetrnk_curr_ohmic)
void psGetRnk_curr_ohmic(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ohmic current, i.e. inductive current driven by toroidal loop voltage, in the toroidal direction, Amps/zone:  sum of:, curr_ohmic + curr_bootstrap + RF driven currents +, fast ion driven currents + runaway electron current +, diamagnetic current => curt (total enclosed toroidal, current) in the EQ component.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curr_ohmic F77NAME(psgetdim_curr_ohmic)
void psGetDim_curr_ohmic(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for curr_ohmic profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curr_ohmic F77NAME(psget_id_curr_ohmic)
void psGet_id_curr_ohmic(int* iobj, int* data, int* ierr);

/**
 * Get Neoclassical bootstrap current
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curr_bootstrap F77NAME(psget_curr_bootstrap)
void psGet_curr_bootstrap(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Neoclassical bootstrap current
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curr_bootstrap F77NAME(psset_curr_bootstrap)
void psSet_curr_bootstrap(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Neoclassical bootstrap current
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curr_bootstrap F77NAME(psgetrnk_curr_bootstrap)
void psGetRnk_curr_bootstrap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Neoclassical bootstrap current
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curr_bootstrap F77NAME(psgetdim_curr_bootstrap)
void psGetDim_curr_bootstrap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for curr_bootstrap profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curr_bootstrap F77NAME(psget_id_curr_bootstrap)
void psGet_id_curr_bootstrap(int* iobj, int* data, int* ierr);

/**
 * Get Ohmic heating of electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pohme F77NAME(psget_pohme)
void psGet_pohme(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ohmic heating of electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pohme F77NAME(psset_pohme)
void psSet_pohme(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ohmic heating of electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pohme F77NAME(psgetrnk_pohme)
void psGetRnk_pohme(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ohmic heating of electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pohme F77NAME(psgetdim_pohme)
void psGetDim_pohme(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pohme profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pohme F77NAME(psget_id_pohme)
void psGet_id_pohme(int* iobj, int* data, int* ierr);

/**
 * Get Ion->Electron heat coupling, +: power flow from ions to electrons, -: power flow from electrons to ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qie F77NAME(psget_qie)
void psGet_qie(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ion->Electron heat coupling, +: power flow from ions to electrons, -: power flow from electrons to ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qie F77NAME(psset_qie)
void psSet_qie(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ion->Electron heat coupling, +: power flow from ions to electrons, -: power flow from electrons to ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qie F77NAME(psgetrnk_qie)
void psGetRnk_qie(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ion->Electron heat coupling, +: power flow from ions to electrons, -: power flow from electrons to ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qie F77NAME(psgetdim_qie)
void psGetDim_qie(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for qie profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_qie F77NAME(psget_id_qie)
void psGet_id_qie(int* iobj, int* data, int* ierr);

/**
 * Get Compressional electron heating
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qcomp_e F77NAME(psget_qcomp_e)
void psGet_qcomp_e(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Compressional electron heating
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qcomp_e F77NAME(psset_qcomp_e)
void psSet_qcomp_e(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Compressional electron heating
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qcomp_e F77NAME(psgetrnk_qcomp_e)
void psGetRnk_qcomp_e(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Compressional electron heating
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qcomp_e F77NAME(psgetdim_qcomp_e)
void psGetDim_qcomp_e(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for qcomp_e profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_qcomp_e F77NAME(psget_id_qcomp_e)
void psGet_id_qcomp_e(int* iobj, int* data, int* ierr);

/**
 * Get Compressional ion heating
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qcomp_i F77NAME(psget_qcomp_i)
void psGet_qcomp_i(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Compressional ion heating
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qcomp_i F77NAME(psset_qcomp_i)
void psSet_qcomp_i(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Compressional ion heating
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qcomp_i F77NAME(psgetrnk_qcomp_i)
void psGetRnk_qcomp_i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Compressional ion heating
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qcomp_i F77NAME(psgetdim_qcomp_i)
void psGetDim_qcomp_i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for qcomp_i profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_qcomp_i F77NAME(psget_id_qcomp_i)
void psGet_id_qcomp_i(int* iobj, int* data, int* ierr);

/**
 * Get rotational energy dissipation (convective)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qrot_conv F77NAME(psget_qrot_conv)
void psGet_qrot_conv(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rotational energy dissipation (convective)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qrot_conv F77NAME(psset_qrot_conv)
void psSet_qrot_conv(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rotational energy dissipation (convective)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qrot_conv F77NAME(psgetrnk_qrot_conv)
void psGetRnk_qrot_conv(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rotational energy dissipation (convective)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qrot_conv F77NAME(psgetdim_qrot_conv)
void psGetDim_qrot_conv(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for qrot_conv profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_qrot_conv F77NAME(psget_id_qrot_conv)
void psGet_id_qrot_conv(int* iobj, int* data, int* ierr);

/**
 * Get rotational energy dissipation (diffusive)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qrot_diff F77NAME(psget_qrot_diff)
void psGet_qrot_diff(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rotational energy dissipation (diffusive)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qrot_diff F77NAME(psset_qrot_diff)
void psSet_qrot_diff(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rotational energy dissipation (diffusive)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qrot_diff F77NAME(psgetrnk_qrot_diff)
void psGetRnk_qrot_diff(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rotational energy dissipation (diffusive)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qrot_diff F77NAME(psgetdim_qrot_diff)
void psGetDim_qrot_diff(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for qrot_diff profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_qrot_diff F77NAME(psget_id_qrot_diff)
void psGet_id_qrot_diff(int* iobj, int* data, int* ierr);

/**
 * Get residuals for electron transport eqn
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_res_te F77NAME(psget_res_te)
void psGet_res_te(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set residuals for electron transport eqn
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_res_te F77NAME(psset_res_te)
void psSet_res_te(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of residuals for electron transport eqn
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_res_te F77NAME(psgetrnk_res_te)
void psGetRnk_res_te(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of residuals for electron transport eqn
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_res_te F77NAME(psgetdim_res_te)
void psGetDim_res_te(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for res_te profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_res_te F77NAME(psget_id_res_te)
void psGet_id_res_te(int* iobj, int* data, int* ierr);

/**
 * Get residuals for ion transport eqn
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_res_ti F77NAME(psget_res_ti)
void psGet_res_ti(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set residuals for ion transport eqn
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_res_ti F77NAME(psset_res_ti)
void psSet_res_ti(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of residuals for ion transport eqn
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_res_ti F77NAME(psgetrnk_res_ti)
void psGetRnk_res_ti(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of residuals for ion transport eqn
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_res_ti F77NAME(psgetdim_res_ti)
void psGetDim_res_ti(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for res_ti profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_res_ti F77NAME(psget_id_res_ti)
void psGet_id_res_ti(int* iobj, int* data, int* ierr);

/**
 * Get rediduals for angular momentum transport eqn
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_res_tq F77NAME(psget_res_tq)
void psGet_res_tq(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rediduals for angular momentum transport eqn
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_res_tq F77NAME(psset_res_tq)
void psSet_res_tq(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rediduals for angular momentum transport eqn
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_res_tq F77NAME(psgetrnk_res_tq)
void psGetRnk_res_tq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rediduals for angular momentum transport eqn
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_res_tq F77NAME(psgetdim_res_tq)
void psGetDim_res_tq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for res_tq profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_res_tq F77NAME(psget_id_res_tq)
void psGet_id_res_tq(int* iobj, int* data, int* ierr);

/**
 * Get residuals for particle transport eqn
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_res_sn F77NAME(psget_res_sn)
void psGet_res_sn(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set residuals for particle transport eqn
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_res_sn F77NAME(psset_res_sn)
void psSet_res_sn(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of residuals for particle transport eqn
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_res_sn F77NAME(psgetrnk_res_sn)
void psGetRnk_res_sn(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of residuals for particle transport eqn
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_res_sn F77NAME(psgetdim_res_sn)
void psGetDim_res_sn(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for res_sn profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_res_sn F77NAME(psget_id_res_sn)
void psGet_id_res_sn(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for res_sn profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_res_sn F77NAME(psgetrnk_id_res_sn)
void psGetRnk_id_res_sn(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for res_sn profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_res_sn F77NAME(psgetdim_id_res_sn)
void psGetDim_id_res_sn(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron transport (loss) power
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pe_trans F77NAME(psget_pe_trans)
void psGet_pe_trans(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set electron transport (loss) power
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pe_trans F77NAME(psset_pe_trans)
void psSet_pe_trans(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of electron transport (loss) power
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pe_trans F77NAME(psgetrnk_pe_trans)
void psGetRnk_pe_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron transport (loss) power
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pe_trans F77NAME(psgetdim_pe_trans)
void psGetDim_pe_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pe_trans profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pe_trans F77NAME(psget_id_pe_trans)
void psGet_id_pe_trans(int* iobj, int* data, int* ierr);

/**
 * Get ion transport (loss) power
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pi_trans F77NAME(psget_pi_trans)
void psGet_pi_trans(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ion transport (loss) power
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pi_trans F77NAME(psset_pi_trans)
void psSet_pi_trans(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ion transport (loss) power
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pi_trans F77NAME(psgetrnk_pi_trans)
void psGetRnk_pi_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion transport (loss) power
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pi_trans F77NAME(psgetdim_pi_trans)
void psGetDim_pi_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pi_trans profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pi_trans F77NAME(psget_id_pi_trans)
void psGet_id_pi_trans(int* iobj, int* data, int* ierr);

/**
 * Get angular momentum transport (loss), toroidal angular momentum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tq_trans F77NAME(psget_tq_trans)
void psGet_tq_trans(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set angular momentum transport (loss), toroidal angular momentum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tq_trans F77NAME(psset_tq_trans)
void psSet_tq_trans(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of angular momentum transport (loss), toroidal angular momentum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tq_trans F77NAME(psgetrnk_tq_trans)
void psGetRnk_tq_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of angular momentum transport (loss), toroidal angular momentum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tq_trans F77NAME(psgetdim_tq_trans)
void psGetDim_tq_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tq_trans profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tq_trans F77NAME(psget_id_tq_trans)
void psGet_id_tq_trans(int* iobj, int* data, int* ierr);

/**
 * Get particle transport (loss), electrons & thermal ion species
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sn_trans F77NAME(psget_sn_trans)
void psGet_sn_trans(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set particle transport (loss), electrons & thermal ion species
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sn_trans F77NAME(psset_sn_trans)
void psSet_sn_trans(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of particle transport (loss), electrons & thermal ion species
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sn_trans F77NAME(psgetrnk_sn_trans)
void psGetRnk_sn_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of particle transport (loss), electrons & thermal ion species
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sn_trans F77NAME(psgetdim_sn_trans)
void psGetDim_sn_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sn_trans profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sn_trans F77NAME(psget_id_sn_trans)
void psGet_id_sn_trans(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sn_trans profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sn_trans F77NAME(psgetrnk_id_sn_trans)
void psGetRnk_id_sn_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sn_trans profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sn_trans F77NAME(psgetdim_id_sn_trans)
void psGetDim_id_sn_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron transport
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pe_transcat F77NAME(psget_pe_transcat)
void psGet_pe_transcat(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set electron transport
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pe_transcat F77NAME(psset_pe_transcat)
void psSet_pe_transcat(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of electron transport
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pe_transcat F77NAME(psgetrnk_pe_transcat)
void psGetRnk_pe_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron transport
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pe_transcat F77NAME(psgetdim_pe_transcat)
void psGetDim_pe_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for pe_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pe_transcat F77NAME(psget_id_pe_transcat)
void psGet_id_pe_transcat(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for pe_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_pe_transcat F77NAME(psgetrnk_id_pe_transcat)
void psGetRnk_id_pe_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for pe_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_pe_transcat F77NAME(psgetdim_id_pe_transcat)
void psGetDim_id_pe_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ion transport
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pi_transcat F77NAME(psget_pi_transcat)
void psGet_pi_transcat(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ion transport
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pi_transcat F77NAME(psset_pi_transcat)
void psSet_pi_transcat(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ion transport
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pi_transcat F77NAME(psgetrnk_pi_transcat)
void psGetRnk_pi_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion transport
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pi_transcat F77NAME(psgetdim_pi_transcat)
void psGetDim_pi_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for pi_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pi_transcat F77NAME(psget_id_pi_transcat)
void psGet_id_pi_transcat(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for pi_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_pi_transcat F77NAME(psgetrnk_id_pi_transcat)
void psGetRnk_id_pi_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for pi_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_pi_transcat F77NAME(psgetdim_id_pi_transcat)
void psGetDim_id_pi_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get toroidal angular momentum transport
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tq_transcat F77NAME(psget_tq_transcat)
void psGet_tq_transcat(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set toroidal angular momentum transport
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tq_transcat F77NAME(psset_tq_transcat)
void psSet_tq_transcat(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of toroidal angular momentum transport
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tq_transcat F77NAME(psgetrnk_tq_transcat)
void psGetRnk_tq_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of toroidal angular momentum transport
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tq_transcat F77NAME(psgetdim_tq_transcat)
void psGetDim_tq_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for tq_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tq_transcat F77NAME(psget_id_tq_transcat)
void psGet_id_tq_transcat(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for tq_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_tq_transcat F77NAME(psgetrnk_id_tq_transcat)
void psGetRnk_id_tq_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for tq_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_tq_transcat F77NAME(psgetdim_id_tq_transcat)
void psGetDim_id_tq_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get species transport
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sn_transcat F77NAME(psget_sn_transcat)
void psGet_sn_transcat(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set species transport
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sn_transcat F77NAME(psset_sn_transcat)
void psSet_sn_transcat(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of species transport
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sn_transcat F77NAME(psgetrnk_sn_transcat)
void psGetRnk_sn_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of species transport
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sn_transcat F77NAME(psgetdim_sn_transcat)
void psGetDim_sn_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sn_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sn_transcat F77NAME(psget_id_sn_transcat)
void psGet_id_sn_transcat(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sn_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sn_transcat F77NAME(psgetrnk_id_sn_transcat)
void psGetRnk_id_sn_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sn_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sn_transcat F77NAME(psgetdim_id_sn_transcat)
void psGetDim_id_sn_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron energy radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vee_trans F77NAME(psget_vee_trans)
void psGet_vee_trans(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set electron energy radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vee_trans F77NAME(psset_vee_trans)
void psSet_vee_trans(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of electron energy radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vee_trans F77NAME(psgetrnk_vee_trans)
void psGetRnk_vee_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron energy radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vee_trans F77NAME(psgetdim_vee_trans)
void psGetDim_vee_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for vee_trans profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vee_trans F77NAME(psget_id_vee_trans)
void psGet_id_vee_trans(int* iobj, int* data, int* ierr);

/**
 * Get ion energy radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vie_trans F77NAME(psget_vie_trans)
void psGet_vie_trans(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ion energy radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vie_trans F77NAME(psset_vie_trans)
void psSet_vie_trans(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ion energy radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vie_trans F77NAME(psgetrnk_vie_trans)
void psGetRnk_vie_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion energy radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vie_trans F77NAME(psgetdim_vie_trans)
void psGetDim_vie_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for vie_trans profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vie_trans F77NAME(psget_id_vie_trans)
void psGet_id_vie_trans(int* iobj, int* data, int* ierr);

/**
 * Get angular momentum radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vmo_trans F77NAME(psget_vmo_trans)
void psGet_vmo_trans(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set angular momentum radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vmo_trans F77NAME(psset_vmo_trans)
void psSet_vmo_trans(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of angular momentum radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vmo_trans F77NAME(psgetrnk_vmo_trans)
void psGetRnk_vmo_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of angular momentum radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vmo_trans F77NAME(psgetdim_vmo_trans)
void psGetDim_vmo_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for vmo_trans profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vmo_trans F77NAME(psget_id_vmo_trans)
void psGet_id_vmo_trans(int* iobj, int* data, int* ierr);

/**
 * Get specie radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vn_trans F77NAME(psget_vn_trans)
void psGet_vn_trans(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set specie radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vn_trans F77NAME(psset_vn_trans)
void psSet_vn_trans(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of specie radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vn_trans F77NAME(psgetrnk_vn_trans)
void psGetRnk_vn_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vn_trans F77NAME(psgetdim_vn_trans)
void psGetDim_vn_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for vn_trans profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vn_trans F77NAME(psget_id_vn_trans)
void psGet_id_vn_trans(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for vn_trans profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_vn_trans F77NAME(psgetrnk_id_vn_trans)
void psGetRnk_id_vn_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for vn_trans profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_vn_trans F77NAME(psgetdim_id_vn_trans)
void psGetDim_id_vn_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron thermal diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_trans F77NAME(psget_chie_trans)
void psGet_chie_trans(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set electron thermal diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_trans F77NAME(psset_chie_trans)
void psSet_chie_trans(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of electron thermal diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_trans F77NAME(psgetrnk_chie_trans)
void psGetRnk_chie_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron thermal diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_trans F77NAME(psgetdim_chie_trans)
void psGetDim_chie_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_trans profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_trans F77NAME(psget_id_chie_trans)
void psGet_id_chie_trans(int* iobj, int* data, int* ierr);

/**
 * Get ion thermal diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_trans F77NAME(psget_chii_trans)
void psGet_chii_trans(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ion thermal diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_trans F77NAME(psset_chii_trans)
void psSet_chii_trans(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ion thermal diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_trans F77NAME(psgetrnk_chii_trans)
void psGetRnk_chii_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion thermal diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_trans F77NAME(psgetdim_chii_trans)
void psGetDim_chii_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_trans profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_trans F77NAME(psget_id_chii_trans)
void psGet_id_chii_trans(int* iobj, int* data, int* ierr);

/**
 * Get angular momentum diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chimo_trans F77NAME(psget_chimo_trans)
void psGet_chimo_trans(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set angular momentum diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chimo_trans F77NAME(psset_chimo_trans)
void psSet_chimo_trans(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of angular momentum diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chimo_trans F77NAME(psgetrnk_chimo_trans)
void psGetRnk_chimo_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of angular momentum diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chimo_trans F77NAME(psgetdim_chimo_trans)
void psGetDim_chimo_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chimo_trans profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chimo_trans F77NAME(psget_id_chimo_trans)
void psGet_id_chimo_trans(int* iobj, int* data, int* ierr);

/**
 * Get specie ptcl diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_diff_trans F77NAME(psget_diff_trans)
void psGet_diff_trans(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set specie ptcl diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_diff_trans F77NAME(psset_diff_trans)
void psSet_diff_trans(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of specie ptcl diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_diff_trans F77NAME(psgetrnk_diff_trans)
void psGetRnk_diff_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie ptcl diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_diff_trans F77NAME(psgetdim_diff_trans)
void psGetDim_diff_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for diff_trans profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_diff_trans F77NAME(psget_id_diff_trans)
void psGet_id_diff_trans(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for diff_trans profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_diff_trans F77NAME(psgetrnk_id_diff_trans)
void psGetRnk_id_diff_trans(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for diff_trans profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_diff_trans F77NAME(psgetdim_id_diff_trans)
void psGetDim_id_diff_trans(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te (electron energy advection) forward upwind fraction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_upwind_pfrac_te F77NAME(psget_upwind_pfrac_te)
void psGet_upwind_pfrac_te(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te (electron energy advection) forward upwind fraction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_upwind_pfrac_te F77NAME(psset_upwind_pfrac_te)
void psSet_upwind_pfrac_te(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te (electron energy advection) forward upwind fraction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_upwind_pfrac_te F77NAME(psgetrnk_upwind_pfrac_te)
void psGetRnk_upwind_pfrac_te(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te (electron energy advection) forward upwind fraction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_upwind_pfrac_te F77NAME(psgetdim_upwind_pfrac_te)
void psGetDim_upwind_pfrac_te(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for upwind_pfrac_Te profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_upwind_pfrac_te F77NAME(psget_id_upwind_pfrac_te)
void psGet_id_upwind_pfrac_te(int* iobj, int* data, int* ierr);

/**
 * Get Ti (ion energy advection) forward upwind fraction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_upwind_pfrac_ti F77NAME(psget_upwind_pfrac_ti)
void psGet_upwind_pfrac_ti(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti (ion energy advection) forward upwind fraction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_upwind_pfrac_ti F77NAME(psset_upwind_pfrac_ti)
void psSet_upwind_pfrac_ti(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti (ion energy advection) forward upwind fraction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_upwind_pfrac_ti F77NAME(psgetrnk_upwind_pfrac_ti)
void psGetRnk_upwind_pfrac_ti(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti (ion energy advection) forward upwind fraction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_upwind_pfrac_ti F77NAME(psgetdim_upwind_pfrac_ti)
void psGetDim_upwind_pfrac_ti(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for upwind_pfrac_Ti profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_upwind_pfrac_ti F77NAME(psget_id_upwind_pfrac_ti)
void psGet_id_upwind_pfrac_ti(int* iobj, int* data, int* ierr);

/**
 * Get omega (ang. velocity) forward upwind fraction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_upwind_pfrac_omega F77NAME(psget_upwind_pfrac_omega)
void psGet_upwind_pfrac_omega(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set omega (ang. velocity) forward upwind fraction
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_upwind_pfrac_omega F77NAME(psset_upwind_pfrac_omega)
void psSet_upwind_pfrac_omega(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of omega (ang. velocity) forward upwind fraction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_upwind_pfrac_omega F77NAME(psgetrnk_upwind_pfrac_omega)
void psGetRnk_upwind_pfrac_omega(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of omega (ang. velocity) forward upwind fraction
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_upwind_pfrac_omega F77NAME(psgetdim_upwind_pfrac_omega)
void psGetDim_upwind_pfrac_omega(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for upwind_pfrac_omega profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_upwind_pfrac_omega F77NAME(psget_id_upwind_pfrac_omega)
void psGet_id_upwind_pfrac_omega(int* iobj, int* data, int* ierr);

/**
 * Get specie density forward upwind fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_upwind_pfrac_ns F77NAME(psget_upwind_pfrac_ns)
void psGet_upwind_pfrac_ns(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set specie density forward upwind fractions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_upwind_pfrac_ns F77NAME(psset_upwind_pfrac_ns)
void psSet_upwind_pfrac_ns(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of specie density forward upwind fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_upwind_pfrac_ns F77NAME(psgetrnk_upwind_pfrac_ns)
void psGetRnk_upwind_pfrac_ns(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie density forward upwind fractions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_upwind_pfrac_ns F77NAME(psgetdim_upwind_pfrac_ns)
void psGetDim_upwind_pfrac_ns(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for upwind_pfrac_ns profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_upwind_pfrac_ns F77NAME(psget_id_upwind_pfrac_ns)
void psGet_id_upwind_pfrac_ns(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for upwind_pfrac_ns profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_upwind_pfrac_ns F77NAME(psgetrnk_id_upwind_pfrac_ns)
void psGetRnk_id_upwind_pfrac_ns(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for upwind_pfrac_ns profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_upwind_pfrac_ns F77NAME(psgetdim_id_upwind_pfrac_ns)
void psGetDim_id_upwind_pfrac_ns(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Electron energy radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vee_transcat F77NAME(psget_vee_transcat)
void psGet_vee_transcat(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set Electron energy radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vee_transcat F77NAME(psset_vee_transcat)
void psSet_vee_transcat(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of Electron energy radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vee_transcat F77NAME(psgetrnk_vee_transcat)
void psGetRnk_vee_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Electron energy radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vee_transcat F77NAME(psgetdim_vee_transcat)
void psGetDim_vee_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for vee_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vee_transcat F77NAME(psget_id_vee_transcat)
void psGet_id_vee_transcat(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for vee_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_vee_transcat F77NAME(psgetrnk_id_vee_transcat)
void psGetRnk_id_vee_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for vee_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_vee_transcat F77NAME(psgetdim_id_vee_transcat)
void psGetDim_id_vee_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Ion energy radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vie_transcat F77NAME(psget_vie_transcat)
void psGet_vie_transcat(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set Ion energy radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vie_transcat F77NAME(psset_vie_transcat)
void psSet_vie_transcat(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of Ion energy radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vie_transcat F77NAME(psgetrnk_vie_transcat)
void psGetRnk_vie_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ion energy radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vie_transcat F77NAME(psgetdim_vie_transcat)
void psGetDim_vie_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for vie_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vie_transcat F77NAME(psget_id_vie_transcat)
void psGet_id_vie_transcat(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for vie_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_vie_transcat F77NAME(psgetrnk_id_vie_transcat)
void psGetRnk_id_vie_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for vie_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_vie_transcat F77NAME(psgetdim_id_vie_transcat)
void psGetDim_id_vie_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Angular momentum radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vmo_transcat F77NAME(psget_vmo_transcat)
void psGet_vmo_transcat(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set Angular momentum radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vmo_transcat F77NAME(psset_vmo_transcat)
void psSet_vmo_transcat(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of Angular momentum radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vmo_transcat F77NAME(psgetrnk_vmo_transcat)
void psGetRnk_vmo_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Angular momentum radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vmo_transcat F77NAME(psgetdim_vmo_transcat)
void psGetDim_vmo_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for vmo_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vmo_transcat F77NAME(psget_id_vmo_transcat)
void psGet_id_vmo_transcat(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for vmo_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_vmo_transcat F77NAME(psgetrnk_id_vmo_transcat)
void psGetRnk_id_vmo_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for vmo_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_vmo_transcat F77NAME(psgetdim_id_vmo_transcat)
void psGetDim_id_vmo_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get specie radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vn_transcat F77NAME(psget_vn_transcat)
void psGet_vn_transcat(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set specie radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vn_transcat F77NAME(psset_vn_transcat)
void psSet_vn_transcat(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of specie radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vn_transcat F77NAME(psgetrnk_vn_transcat)
void psGetRnk_vn_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vn_transcat F77NAME(psgetdim_vn_transcat)
void psGetDim_vn_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for vn_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vn_transcat F77NAME(psget_id_vn_transcat)
void psGet_id_vn_transcat(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for vn_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_vn_transcat F77NAME(psgetrnk_id_vn_transcat)
void psGetRnk_id_vn_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for vn_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_vn_transcat F77NAME(psgetdim_id_vn_transcat)
void psGetDim_id_vn_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Electron energy diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_transcat F77NAME(psget_chie_transcat)
void psGet_chie_transcat(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set Electron energy diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_transcat F77NAME(psset_chie_transcat)
void psSet_chie_transcat(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of Electron energy diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_transcat F77NAME(psgetrnk_chie_transcat)
void psGetRnk_chie_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Electron energy diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_transcat F77NAME(psgetdim_chie_transcat)
void psGetDim_chie_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for chie_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_transcat F77NAME(psget_id_chie_transcat)
void psGet_id_chie_transcat(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for chie_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_chie_transcat F77NAME(psgetrnk_id_chie_transcat)
void psGetRnk_id_chie_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for chie_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_chie_transcat F77NAME(psgetdim_id_chie_transcat)
void psGetDim_id_chie_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Ion energy diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_transcat F77NAME(psget_chii_transcat)
void psGet_chii_transcat(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set Ion energy diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_transcat F77NAME(psset_chii_transcat)
void psSet_chii_transcat(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of Ion energy diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_transcat F77NAME(psgetrnk_chii_transcat)
void psGetRnk_chii_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ion energy diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_transcat F77NAME(psgetdim_chii_transcat)
void psGetDim_chii_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for chii_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_transcat F77NAME(psget_id_chii_transcat)
void psGet_id_chii_transcat(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for chii_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_chii_transcat F77NAME(psgetrnk_id_chii_transcat)
void psGetRnk_id_chii_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for chii_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_chii_transcat F77NAME(psgetdim_id_chii_transcat)
void psGetDim_id_chii_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Angular momentum diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chimo_transcat F77NAME(psget_chimo_transcat)
void psGet_chimo_transcat(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set Angular momentum diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chimo_transcat F77NAME(psset_chimo_transcat)
void psSet_chimo_transcat(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of Angular momentum diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chimo_transcat F77NAME(psgetrnk_chimo_transcat)
void psGetRnk_chimo_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Angular momentum diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chimo_transcat F77NAME(psgetdim_chimo_transcat)
void psGetDim_chimo_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for chimo_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chimo_transcat F77NAME(psget_id_chimo_transcat)
void psGet_id_chimo_transcat(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for chimo_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_chimo_transcat F77NAME(psgetrnk_id_chimo_transcat)
void psGetRnk_id_chimo_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for chimo_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_chimo_transcat F77NAME(psgetdim_id_chimo_transcat)
void psGetDim_id_chimo_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get specie diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_diff_transcat F77NAME(psget_diff_transcat)
void psGet_diff_transcat(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set specie diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_diff_transcat F77NAME(psset_diff_transcat)
void psSet_diff_transcat(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of specie diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_diff_transcat F77NAME(psgetrnk_diff_transcat)
void psGetRnk_diff_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of specie diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_diff_transcat F77NAME(psgetdim_diff_transcat)
void psGetDim_diff_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for diff_transcat profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_diff_transcat F77NAME(psget_id_diff_transcat)
void psGet_id_diff_transcat(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for diff_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_diff_transcat F77NAME(psgetrnk_id_diff_transcat)
void psGetRnk_id_diff_transcat(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for diff_transcat profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_diff_transcat F77NAME(psgetdim_id_diff_transcat)
void psGetDim_id_diff_transcat(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_geo F77NAME(psget_r_geo)
void psGet_r_geo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_geo F77NAME(psset_r_geo)
void psSet_r_geo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_geo F77NAME(psgetrnk_r_geo)
void psGetRnk_r_geo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_geo F77NAME(psgetdim_r_geo)
void psGetDim_r_geo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for R_geo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_r_geo F77NAME(psget_id_r_geo)
void psGet_id_r_geo(int* iobj, int* data, int* ierr);

/**
 * Get flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_geo F77NAME(psget_z_geo)
void psGet_z_geo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_geo F77NAME(psset_z_geo)
void psSet_z_geo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_geo F77NAME(psgetrnk_z_geo)
void psGetRnk_z_geo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_geo F77NAME(psgetdim_z_geo)
void psGetDim_z_geo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Z_geo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_z_geo F77NAME(psget_id_z_geo)
void psGet_id_z_geo(int* iobj, int* data, int* ierr);

/**
 * Get enclosed volume
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_vol F77NAME(psget_vol)
void psGet_vol(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set enclosed volume
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_vol F77NAME(psset_vol)
void psSet_vol(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of enclosed volume
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_vol F77NAME(psgetrnk_vol)
void psGetRnk_vol(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of enclosed volume
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_vol F77NAME(psgetdim_vol)
void psGetDim_vol(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for vol profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_vol F77NAME(psget_id_vol)
void psGet_id_vol(int* iobj, int* data, int* ierr);

/**
 * Get enclosed area
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_area F77NAME(psget_area)
void psGet_area(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set enclosed area
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_area F77NAME(psset_area)
void psSet_area(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of enclosed area
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_area F77NAME(psgetrnk_area)
void psGetRnk_area(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of enclosed area
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_area F77NAME(psgetdim_area)
void psGetDim_area(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for area profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_area F77NAME(psget_id_area)
void psGet_id_area(int* iobj, int* data, int* ierr);

/**
 * Get area of flux surfaces
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_surf F77NAME(psget_surf)
void psGet_surf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set area of flux surfaces
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_surf F77NAME(psset_surf)
void psSet_surf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of area of flux surfaces
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_surf F77NAME(psgetrnk_surf)
void psGetRnk_surf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of area of flux surfaces
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_surf F77NAME(psgetdim_surf)
void psGetDim_surf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for surf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_surf F77NAME(psget_id_surf)
void psGet_id_surf(int* iobj, int* data, int* ierr);

/**
 * Get poloidal path length
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_lpol F77NAME(psget_lpol)
void psGet_lpol(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set poloidal path length
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_lpol F77NAME(psset_lpol)
void psSet_lpol(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of poloidal path length
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_lpol F77NAME(psgetrnk_lpol)
void psGetRnk_lpol(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of poloidal path length
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_lpol F77NAME(psgetdim_lpol)
void psGetDim_lpol(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Lpol profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_lpol F77NAME(psget_id_lpol)
void psGet_id_lpol(int* iobj, int* data, int* ierr);

/**
 * Get equilibrium scalar pressure
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_p_eq F77NAME(psget_p_eq)
void psGet_p_eq(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set equilibrium scalar pressure
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_p_eq F77NAME(psset_p_eq)
void psSet_p_eq(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of equilibrium scalar pressure
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_p_eq F77NAME(psgetrnk_p_eq)
void psGetRnk_p_eq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of equilibrium scalar pressure
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_p_eq F77NAME(psgetdim_p_eq)
void psGetDim_p_eq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for P_eq profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_p_eq F77NAME(psget_id_p_eq)
void psGet_id_p_eq(int* iobj, int* data, int* ierr);

/**
 * Get equilibrium q profile
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_q_eq F77NAME(psget_q_eq)
void psGet_q_eq(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set equilibrium q profile
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_q_eq F77NAME(psset_q_eq)
void psSet_q_eq(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of equilibrium q profile
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_q_eq F77NAME(psgetrnk_q_eq)
void psGetRnk_q_eq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of equilibrium q profile
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_q_eq F77NAME(psgetdim_q_eq)
void psGetDim_q_eq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for q_eq profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_q_eq F77NAME(psget_id_q_eq)
void psGet_id_q_eq(int* iobj, int* data, int* ierr);

/**
 * Get equilibrium R*|B_phi|, By convention this profile is always positive; direction, of B_phi is taken from element kccw_Bphi:, B_phi = kccw_Bphi*g/R
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_g_eq F77NAME(psget_g_eq)
void psGet_g_eq(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set equilibrium R*|B_phi|, By convention this profile is always positive; direction, of B_phi is taken from element kccw_Bphi:, B_phi = kccw_Bphi*g/R
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_g_eq F77NAME(psset_g_eq)
void psSet_g_eq(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of equilibrium R*|B_phi|, By convention this profile is always positive; direction, of B_phi is taken from element kccw_Bphi:, B_phi = kccw_Bphi*g/R
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_g_eq F77NAME(psgetrnk_g_eq)
void psGetRnk_g_eq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of equilibrium R*|B_phi|, By convention this profile is always positive; direction, of B_phi is taken from element kccw_Bphi:, B_phi = kccw_Bphi*g/R
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_g_eq F77NAME(psgetdim_g_eq)
void psGetDim_g_eq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for g_eq profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_g_eq F77NAME(psget_id_g_eq)
void psGet_id_g_eq(int* iobj, int* data, int* ierr);

/**
 * Get toroidal flux vs. rho, By convention, this profile always positive; 0 on axis., See kccw_Bphi for specification of direction of toroidal field.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_phit F77NAME(psget_phit)
void psGet_phit(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set toroidal flux vs. rho, By convention, this profile always positive; 0 on axis., See kccw_Bphi for specification of direction of toroidal field.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_phit F77NAME(psset_phit)
void psSet_phit(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of toroidal flux vs. rho, By convention, this profile always positive; 0 on axis., See kccw_Bphi for specification of direction of toroidal field.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_phit F77NAME(psgetrnk_phit)
void psGetRnk_phit(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of toroidal flux vs. rho, By convention, this profile always positive; 0 on axis., See kccw_Bphi for specification of direction of toroidal field.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_phit F77NAME(psgetdim_phit)
void psGetDim_phit(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for phit profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_phit F77NAME(psget_id_phit)
void psGet_id_phit(int* iobj, int* data, int* ierr);

/**
 * Get poloidal flux vs. rho, By convention, this profile always positive; 0 on axis., -- see kccw_Jphi; see also psi_to_machine_axis, for specification of direction (sign) of toroidal current and, hence the poloidal magnetic field.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_psipol F77NAME(psget_psipol)
void psGet_psipol(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set poloidal flux vs. rho, By convention, this profile always positive; 0 on axis., -- see kccw_Jphi; see also psi_to_machine_axis, for specification of direction (sign) of toroidal current and, hence the poloidal magnetic field.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_psipol F77NAME(psset_psipol)
void psSet_psipol(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of poloidal flux vs. rho, By convention, this profile always positive; 0 on axis., -- see kccw_Jphi; see also psi_to_machine_axis, for specification of direction (sign) of toroidal current and, hence the poloidal magnetic field.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_psipol F77NAME(psgetrnk_psipol)
void psGetRnk_psipol(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of poloidal flux vs. rho, By convention, this profile always positive; 0 on axis., -- see kccw_Jphi; see also psi_to_machine_axis, for specification of direction (sign) of toroidal current and, hence the poloidal magnetic field.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_psipol F77NAME(psgetdim_psipol)
void psGetDim_psipol(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for psipol profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_psipol F77NAME(psget_id_psipol)
void psGet_id_psipol(int* iobj, int* data, int* ierr);

/**
 * Get <J.B>, Parallel current * mod(B) -- note sign convention:, Local positive values indicate local current flow, in the direction of the main toroidal current; i.e. actually, kccw_Jphi * kccw_Bphi * <J.B> is stored.  So, even if the, main toroidal current and the toroidal field are anti-parallel,, jdotb is generally positive, but there can be localized regions, of negative values, usually near the plasma edge.', "From a parallel Ampere's Law expression, <J.B> can be expressed", 'as a combination of derivatives of toroidal current and toroidal, field functions curt(rho) and g(rho):, <J.B> = 2pi*[g*d(curt)/drho-curt*dg/drho]/(dVol/drho)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_jdotb F77NAME(psget_jdotb)
void psGet_jdotb(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <J.B>, Parallel current * mod(B) -- note sign convention:, Local positive values indicate local current flow, in the direction of the main toroidal current; i.e. actually, kccw_Jphi * kccw_Bphi * <J.B> is stored.  So, even if the, main toroidal current and the toroidal field are anti-parallel,, jdotb is generally positive, but there can be localized regions, of negative values, usually near the plasma edge.', "From a parallel Ampere's Law expression, <J.B> can be expressed", 'as a combination of derivatives of toroidal current and toroidal, field functions curt(rho) and g(rho):, <J.B> = 2pi*[g*d(curt)/drho-curt*dg/drho]/(dVol/drho)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_jdotb F77NAME(psset_jdotb)
void psSet_jdotb(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <J.B>, Parallel current * mod(B) -- note sign convention:, Local positive values indicate local current flow, in the direction of the main toroidal current; i.e. actually, kccw_Jphi * kccw_Bphi * <J.B> is stored.  So, even if the, main toroidal current and the toroidal field are anti-parallel,, jdotb is generally positive, but there can be localized regions, of negative values, usually near the plasma edge.', "From a parallel Ampere's Law expression, <J.B> can be expressed", 'as a combination of derivatives of toroidal current and toroidal, field functions curt(rho) and g(rho):, <J.B> = 2pi*[g*d(curt)/drho-curt*dg/drho]/(dVol/drho)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_jdotb F77NAME(psgetrnk_jdotb)
void psGetRnk_jdotb(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <J.B>, Parallel current * mod(B) -- note sign convention:, Local positive values indicate local current flow, in the direction of the main toroidal current; i.e. actually, kccw_Jphi * kccw_Bphi * <J.B> is stored.  So, even if the, main toroidal current and the toroidal field are anti-parallel,, jdotb is generally positive, but there can be localized regions, of negative values, usually near the plasma edge.', "From a parallel Ampere's Law expression, <J.B> can be expressed", 'as a combination of derivatives of toroidal current and toroidal, field functions curt(rho) and g(rho):, <J.B> = 2pi*[g*d(curt)/drho-curt*dg/drho]/(dVol/drho)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_jdotb F77NAME(psgetdim_jdotb)
void psGetDim_jdotb(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for jdotb profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_jdotb F77NAME(psget_id_jdotb)
void psGet_id_jdotb(int* iobj, int* data, int* ierr);

/**
 * Get total enclosed toroidal current, this includes <j.B> contributions and <j x B> contributions and, is related to the poloidal field:, mu0*I(rho) = rho*phit(nrho_eq)/(q(rho)*2*pi*pi), * grho2r2i(rho) * (dVol/drho)', "(From Ampere's Law, mu0*I_phi = loop integral (B_pol*dl)", '= loop integral (dl * grad(psi)/R), = rho*phit(nrho_eq)/(q(rho)*pi) *, loop integral (dl * grad(rho)/R), (2*pi) * loop integral (dl * grad(rho)/rho), = loop integral (dl * 2*pi*R/grad(rho) * grad(rho)**2/R**2), = grho2r2i(rho) * dVol/drho, derivation depends on the definition of the radial coord.:, rho = sqrt(phit(rho)/phit(rho=1)), curt(nrho_eq) gives the total current, >0 by convention;, see kccw_Jphi, +/-1, for direction of toroidal current.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curt F77NAME(psget_curt)
void psGet_curt(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set total enclosed toroidal current, this includes <j.B> contributions and <j x B> contributions and, is related to the poloidal field:, mu0*I(rho) = rho*phit(nrho_eq)/(q(rho)*2*pi*pi), * grho2r2i(rho) * (dVol/drho)', "(From Ampere's Law, mu0*I_phi = loop integral (B_pol*dl)", '= loop integral (dl * grad(psi)/R), = rho*phit(nrho_eq)/(q(rho)*pi) *, loop integral (dl * grad(rho)/R), (2*pi) * loop integral (dl * grad(rho)/rho), = loop integral (dl * 2*pi*R/grad(rho) * grad(rho)**2/R**2), = grho2r2i(rho) * dVol/drho, derivation depends on the definition of the radial coord.:, rho = sqrt(phit(rho)/phit(rho=1)), curt(nrho_eq) gives the total current, >0 by convention;, see kccw_Jphi, +/-1, for direction of toroidal current.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curt F77NAME(psset_curt)
void psSet_curt(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of total enclosed toroidal current, this includes <j.B> contributions and <j x B> contributions and, is related to the poloidal field:, mu0*I(rho) = rho*phit(nrho_eq)/(q(rho)*2*pi*pi), * grho2r2i(rho) * (dVol/drho)', "(From Ampere's Law, mu0*I_phi = loop integral (B_pol*dl)", '= loop integral (dl * grad(psi)/R), = rho*phit(nrho_eq)/(q(rho)*pi) *, loop integral (dl * grad(rho)/R), (2*pi) * loop integral (dl * grad(rho)/rho), = loop integral (dl * 2*pi*R/grad(rho) * grad(rho)**2/R**2), = grho2r2i(rho) * dVol/drho, derivation depends on the definition of the radial coord.:, rho = sqrt(phit(rho)/phit(rho=1)), curt(nrho_eq) gives the total current, >0 by convention;, see kccw_Jphi, +/-1, for direction of toroidal current.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curt F77NAME(psgetrnk_curt)
void psGetRnk_curt(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of total enclosed toroidal current, this includes <j.B> contributions and <j x B> contributions and, is related to the poloidal field:, mu0*I(rho) = rho*phit(nrho_eq)/(q(rho)*2*pi*pi), * grho2r2i(rho) * (dVol/drho)', "(From Ampere's Law, mu0*I_phi = loop integral (B_pol*dl)", '= loop integral (dl * grad(psi)/R), = rho*phit(nrho_eq)/(q(rho)*pi) *, loop integral (dl * grad(rho)/R), (2*pi) * loop integral (dl * grad(rho)/rho), = loop integral (dl * 2*pi*R/grad(rho) * grad(rho)**2/R**2), = grho2r2i(rho) * dVol/drho, derivation depends on the definition of the radial coord.:, rho = sqrt(phit(rho)/phit(rho=1)), curt(nrho_eq) gives the total current, >0 by convention;, see kccw_Jphi, +/-1, for direction of toroidal current.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curt F77NAME(psgetdim_curt)
void psGetDim_curt(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for curt profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curt F77NAME(psget_id_curt)
void psGet_id_curt(int* iobj, int* data, int* ierr);

/**
 * Get R0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r0_momeq F77NAME(psget_r0_momeq)
void psGet_r0_momeq(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set R0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r0_momeq F77NAME(psset_r0_momeq)
void psSet_r0_momeq(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of R0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r0_momeq F77NAME(psgetrnk_r0_momeq)
void psGetRnk_r0_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r0_momeq F77NAME(psgetdim_r0_momeq)
void psGetDim_r0_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for R0_momeq profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_r0_momeq F77NAME(psget_id_r0_momeq)
void psGet_id_r0_momeq(int* iobj, int* data, int* ierr);

/**
 * Get Z0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z0_momeq F77NAME(psget_z0_momeq)
void psGet_z0_momeq(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Z0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z0_momeq F77NAME(psset_z0_momeq)
void psSet_z0_momeq(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Z0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z0_momeq F77NAME(psgetrnk_z0_momeq)
void psGetRnk_z0_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Z0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z0_momeq F77NAME(psgetdim_z0_momeq)
void psGetDim_z0_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Z0_momeq profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_z0_momeq F77NAME(psget_id_z0_momeq)
void psGet_id_z0_momeq(int* iobj, int* data, int* ierr);

/**
 * Get scaled R cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_xrjcos_momeq F77NAME(psget_xrjcos_momeq)
void psGet_xrjcos_momeq(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set scaled R cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_xrjcos_momeq F77NAME(psset_xrjcos_momeq)
void psSet_xrjcos_momeq(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of scaled R cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_xrjcos_momeq F77NAME(psgetrnk_xrjcos_momeq)
void psGetRnk_xrjcos_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of scaled R cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_xrjcos_momeq F77NAME(psgetdim_xrjcos_momeq)
void psGetDim_xrjcos_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for xRjcos_momeq profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_xrjcos_momeq F77NAME(psget_id_xrjcos_momeq)
void psGet_id_xrjcos_momeq(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for xRjcos_momeq profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_xrjcos_momeq F77NAME(psgetrnk_id_xrjcos_momeq)
void psGetRnk_id_xrjcos_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for xRjcos_momeq profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_xrjcos_momeq F77NAME(psgetdim_id_xrjcos_momeq)
void psGetDim_id_xrjcos_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get scaled R sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_xrjsin_momeq F77NAME(psget_xrjsin_momeq)
void psGet_xrjsin_momeq(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set scaled R sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_xrjsin_momeq F77NAME(psset_xrjsin_momeq)
void psSet_xrjsin_momeq(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of scaled R sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_xrjsin_momeq F77NAME(psgetrnk_xrjsin_momeq)
void psGetRnk_xrjsin_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of scaled R sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_xrjsin_momeq F77NAME(psgetdim_xrjsin_momeq)
void psGetDim_xrjsin_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for xRjsin_momeq profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_xrjsin_momeq F77NAME(psget_id_xrjsin_momeq)
void psGet_id_xrjsin_momeq(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for xRjsin_momeq profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_xrjsin_momeq F77NAME(psgetrnk_id_xrjsin_momeq)
void psGetRnk_id_xrjsin_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for xRjsin_momeq profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_xrjsin_momeq F77NAME(psgetdim_id_xrjsin_momeq)
void psGetDim_id_xrjsin_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get scaled Z cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_xzjcos_momeq F77NAME(psget_xzjcos_momeq)
void psGet_xzjcos_momeq(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set scaled Z cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_xzjcos_momeq F77NAME(psset_xzjcos_momeq)
void psSet_xzjcos_momeq(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of scaled Z cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_xzjcos_momeq F77NAME(psgetrnk_xzjcos_momeq)
void psGetRnk_xzjcos_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of scaled Z cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_xzjcos_momeq F77NAME(psgetdim_xzjcos_momeq)
void psGetDim_xzjcos_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for xZjcos_momeq profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_xzjcos_momeq F77NAME(psget_id_xzjcos_momeq)
void psGet_id_xzjcos_momeq(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for xZjcos_momeq profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_xzjcos_momeq F77NAME(psgetrnk_id_xzjcos_momeq)
void psGetRnk_id_xzjcos_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for xZjcos_momeq profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_xzjcos_momeq F77NAME(psgetdim_id_xzjcos_momeq)
void psGetDim_id_xzjcos_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get scaled Z sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_xzjsin_momeq F77NAME(psget_xzjsin_momeq)
void psGet_xzjsin_momeq(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set scaled Z sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_xzjsin_momeq F77NAME(psset_xzjsin_momeq)
void psSet_xzjsin_momeq(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of scaled Z sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_xzjsin_momeq F77NAME(psgetrnk_xzjsin_momeq)
void psGetRnk_xzjsin_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of scaled Z sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_xzjsin_momeq F77NAME(psgetdim_xzjsin_momeq)
void psGetDim_xzjsin_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for xZjsin_momeq profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_xzjsin_momeq F77NAME(psget_id_xzjsin_momeq)
void psGet_id_xzjsin_momeq(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for xZjsin_momeq profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_xzjsin_momeq F77NAME(psgetrnk_id_xzjsin_momeq)
void psGetRnk_id_xzjsin_momeq(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for xZjsin_momeq profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_xzjsin_momeq F77NAME(psgetdim_id_xzjsin_momeq)
void psGetDim_id_xzjsin_momeq(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Psi(R,Z), Note on Psi(rho) and Psi(R,Z) both: convention is to set, Psi=0 at the magnetic axis and increasing towards the plasma, boundary.  Direction of poloidal field is taken from element, kccw_Jphi:, , BR = kccw_Jphi*(1/R)*d(Psi/dZ), BZ =-kccw_Jphi*(1/R)*d(Psi/dR), , see also: Psi_to_machine_axis.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_psirz F77NAME(psget_psirz)
void psGet_psirz(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set Psi(R,Z), Note on Psi(rho) and Psi(R,Z) both: convention is to set, Psi=0 at the magnetic axis and increasing towards the plasma, boundary.  Direction of poloidal field is taken from element, kccw_Jphi:, , BR = kccw_Jphi*(1/R)*d(Psi/dZ), BZ =-kccw_Jphi*(1/R)*d(Psi/dR), , see also: Psi_to_machine_axis.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_psirz F77NAME(psset_psirz)
void psSet_psirz(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of Psi(R,Z), Note on Psi(rho) and Psi(R,Z) both: convention is to set, Psi=0 at the magnetic axis and increasing towards the plasma, boundary.  Direction of poloidal field is taken from element, kccw_Jphi:, , BR = kccw_Jphi*(1/R)*d(Psi/dZ), BZ =-kccw_Jphi*(1/R)*d(Psi/dR), , see also: Psi_to_machine_axis.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_psirz F77NAME(psgetrnk_psirz)
void psGetRnk_psirz(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Psi(R,Z), Note on Psi(rho) and Psi(R,Z) both: convention is to set, Psi=0 at the magnetic axis and increasing towards the plasma, boundary.  Direction of poloidal field is taken from element, kccw_Jphi:, , BR = kccw_Jphi*(1/R)*d(Psi/dZ), BZ =-kccw_Jphi*(1/R)*d(Psi/dR), , see also: Psi_to_machine_axis.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_psirz F77NAME(psgetdim_psirz)
void psGetDim_psirz(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for PsiRZ profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_psirz F77NAME(psget_id_psirz)
void psGet_id_psirz(int* iobj, int* data, int* ierr);

/**
 * Get Toroidal field
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_bphirz F77NAME(psget_bphirz)
void psGet_bphirz(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set Toroidal field
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_bphirz F77NAME(psset_bphirz)
void psSet_bphirz(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of Toroidal field
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_bphirz F77NAME(psgetrnk_bphirz)
void psGetRnk_bphirz(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Toroidal field
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_bphirz F77NAME(psgetdim_bphirz)
void psGetDim_bphirz(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for BphiRZ profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_bphirz F77NAME(psget_id_bphirz)
void psGet_id_bphirz(int* iobj, int* data, int* ierr);

/**
 * Get R component of poloidal field
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_brrz F77NAME(psget_brrz)
void psGet_brrz(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set R component of poloidal field
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_brrz F77NAME(psset_brrz)
void psSet_brrz(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of R component of poloidal field
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_brrz F77NAME(psgetrnk_brrz)
void psGetRnk_brrz(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R component of poloidal field
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_brrz F77NAME(psgetdim_brrz)
void psGetDim_brrz(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for BRRZ profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_brrz F77NAME(psget_id_brrz)
void psGet_id_brrz(int* iobj, int* data, int* ierr);

/**
 * Get Z component of poloidal field
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_bzrz F77NAME(psget_bzrz)
void psGet_bzrz(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set Z component of poloidal field
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_bzrz F77NAME(psset_bzrz)
void psSet_bzrz(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of Z component of poloidal field
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_bzrz F77NAME(psgetrnk_bzrz)
void psGetRnk_bzrz(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Z component of poloidal field
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_bzrz F77NAME(psgetdim_bzrz)
void psGetDim_bzrz(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for BZRZ profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_bzrz F77NAME(psget_id_bzrz)
void psGet_id_bzrz(int* iobj, int* data, int* ierr);

/**
 * Get <R^-2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gr2i F77NAME(psget_gr2i)
void psGet_gr2i(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <R^-2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gr2i F77NAME(psset_gr2i)
void psSet_gr2i(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <R^-2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gr2i F77NAME(psgetrnk_gr2i)
void psGetRnk_gr2i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <R^-2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gr2i F77NAME(psgetdim_gr2i)
void psGetDim_gr2i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gr2i profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gr2i F77NAME(psget_id_gr2i)
void psGet_id_gr2i(int* iobj, int* data, int* ierr);

/**
 * Get <|grad(rho)|^2/R^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_grho2r2i F77NAME(psget_grho2r2i)
void psGet_grho2r2i(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <|grad(rho)|^2/R^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_grho2r2i F77NAME(psset_grho2r2i)
void psSet_grho2r2i(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <|grad(rho)|^2/R^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_grho2r2i F77NAME(psgetrnk_grho2r2i)
void psGetRnk_grho2r2i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <|grad(rho)|^2/R^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_grho2r2i F77NAME(psgetdim_grho2r2i)
void psGetDim_grho2r2i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for grho2r2i profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_grho2r2i F77NAME(psget_id_grho2r2i)
void psGet_id_grho2r2i(int* iobj, int* data, int* ierr);

/**
 * Get <|grad(rho)|>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_grho1 F77NAME(psget_grho1)
void psGet_grho1(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <|grad(rho)|>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_grho1 F77NAME(psset_grho1)
void psSet_grho1(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <|grad(rho)|>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_grho1 F77NAME(psgetrnk_grho1)
void psGetRnk_grho1(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <|grad(rho)|>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_grho1 F77NAME(psgetdim_grho1)
void psGetDim_grho1(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for grho1 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_grho1 F77NAME(psget_id_grho1)
void psGet_id_grho1(int* iobj, int* data, int* ierr);

/**
 * Get <|grad(rho)|^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_grho2 F77NAME(psget_grho2)
void psGet_grho2(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <|grad(rho)|^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_grho2 F77NAME(psset_grho2)
void psSet_grho2(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <|grad(rho)|^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_grho2 F77NAME(psgetrnk_grho2)
void psGetRnk_grho2(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <|grad(rho)|^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_grho2 F77NAME(psgetdim_grho2)
void psGetDim_grho2(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for grho2 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_grho2 F77NAME(psget_id_grho2)
void psGet_id_grho2(int* iobj, int* data, int* ierr);

/**
 * Get <R>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gr1 F77NAME(psget_gr1)
void psGet_gr1(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <R>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gr1 F77NAME(psset_gr1)
void psSet_gr1(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <R>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gr1 F77NAME(psgetrnk_gr1)
void psGetRnk_gr1(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <R>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gr1 F77NAME(psgetdim_gr1)
void psGetDim_gr1(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gr1 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gr1 F77NAME(psget_id_gr1)
void psGet_id_gr1(int* iobj, int* data, int* ierr);

/**
 * Get <R^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gr2 F77NAME(psget_gr2)
void psGet_gr2(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <R^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gr2 F77NAME(psset_gr2)
void psSet_gr2(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <R^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gr2 F77NAME(psgetrnk_gr2)
void psGetRnk_gr2(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <R^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gr2 F77NAME(psgetdim_gr2)
void psGetDim_gr2(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gr2 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gr2 F77NAME(psget_id_gr2)
void psGet_id_gr2(int* iobj, int* data, int* ierr);

/**
 * Get <1/R>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gri F77NAME(psget_gri)
void psGet_gri(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <1/R>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gri F77NAME(psset_gri)
void psSet_gri(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <1/R>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gri F77NAME(psgetrnk_gri)
void psGetRnk_gri(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <1/R>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gri F77NAME(psgetdim_gri)
void psGetDim_gri(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gri profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gri F77NAME(psget_id_gri)
void psGet_id_gri(int* iobj, int* data, int* ierr);

/**
 * Get <R^-3>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gr3i F77NAME(psget_gr3i)
void psGet_gr3i(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <R^-3>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gr3i F77NAME(psset_gr3i)
void psSet_gr3i(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <R^-3>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gr3i F77NAME(psgetrnk_gr3i)
void psGetRnk_gr3i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <R^-3>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gr3i F77NAME(psgetdim_gr3i)
void psGetDim_gr3i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gr3i profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gr3i F77NAME(psget_id_gr3i)
void psGet_id_gr3i(int* iobj, int* data, int* ierr);

/**
 * Get <|grad(rho)|^2/R^3>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_grho2r3i F77NAME(psget_grho2r3i)
void psGet_grho2r3i(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <|grad(rho)|^2/R^3>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_grho2r3i F77NAME(psset_grho2r3i)
void psSet_grho2r3i(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <|grad(rho)|^2/R^3>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_grho2r3i F77NAME(psgetrnk_grho2r3i)
void psGetRnk_grho2r3i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <|grad(rho)|^2/R^3>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_grho2r3i F77NAME(psgetdim_grho2r3i)
void psGetDim_grho2r3i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for grho2r3i profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_grho2r3i F77NAME(psget_id_grho2r3i)
void psGet_id_grho2r3i(int* iobj, int* data, int* ierr);

/**
 * Get <R^2*|grad(rho)|^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gr2rho2 F77NAME(psget_gr2rho2)
void psGet_gr2rho2(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <R^2*|grad(rho)|^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gr2rho2 F77NAME(psset_gr2rho2)
void psSet_gr2rho2(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <R^2*|grad(rho)|^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gr2rho2 F77NAME(psgetrnk_gr2rho2)
void psGetRnk_gr2rho2(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <R^2*|grad(rho)|^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gr2rho2 F77NAME(psgetdim_gr2rho2)
void psGetDim_gr2rho2(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gr2rho2 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gr2rho2 F77NAME(psget_id_gr2rho2)
void psGet_id_gr2rho2(int* iobj, int* data, int* ierr);

/**
 * Get <1/(R*|grad(rho)|)>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_grirhoi F77NAME(psget_grirhoi)
void psGet_grirhoi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <1/(R*|grad(rho)|)>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_grirhoi F77NAME(psset_grirhoi)
void psSet_grirhoi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <1/(R*|grad(rho)|)>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_grirhoi F77NAME(psgetrnk_grirhoi)
void psGetRnk_grirhoi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <1/(R*|grad(rho)|)>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_grirhoi F77NAME(psgetdim_grirhoi)
void psGetDim_grirhoi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for grirhoi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_grirhoi F77NAME(psget_id_grirhoi)
void psGet_id_grirhoi(int* iobj, int* data, int* ierr);

/**
 * Get <|B|*R^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gbr2 F77NAME(psget_gbr2)
void psGet_gbr2(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <|B|*R^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gbr2 F77NAME(psset_gbr2)
void psSet_gbr2(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <|B|*R^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gbr2 F77NAME(psgetrnk_gbr2)
void psGetRnk_gbr2(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <|B|*R^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gbr2 F77NAME(psgetdim_gbr2)
void psGetDim_gbr2(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gbr2 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gbr2 F77NAME(psget_id_gbr2)
void psGet_id_gbr2(int* iobj, int* data, int* ierr);

/**
 * Get <|B|>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gb1 F77NAME(psget_gb1)
void psGet_gb1(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <|B|>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gb1 F77NAME(psset_gb1)
void psSet_gb1(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <|B|>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gb1 F77NAME(psgetrnk_gb1)
void psGetRnk_gb1(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <|B|>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gb1 F77NAME(psgetdim_gb1)
void psGetDim_gb1(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gb1 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gb1 F77NAME(psget_id_gb1)
void psGet_id_gb1(int* iobj, int* data, int* ierr);

/**
 * Get <B^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gb2 F77NAME(psget_gb2)
void psGet_gb2(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <B^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gb2 F77NAME(psset_gb2)
void psSet_gb2(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <B^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gb2 F77NAME(psgetrnk_gb2)
void psGetRnk_gb2(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <B^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gb2 F77NAME(psgetdim_gb2)
void psGetDim_gb2(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gb2 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gb2 F77NAME(psget_id_gb2)
void psGet_id_gb2(int* iobj, int* data, int* ierr);

/**
 * Get <1/B^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gb2i F77NAME(psget_gb2i)
void psGet_gb2i(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <1/B^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gb2i F77NAME(psset_gb2i)
void psSet_gb2i(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <1/B^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gb2i F77NAME(psgetrnk_gb2i)
void psGetRnk_gb2i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <1/B^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gb2i F77NAME(psgetdim_gb2i)
void psGetDim_gb2i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gb2i profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gb2i F77NAME(psget_id_gb2i)
void psGet_id_gb2i(int* iobj, int* data, int* ierr);

/**
 * Get <|grad(rho)|^2/B^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_grho2b2i F77NAME(psget_grho2b2i)
void psGet_grho2b2i(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <|grad(rho)|^2/B^2>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_grho2b2i F77NAME(psset_grho2b2i)
void psSet_grho2b2i(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <|grad(rho)|^2/B^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_grho2b2i F77NAME(psgetrnk_grho2b2i)
void psGetRnk_grho2b2i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <|grad(rho)|^2/B^2>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_grho2b2i F77NAME(psgetdim_grho2b2i)
void psGetDim_grho2b2i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for grho2b2i profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_grho2b2i F77NAME(psget_id_grho2b2i)
void psGet_id_grho2b2i(int* iobj, int* data, int* ierr);

/**
 * Get NC gamma, 2pi/int(0 to 2pi)[dtheta*(B/B.grad(theta))]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gamma_nc F77NAME(psget_gamma_nc)
void psGet_gamma_nc(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set NC gamma, 2pi/int(0 to 2pi)[dtheta*(B/B.grad(theta))]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gamma_nc F77NAME(psset_gamma_nc)
void psSet_gamma_nc(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of NC gamma, 2pi/int(0 to 2pi)[dtheta*(B/B.grad(theta))]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gamma_nc F77NAME(psgetrnk_gamma_nc)
void psGetRnk_gamma_nc(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of NC gamma, 2pi/int(0 to 2pi)[dtheta*(B/B.grad(theta))]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gamma_nc F77NAME(psgetdim_gamma_nc)
void psGetDim_gamma_nc(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gamma_nc profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gamma_nc F77NAME(psget_id_gamma_nc)
void psGet_id_gamma_nc(int* iobj, int* data, int* ierr);

/**
 * Get <(B.grad(B)/|B|)^2>, average of square of grad(B) along field line
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ngradb2_av F77NAME(psget_ngradb2_av)
void psGet_ngradb2_av(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <(B.grad(B)/|B|)^2>, average of square of grad(B) along field line
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ngradb2_av F77NAME(psset_ngradb2_av)
void psSet_ngradb2_av(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <(B.grad(B)/|B|)^2>, average of square of grad(B) along field line
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ngradb2_av F77NAME(psgetrnk_ngradb2_av)
void psGetRnk_ngradb2_av(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <(B.grad(B)/|B|)^2>, average of square of grad(B) along field line
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ngradb2_av F77NAME(psgetdim_ngradb2_av)
void psGetDim_ngradb2_av(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for ngradb2_av profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ngradb2_av F77NAME(psget_id_ngradb2_av)
void psGet_id_ngradb2_av(int* iobj, int* data, int* ierr);

/**
 * Get PS moments, (1:npsmom) Pfirsch-Schlutter moments (NCLASS), convergence check: sum[j=1:infinity](psmom_nc(:,j))= gb2(:)*ngradb2_av(:)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_psmom_nc F77NAME(psget_psmom_nc)
void psGet_psmom_nc(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set PS moments, (1:npsmom) Pfirsch-Schlutter moments (NCLASS), convergence check: sum[j=1:infinity](psmom_nc(:,j))= gb2(:)*ngradb2_av(:)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_psmom_nc F77NAME(psset_psmom_nc)
void psSet_psmom_nc(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of PS moments, (1:npsmom) Pfirsch-Schlutter moments (NCLASS), convergence check: sum[j=1:infinity](psmom_nc(:,j))= gb2(:)*ngradb2_av(:)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_psmom_nc F77NAME(psgetrnk_psmom_nc)
void psGetRnk_psmom_nc(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of PS moments, (1:npsmom) Pfirsch-Schlutter moments (NCLASS), convergence check: sum[j=1:infinity](psmom_nc(:,j))= gb2(:)*ngradb2_av(:)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_psmom_nc F77NAME(psgetdim_psmom_nc)
void psGetDim_psmom_nc(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for psmom_nc profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_psmom_nc F77NAME(psget_id_psmom_nc)
void psGet_id_psmom_nc(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for psmom_nc profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_psmom_nc F77NAME(psgetrnk_id_psmom_nc)
void psGetRnk_id_psmom_nc(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for psmom_nc profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_psmom_nc F77NAME(psgetdim_id_psmom_nc)
void psGetDim_id_psmom_nc(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get PS moments sum convergence, |ngradb2_av(:)-sum[j=1:npsmom]psmom_nc(:,j)/gb2(:)|/maxval(|ngradb2_av(:)|)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_psmom_errck F77NAME(psget_psmom_errck)
void psGet_psmom_errck(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set PS moments sum convergence, |ngradb2_av(:)-sum[j=1:npsmom]psmom_nc(:,j)/gb2(:)|/maxval(|ngradb2_av(:)|)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_psmom_errck F77NAME(psset_psmom_errck)
void psSet_psmom_errck(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of PS moments sum convergence, |ngradb2_av(:)-sum[j=1:npsmom]psmom_nc(:,j)/gb2(:)|/maxval(|ngradb2_av(:)|)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_psmom_errck F77NAME(psgetrnk_psmom_errck)
void psGetRnk_psmom_errck(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of PS moments sum convergence, |ngradb2_av(:)-sum[j=1:npsmom]psmom_nc(:,j)/gb2(:)|/maxval(|ngradb2_av(:)|)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_psmom_errck F77NAME(psgetdim_psmom_errck)
void psGetDim_psmom_errck(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for psmom_errck profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_psmom_errck F77NAME(psget_id_psmom_errck)
void psGet_id_psmom_errck(int* iobj, int* data, int* ierr);

/**
 * Get <H^-2*(1-SQRT(1-H)*(1+H/2))>; H=B/Bmax
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gncfh F77NAME(psget_gncfh)
void psGet_gncfh(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <H^-2*(1-SQRT(1-H)*(1+H/2))>; H=B/Bmax
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gncfh F77NAME(psset_gncfh)
void psSet_gncfh(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <H^-2*(1-SQRT(1-H)*(1+H/2))>; H=B/Bmax
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gncfh F77NAME(psgetrnk_gncfh)
void psGetRnk_gncfh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <H^-2*(1-SQRT(1-H)*(1+H/2))>; H=B/Bmax
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gncfh F77NAME(psgetdim_gncfh)
void psGetDim_gncfh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gncfh profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gncfh F77NAME(psget_id_gncfh)
void psGet_id_gncfh(int* iobj, int* data, int* ierr);

/**
 * Get <(B^-2)*((1-H)^0.5-(1/3)*(1-H)^1.5)>; H=B/Bmax
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_gncfb2h F77NAME(psget_gncfb2h)
void psGet_gncfb2h(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set <(B^-2)*((1-H)^0.5-(1/3)*(1-H)^1.5)>; H=B/Bmax
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_gncfb2h F77NAME(psset_gncfb2h)
void psSet_gncfb2h(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of <(B^-2)*((1-H)^0.5-(1/3)*(1-H)^1.5)>; H=B/Bmax
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_gncfb2h F77NAME(psgetrnk_gncfb2h)
void psGetRnk_gncfb2h(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of <(B^-2)*((1-H)^0.5-(1/3)*(1-H)^1.5)>; H=B/Bmax
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_gncfb2h F77NAME(psgetdim_gncfb2h)
void psGetDim_gncfb2h(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for gncfb2h profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_gncfb2h F77NAME(psget_id_gncfb2h)
void psGet_id_gncfb2h(int* iobj, int* data, int* ierr);

/**
 * Get flux surface midplane elevation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_midp F77NAME(psget_z_midp)
void psGet_z_midp(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set flux surface midplane elevation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_midp F77NAME(psset_z_midp)
void psSet_z_midp(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of flux surface midplane elevation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_midp F77NAME(psgetrnk_z_midp)
void psGetRnk_z_midp(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of flux surface midplane elevation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_midp F77NAME(psgetdim_z_midp)
void psGetDim_z_midp(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Z_midp profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_z_midp F77NAME(psget_id_z_midp)
void psGet_id_z_midp(int* iobj, int* data, int* ierr);

/**
 * Get R (high field side) midplane intercept
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_midp_in F77NAME(psget_r_midp_in)
void psGet_r_midp_in(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set R (high field side) midplane intercept
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_midp_in F77NAME(psset_r_midp_in)
void psSet_r_midp_in(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of R (high field side) midplane intercept
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_midp_in F77NAME(psgetrnk_r_midp_in)
void psGetRnk_r_midp_in(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R (high field side) midplane intercept
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_midp_in F77NAME(psgetdim_r_midp_in)
void psGetDim_r_midp_in(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for R_midp_in profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_r_midp_in F77NAME(psget_id_r_midp_in)
void psGet_id_r_midp_in(int* iobj, int* data, int* ierr);

/**
 * Get R (low field side) midplane intercept
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_midp_out F77NAME(psget_r_midp_out)
void psGet_r_midp_out(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set R (low field side) midplane intercept
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_midp_out F77NAME(psset_r_midp_out)
void psSet_r_midp_out(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of R (low field side) midplane intercept
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_midp_out F77NAME(psgetrnk_r_midp_out)
void psGetRnk_r_midp_out(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R (low field side) midplane intercept
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_midp_out F77NAME(psgetdim_r_midp_out)
void psGetDim_r_midp_out(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for R_midp_out profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_r_midp_out F77NAME(psget_id_r_midp_out)
void psGet_id_r_midp_out(int* iobj, int* data, int* ierr);

/**
 * Get max R on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_surfmax F77NAME(psget_r_surfmax)
void psGet_r_surfmax(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set max R on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_surfmax F77NAME(psset_r_surfmax)
void psSet_r_surfmax(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of max R on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_surfmax F77NAME(psgetrnk_r_surfmax)
void psGetRnk_r_surfmax(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of max R on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_surfmax F77NAME(psgetdim_r_surfmax)
void psGetDim_r_surfmax(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for R_surfMax profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_r_surfmax F77NAME(psget_id_r_surfmax)
void psGet_id_r_surfmax(int* iobj, int* data, int* ierr);

/**
 * Get min R on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_r_surfmin F77NAME(psget_r_surfmin)
void psGet_r_surfmin(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set min R on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_r_surfmin F77NAME(psset_r_surfmin)
void psSet_r_surfmin(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of min R on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_r_surfmin F77NAME(psgetrnk_r_surfmin)
void psGetRnk_r_surfmin(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of min R on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_r_surfmin F77NAME(psgetdim_r_surfmin)
void psGetDim_r_surfmin(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for R_surfMin profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_r_surfmin F77NAME(psget_id_r_surfmin)
void psGet_id_r_surfmin(int* iobj, int* data, int* ierr);

/**
 * Get max Z on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_surfmax F77NAME(psget_z_surfmax)
void psGet_z_surfmax(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set max Z on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_surfmax F77NAME(psset_z_surfmax)
void psSet_z_surfmax(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of max Z on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_surfmax F77NAME(psgetrnk_z_surfmax)
void psGetRnk_z_surfmax(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of max Z on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_surfmax F77NAME(psgetdim_z_surfmax)
void psGetDim_z_surfmax(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Z_surfMax profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_z_surfmax F77NAME(psget_id_z_surfmax)
void psGet_id_z_surfmax(int* iobj, int* data, int* ierr);

/**
 * Get min Z on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_z_surfmin F77NAME(psget_z_surfmin)
void psGet_z_surfmin(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set min Z on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_z_surfmin F77NAME(psset_z_surfmin)
void psSet_z_surfmin(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of min Z on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_z_surfmin F77NAME(psgetrnk_z_surfmin)
void psGetRnk_z_surfmin(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of min Z on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_z_surfmin F77NAME(psgetdim_z_surfmin)
void psGetDim_z_surfmin(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Z_surfMin profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_z_surfmin F77NAME(psget_id_z_surfmin)
void psGet_id_z_surfmin(int* iobj, int* data, int* ierr);

/**
 * Get max mod(B) on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_surfmax F77NAME(psget_b_surfmax)
void psGet_b_surfmax(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set max mod(B) on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_surfmax F77NAME(psset_b_surfmax)
void psSet_b_surfmax(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of max mod(B) on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_b_surfmax F77NAME(psgetrnk_b_surfmax)
void psGetRnk_b_surfmax(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of max mod(B) on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_b_surfmax F77NAME(psgetdim_b_surfmax)
void psGetDim_b_surfmax(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for B_surfMax profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_b_surfmax F77NAME(psget_id_b_surfmax)
void psGet_id_b_surfmax(int* iobj, int* data, int* ierr);

/**
 * Get min mod(B) on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_b_surfmin F77NAME(psget_b_surfmin)
void psGet_b_surfmin(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set min mod(B) on flux surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_b_surfmin F77NAME(psset_b_surfmin)
void psSet_b_surfmin(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of min mod(B) on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_b_surfmin F77NAME(psgetrnk_b_surfmin)
void psGetRnk_b_surfmin(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of min mod(B) on flux surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_b_surfmin F77NAME(psgetdim_b_surfmin)
void psGetDim_b_surfmin(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for B_surfMin profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_b_surfmin F77NAME(psget_id_b_surfmin)
void psGet_id_b_surfmin(int* iobj, int* data, int* ierr);

/**
 * Get Rmajor_mean = (R_Surfmax+R_surfmin)/2
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rmajor_mean F77NAME(psget_rmajor_mean)
void psGet_rmajor_mean(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Rmajor_mean = (R_Surfmax+R_surfmin)/2
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rmajor_mean F77NAME(psset_rmajor_mean)
void psSet_rmajor_mean(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Rmajor_mean = (R_Surfmax+R_surfmin)/2
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rmajor_mean F77NAME(psgetrnk_rmajor_mean)
void psGetRnk_rmajor_mean(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Rmajor_mean = (R_Surfmax+R_surfmin)/2
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rmajor_mean F77NAME(psgetdim_rmajor_mean)
void psGetDim_rmajor_mean(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for Rmajor_mean profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_rmajor_mean F77NAME(psget_id_rmajor_mean)
void psGet_id_rmajor_mean(int* iobj, int* data, int* ierr);

/**
 * Get rMinor_mean = (R_Surfmax-R_surfmin)/2
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rminor_mean F77NAME(psget_rminor_mean)
void psGet_rminor_mean(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set rMinor_mean = (R_Surfmax-R_surfmin)/2
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rminor_mean F77NAME(psset_rminor_mean)
void psSet_rminor_mean(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of rMinor_mean = (R_Surfmax-R_surfmin)/2
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rminor_mean F77NAME(psgetrnk_rminor_mean)
void psGetRnk_rminor_mean(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of rMinor_mean = (R_Surfmax-R_surfmin)/2
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rminor_mean F77NAME(psgetdim_rminor_mean)
void psGetDim_rminor_mean(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for rMinor_mean profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_rminor_mean F77NAME(psget_id_rminor_mean)
void psGet_id_rminor_mean(int* iobj, int* data, int* ierr);

/**
 * Get elongation (b/a), (Zmax-Zmin)/(Rmax-Rmin) on each surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_elong F77NAME(psget_elong)
void psGet_elong(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set elongation (b/a), (Zmax-Zmin)/(Rmax-Rmin) on each surface
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_elong F77NAME(psset_elong)
void psSet_elong(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of elongation (b/a), (Zmax-Zmin)/(Rmax-Rmin) on each surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_elong F77NAME(psgetrnk_elong)
void psGetRnk_elong(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of elongation (b/a), (Zmax-Zmin)/(Rmax-Rmin) on each surface
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_elong F77NAME(psgetdim_elong)
void psGetDim_elong(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for elong profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_elong F77NAME(psget_id_elong)
void psGet_id_elong(int* iobj, int* data, int* ierr);

/**
 * Get triangularity (symmetrized), ((Rmin+Rmax)/2 - min(R(Zmax),R(Zmin)))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_triang F77NAME(psget_triang)
void psGet_triang(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set triangularity (symmetrized), ((Rmin+Rmax)/2 - min(R(Zmax),R(Zmin)))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_triang F77NAME(psset_triang)
void psSet_triang(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of triangularity (symmetrized), ((Rmin+Rmax)/2 - min(R(Zmax),R(Zmin)))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_triang F77NAME(psgetrnk_triang)
void psGetRnk_triang(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of triangularity (symmetrized), ((Rmin+Rmax)/2 - min(R(Zmax),R(Zmin)))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_triang F77NAME(psgetdim_triang)
void psGetDim_triang(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for triang profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_triang F77NAME(psget_id_triang)
void psGet_id_triang(int* iobj, int* data, int* ierr);

/**
 * Get upper triangularity, ((Rmin+Rmax)/2 - R(Zmax))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_triangu F77NAME(psget_triangu)
void psGet_triangu(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set upper triangularity, ((Rmin+Rmax)/2 - R(Zmax))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_triangu F77NAME(psset_triangu)
void psSet_triangu(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of upper triangularity, ((Rmin+Rmax)/2 - R(Zmax))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_triangu F77NAME(psgetrnk_triangu)
void psGetRnk_triangu(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of upper triangularity, ((Rmin+Rmax)/2 - R(Zmax))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_triangu F77NAME(psgetdim_triangu)
void psGetDim_triangu(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for triangU profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_triangu F77NAME(psget_id_triangu)
void psGet_id_triangu(int* iobj, int* data, int* ierr);

/**
 * Get lower triangularity, ((Rmin+Rmax)/2 - R(Zmin))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_triangl F77NAME(psget_triangl)
void psGet_triangl(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set lower triangularity, ((Rmin+Rmax)/2 - R(Zmin))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_triangl F77NAME(psset_triangl)
void psSet_triangl(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of lower triangularity, ((Rmin+Rmax)/2 - R(Zmin))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_triangl F77NAME(psgetrnk_triangl)
void psGetRnk_triangl(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of lower triangularity, ((Rmin+Rmax)/2 - R(Zmin))/((Rmax-Rmin)/2)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_triangl F77NAME(psgetdim_triangl)
void psGetDim_triangl(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for triangL profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_triangl F77NAME(psget_id_triangl)
void psGet_id_triangl(int* iobj, int* data, int* ierr);

/**
 * Get upper outer squareness, upper half of plasma, large major radius side, definition per C. T. Holcomb et al,, Physics of Plasmas 15, 056116 (2009)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_squareuo F77NAME(psget_squareuo)
void psGet_squareuo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set upper outer squareness, upper half of plasma, large major radius side, definition per C. T. Holcomb et al,, Physics of Plasmas 15, 056116 (2009)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_squareuo F77NAME(psset_squareuo)
void psSet_squareuo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of upper outer squareness, upper half of plasma, large major radius side, definition per C. T. Holcomb et al,, Physics of Plasmas 15, 056116 (2009)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_squareuo F77NAME(psgetrnk_squareuo)
void psGetRnk_squareuo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of upper outer squareness, upper half of plasma, large major radius side, definition per C. T. Holcomb et al,, Physics of Plasmas 15, 056116 (2009)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_squareuo F77NAME(psgetdim_squareuo)
void psGetDim_squareuo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for squareUO profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_squareuo F77NAME(psget_id_squareuo)
void psGet_id_squareuo(int* iobj, int* data, int* ierr);

/**
 * Get lower outer squareness, lower half of plasma, large major radius side, definition per C. T. Holcomb et al,, Physics of Plasmas 15, 056116 (2009)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_squarelo F77NAME(psget_squarelo)
void psGet_squarelo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set lower outer squareness, lower half of plasma, large major radius side, definition per C. T. Holcomb et al,, Physics of Plasmas 15, 056116 (2009)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_squarelo F77NAME(psset_squarelo)
void psSet_squarelo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of lower outer squareness, lower half of plasma, large major radius side, definition per C. T. Holcomb et al,, Physics of Plasmas 15, 056116 (2009)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_squarelo F77NAME(psgetrnk_squarelo)
void psGetRnk_squarelo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of lower outer squareness, lower half of plasma, large major radius side, definition per C. T. Holcomb et al,, Physics of Plasmas 15, 056116 (2009)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_squarelo F77NAME(psgetdim_squarelo)
void psGetDim_squarelo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for squareLO profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_squarelo F77NAME(psget_id_squarelo)
void psGet_id_squarelo(int* iobj, int* data, int* ierr);

/**
 * Get Miller upper triangularity, Sin(aCos((R(Zmax)-Rmajor_mean)/rMinor_mean)-pi/2).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_triang_miller_u F77NAME(psget_triang_miller_u)
void psGet_triang_miller_u(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Miller upper triangularity, Sin(aCos((R(Zmax)-Rmajor_mean)/rMinor_mean)-pi/2).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_triang_miller_u F77NAME(psset_triang_miller_u)
void psSet_triang_miller_u(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Miller upper triangularity, Sin(aCos((R(Zmax)-Rmajor_mean)/rMinor_mean)-pi/2).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_triang_miller_u F77NAME(psgetrnk_triang_miller_u)
void psGetRnk_triang_miller_u(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Miller upper triangularity, Sin(aCos((R(Zmax)-Rmajor_mean)/rMinor_mean)-pi/2).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_triang_miller_u F77NAME(psgetdim_triang_miller_u)
void psGetDim_triang_miller_u(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for triang_miller_U profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_triang_miller_u F77NAME(psget_id_triang_miller_u)
void psGet_id_triang_miller_u(int* iobj, int* data, int* ierr);

/**
 * Get Miller lower triangularity, Sin(aCos((R(Zmin)-Rmajor_mean)/rMinor_mean)-pi/2).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_triang_miller_l F77NAME(psget_triang_miller_l)
void psGet_triang_miller_l(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Miller lower triangularity, Sin(aCos((R(Zmin)-Rmajor_mean)/rMinor_mean)-pi/2).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_triang_miller_l F77NAME(psset_triang_miller_l)
void psSet_triang_miller_l(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Miller lower triangularity, Sin(aCos((R(Zmin)-Rmajor_mean)/rMinor_mean)-pi/2).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_triang_miller_l F77NAME(psgetrnk_triang_miller_l)
void psGetRnk_triang_miller_l(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Miller lower triangularity, Sin(aCos((R(Zmin)-Rmajor_mean)/rMinor_mean)-pi/2).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_triang_miller_l F77NAME(psgetdim_triang_miller_l)
void psGetDim_triang_miller_l(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for triang_miller_L profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_triang_miller_l F77NAME(psget_id_triang_miller_l)
void psGet_id_triang_miller_l(int* iobj, int* data, int* ierr);

/**
 * Get direct ICRF power deposition, contribution from each n_phi on each antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param n4 data dimension along axis 3 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_picrf_nphi_srcs F77NAME(psget_picrf_nphi_srcs)
void psGet_picrf_nphi_srcs(int* iobj, const int* n1, const int* n2, const int* n3, const int* n4, double* data, int* ierr);

/**
 * Set direct ICRF power deposition, contribution from each n_phi on each antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param n4 data dimension along axis 3 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_picrf_nphi_srcs F77NAME(psset_picrf_nphi_srcs)
void psSet_picrf_nphi_srcs(int* iobj, const int* n1, const int* n2, const int* n3, const int* n4, const double* data, int* ierr);

/**
 * Get number of dimension of direct ICRF power deposition, contribution from each n_phi on each antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_picrf_nphi_srcs F77NAME(psgetrnk_picrf_nphi_srcs)
void psGetRnk_picrf_nphi_srcs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of direct ICRF power deposition, contribution from each n_phi on each antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_picrf_nphi_srcs F77NAME(psgetdim_picrf_nphi_srcs)
void psGetDim_picrf_nphi_srcs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for picrf_nphi_srcs profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_picrf_nphi_srcs F77NAME(psget_id_picrf_nphi_srcs)
void psGet_id_picrf_nphi_srcs(int* iobj, const int* n1, const int* n2, const int* n3, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for picrf_nphi_srcs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_picrf_nphi_srcs F77NAME(psgetrnk_id_picrf_nphi_srcs)
void psGetRnk_id_picrf_nphi_srcs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for picrf_nphi_srcs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_picrf_nphi_srcs F77NAME(psgetdim_id_picrf_nphi_srcs)
void psGetDim_id_picrf_nphi_srcs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get direct ICRF power deposition, (sum over nphi)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_picrf_srcs F77NAME(psget_picrf_srcs)
void psGet_picrf_srcs(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set direct ICRF power deposition, (sum over nphi)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_picrf_srcs F77NAME(psset_picrf_srcs)
void psSet_picrf_srcs(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of direct ICRF power deposition, (sum over nphi)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_picrf_srcs F77NAME(psgetrnk_picrf_srcs)
void psGetRnk_picrf_srcs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of direct ICRF power deposition, (sum over nphi)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_picrf_srcs F77NAME(psgetdim_picrf_srcs)
void psGetDim_picrf_srcs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for picrf_srcs profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_picrf_srcs F77NAME(psget_id_picrf_srcs)
void psGet_id_picrf_srcs(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for picrf_srcs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_picrf_srcs F77NAME(psgetrnk_id_picrf_srcs)
void psGetRnk_id_picrf_srcs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for picrf_srcs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_picrf_srcs F77NAME(psgetdim_id_picrf_srcs)
void psGetDim_id_picrf_srcs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get direct ICRF power deposition, (sum over IC sources & nphi)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_picrf_totals F77NAME(psget_picrf_totals)
void psGet_picrf_totals(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set direct ICRF power deposition, (sum over IC sources & nphi)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_picrf_totals F77NAME(psset_picrf_totals)
void psSet_picrf_totals(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of direct ICRF power deposition, (sum over IC sources & nphi)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_picrf_totals F77NAME(psgetrnk_picrf_totals)
void psGetRnk_picrf_totals(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of direct ICRF power deposition, (sum over IC sources & nphi)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_picrf_totals F77NAME(psgetdim_picrf_totals)
void psGetDim_picrf_totals(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for picrf_totals profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_picrf_totals F77NAME(psget_id_picrf_totals)
void psGet_id_picrf_totals(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for picrf_totals profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_picrf_totals F77NAME(psgetrnk_id_picrf_totals)
void psGetRnk_id_picrf_totals(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for picrf_totals profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_picrf_totals F77NAME(psgetdim_id_picrf_totals)
void psGetDim_id_picrf_totals(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get direct thermal ion heating by ICRF, (sum over thermal ion species & IC sources)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_picth F77NAME(psget_picth)
void psGet_picth(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set direct thermal ion heating by ICRF, (sum over thermal ion species & IC sources)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_picth F77NAME(psset_picth)
void psSet_picth(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of direct thermal ion heating by ICRF, (sum over thermal ion species & IC sources)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_picth F77NAME(psgetrnk_picth)
void psGetRnk_picth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of direct thermal ion heating by ICRF, (sum over thermal ion species & IC sources)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_picth F77NAME(psgetdim_picth)
void psGetDim_picth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for picth profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_picth F77NAME(psget_id_picth)
void psGet_id_picth(int* iobj, int* data, int* ierr);

/**
 * Get ICRF current drive, contribution from each n_phi on each antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_cdicrf_nphi F77NAME(psget_cdicrf_nphi)
void psGet_cdicrf_nphi(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set ICRF current drive, contribution from each n_phi on each antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_cdicrf_nphi F77NAME(psset_cdicrf_nphi)
void psSet_cdicrf_nphi(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of ICRF current drive, contribution from each n_phi on each antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_cdicrf_nphi F77NAME(psgetrnk_cdicrf_nphi)
void psGetRnk_cdicrf_nphi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ICRF current drive, contribution from each n_phi on each antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_cdicrf_nphi F77NAME(psgetdim_cdicrf_nphi)
void psGetDim_cdicrf_nphi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for cdicrf_nphi profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_cdicrf_nphi F77NAME(psget_id_cdicrf_nphi)
void psGet_id_cdicrf_nphi(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for cdicrf_nphi profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_cdicrf_nphi F77NAME(psgetrnk_id_cdicrf_nphi)
void psGetRnk_id_cdicrf_nphi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for cdicrf_nphi profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_cdicrf_nphi F77NAME(psgetdim_id_cdicrf_nphi)
void psGetDim_id_cdicrf_nphi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ICRF current drive, (summed over nphi)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_cdicrf F77NAME(psget_cdicrf)
void psGet_cdicrf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ICRF current drive, (summed over nphi)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_cdicrf F77NAME(psset_cdicrf)
void psSet_cdicrf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ICRF current drive, (summed over nphi)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_cdicrf F77NAME(psgetrnk_cdicrf)
void psGetRnk_cdicrf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ICRF current drive, (summed over nphi)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_cdicrf F77NAME(psgetdim_cdicrf)
void psGetDim_cdicrf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for cdicrf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_cdicrf F77NAME(psget_id_cdicrf)
void psGet_id_cdicrf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for cdicrf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_cdicrf F77NAME(psgetrnk_id_cdicrf)
void psGetRnk_id_cdicrf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for cdicrf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_cdicrf F77NAME(psgetdim_id_cdicrf)
void psGetDim_id_cdicrf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get total driven current (all IC srcs)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curich F77NAME(psget_curich)
void psGet_curich(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set total driven current (all IC srcs)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curich F77NAME(psset_curich)
void psSet_curich(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of total driven current (all IC srcs)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curich F77NAME(psgetrnk_curich)
void psGetRnk_curich(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of total driven current (all IC srcs)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curich F77NAME(psgetdim_curich)
void psGetDim_curich(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for curich profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curich F77NAME(psget_id_curich)
void psGet_id_curich(int* iobj, int* data, int* ierr);

/**
 * Get electron heating by minority ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pmine F77NAME(psget_pmine)
void psGet_pmine(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set electron heating by minority ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pmine F77NAME(psset_pmine)
void psSet_pmine(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of electron heating by minority ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pmine F77NAME(psgetrnk_pmine)
void psGetRnk_pmine(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron heating by minority ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pmine F77NAME(psgetdim_pmine)
void psGetDim_pmine(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pmine profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pmine F77NAME(psget_id_pmine)
void psGet_id_pmine(int* iobj, int* data, int* ierr);

/**
 * Get thermal ion heating by minority ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pmini F77NAME(psget_pmini)
void psGet_pmini(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set thermal ion heating by minority ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pmini F77NAME(psset_pmini)
void psSet_pmini(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of thermal ion heating by minority ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pmini F77NAME(psgetrnk_pmini)
void psGetRnk_pmini(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal ion heating by minority ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pmini F77NAME(psgetdim_pmini)
void psGetDim_pmini(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pmini profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pmini F77NAME(psget_id_pmini)
void psGet_id_pmini(int* iobj, int* data, int* ierr);

/**
 * Get (de)thermalization of minority ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pminth F77NAME(psget_pminth)
void psGet_pminth(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set (de)thermalization of minority ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pminth F77NAME(psset_pminth)
void psSet_pminth(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of (de)thermalization of minority ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pminth F77NAME(psgetrnk_pminth)
void psGetRnk_pminth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of (de)thermalization of minority ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pminth F77NAME(psgetdim_pminth)
void psGetDim_pminth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pminth profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pminth F77NAME(psget_id_pminth)
void psGet_id_pminth(int* iobj, int* data, int* ierr);

/**
 * Get minority species density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nmini F77NAME(psget_nmini)
void psGet_nmini(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set minority species density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nmini F77NAME(psset_nmini)
void psSet_nmini(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of minority species density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nmini F77NAME(psgetrnk_nmini)
void psGetRnk_nmini(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of minority species density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nmini F77NAME(psgetdim_nmini)
void psGetDim_nmini(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for nmini profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_nmini F77NAME(psget_id_nmini)
void psGet_id_nmini(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for nmini profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_nmini F77NAME(psgetrnk_id_nmini)
void psGetRnk_id_nmini(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for nmini profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_nmini F77NAME(psgetdim_id_nmini)
void psGetDim_id_nmini(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get minority species <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eperp_mini F77NAME(psget_eperp_mini)
void psGet_eperp_mini(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set minority species <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eperp_mini F77NAME(psset_eperp_mini)
void psSet_eperp_mini(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of minority species <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_eperp_mini F77NAME(psgetrnk_eperp_mini)
void psGetRnk_eperp_mini(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of minority species <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_eperp_mini F77NAME(psgetdim_eperp_mini)
void psGetDim_eperp_mini(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for eperp_mini profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_eperp_mini F77NAME(psget_id_eperp_mini)
void psGet_id_eperp_mini(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for eperp_mini profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_eperp_mini F77NAME(psgetrnk_id_eperp_mini)
void psGetRnk_id_eperp_mini(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for eperp_mini profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_eperp_mini F77NAME(psgetdim_id_eperp_mini)
void psGetDim_id_eperp_mini(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get minority species <Epll>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_epll_mini F77NAME(psget_epll_mini)
void psGet_epll_mini(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set minority species <Epll>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_epll_mini F77NAME(psset_epll_mini)
void psSet_epll_mini(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of minority species <Epll>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_epll_mini F77NAME(psgetrnk_epll_mini)
void psGetRnk_epll_mini(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of minority species <Epll>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_epll_mini F77NAME(psgetdim_epll_mini)
void psGetDim_epll_mini(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for epll_mini profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_epll_mini F77NAME(psget_id_epll_mini)
void psGet_id_epll_mini(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for epll_mini profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_epll_mini F77NAME(psgetrnk_id_epll_mini)
void psGetRnk_id_epll_mini(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for epll_mini profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_epll_mini F77NAME(psgetdim_id_epll_mini)
void psGetDim_id_epll_mini(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get minority ion driven cur (shielded).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curmino F77NAME(psget_curmino)
void psGet_curmino(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set minority ion driven cur (shielded).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curmino F77NAME(psset_curmino)
void psSet_curmino(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of minority ion driven cur (shielded).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curmino F77NAME(psgetrnk_curmino)
void psGetRnk_curmino(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of minority ion driven cur (shielded).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curmino F77NAME(psgetdim_curmino)
void psGetDim_curmino(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for curmino profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curmino F77NAME(psget_id_curmino)
void psGet_id_curmino(int* iobj, int* data, int* ierr);

/**
 * Get beam species density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nbeami F77NAME(psget_nbeami)
void psGet_nbeami(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set beam species density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nbeami F77NAME(psset_nbeami)
void psSet_nbeami(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of beam species density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nbeami F77NAME(psgetrnk_nbeami)
void psGetRnk_nbeami(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam species density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nbeami F77NAME(psgetdim_nbeami)
void psGetDim_nbeami(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for nbeami profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_nbeami F77NAME(psget_id_nbeami)
void psGet_id_nbeami(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for nbeami profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_nbeami F77NAME(psgetrnk_id_nbeami)
void psGetRnk_id_nbeami(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for nbeami profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_nbeami F77NAME(psgetdim_id_nbeami)
void psGetDim_id_nbeami(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam species <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eperp_beami F77NAME(psget_eperp_beami)
void psGet_eperp_beami(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set beam species <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eperp_beami F77NAME(psset_eperp_beami)
void psSet_eperp_beami(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of beam species <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_eperp_beami F77NAME(psgetrnk_eperp_beami)
void psGetRnk_eperp_beami(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam species <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_eperp_beami F77NAME(psgetdim_eperp_beami)
void psGetDim_eperp_beami(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for eperp_beami profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_eperp_beami F77NAME(psget_id_eperp_beami)
void psGet_id_eperp_beami(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for eperp_beami profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_eperp_beami F77NAME(psgetrnk_id_eperp_beami)
void psGetRnk_id_eperp_beami(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for eperp_beami profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_eperp_beami F77NAME(psgetdim_id_eperp_beami)
void psGetDim_id_eperp_beami(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam species <Epll>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_epll_beami F77NAME(psget_epll_beami)
void psGet_epll_beami(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set beam species <Epll>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_epll_beami F77NAME(psset_epll_beami)
void psSet_epll_beami(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of beam species <Epll>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_epll_beami F77NAME(psgetrnk_epll_beami)
void psGetRnk_epll_beami(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam species <Epll>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_epll_beami F77NAME(psgetdim_epll_beami)
void psGetDim_epll_beami(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for epll_beami profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_epll_beami F77NAME(psget_id_epll_beami)
void psGet_id_epll_beami(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for epll_beami profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_epll_beami F77NAME(psgetrnk_id_epll_beami)
void psGetRnk_id_epll_beami(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for epll_beami profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_epll_beami F77NAME(psgetdim_id_epll_beami)
void psGetDim_id_epll_beami(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get average beam ion charge, Note, although H & He beam ions will be fully stripped,, Impurity beams (Ne, Xe, Ar, Kr) may not be..., <state>%q_snbi(1:<state>%nspec_beam) will contain the, density weighted volume average charge over the, profile: ps_xe for H beams, 2*ps_xe for He beams...
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qbeami F77NAME(psget_qbeami)
void psGet_qbeami(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set average beam ion charge, Note, although H & He beam ions will be fully stripped,, Impurity beams (Ne, Xe, Ar, Kr) may not be..., <state>%q_snbi(1:<state>%nspec_beam) will contain the, density weighted volume average charge over the, profile: ps_xe for H beams, 2*ps_xe for He beams...
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qbeami F77NAME(psset_qbeami)
void psSet_qbeami(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of average beam ion charge, Note, although H & He beam ions will be fully stripped,, Impurity beams (Ne, Xe, Ar, Kr) may not be..., <state>%q_snbi(1:<state>%nspec_beam) will contain the, density weighted volume average charge over the, profile: ps_xe for H beams, 2*ps_xe for He beams...
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qbeami F77NAME(psgetrnk_qbeami)
void psGetRnk_qbeami(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of average beam ion charge, Note, although H & He beam ions will be fully stripped,, Impurity beams (Ne, Xe, Ar, Kr) may not be..., <state>%q_snbi(1:<state>%nspec_beam) will contain the, density weighted volume average charge over the, profile: ps_xe for H beams, 2*ps_xe for He beams...
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qbeami F77NAME(psgetdim_qbeami)
void psGetDim_qbeami(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for qbeami profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_qbeami F77NAME(psget_id_qbeami)
void psGet_id_qbeami(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for qbeami profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_qbeami F77NAME(psgetrnk_id_qbeami)
void psGetRnk_id_qbeami(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for qbeami profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_qbeami F77NAME(psgetdim_id_qbeami)
void psGetDim_id_qbeami(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron heating by all beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pbe F77NAME(psget_pbe)
void psGet_pbe(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set electron heating by all beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pbe F77NAME(psset_pbe)
void psSet_pbe(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of electron heating by all beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pbe F77NAME(psgetrnk_pbe)
void psGetRnk_pbe(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron heating by all beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pbe F77NAME(psgetdim_pbe)
void psGetDim_pbe(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pbe profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pbe F77NAME(psget_id_pbe)
void psGet_id_pbe(int* iobj, int* data, int* ierr);

/**
 * Get thermal ion heating by all beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pbi F77NAME(psget_pbi)
void psGet_pbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set thermal ion heating by all beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pbi F77NAME(psset_pbi)
void psSet_pbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of thermal ion heating by all beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pbi F77NAME(psgetrnk_pbi)
void psGetRnk_pbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal ion heating by all beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pbi F77NAME(psgetdim_pbi)
void psGetDim_pbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pbi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pbi F77NAME(psget_id_pbi)
void psGet_id_pbi(int* iobj, int* data, int* ierr);

/**
 * Get thermalization of beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pbth F77NAME(psget_pbth)
void psGet_pbth(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set thermalization of beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pbth F77NAME(psset_pbth)
void psSet_pbth(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of thermalization of beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pbth F77NAME(psgetrnk_pbth)
void psGetRnk_pbth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermalization of beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pbth F77NAME(psgetdim_pbth)
void psGetDim_pbth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pbth profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pbth F77NAME(psget_id_pbth)
void psGet_id_pbth(int* iobj, int* data, int* ierr);

/**
 * Get collisional beam torque to electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqbe F77NAME(psget_tqbe)
void psGet_tqbe(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set collisional beam torque to electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqbe F77NAME(psset_tqbe)
void psSet_tqbe(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of collisional beam torque to electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqbe F77NAME(psgetrnk_tqbe)
void psGetRnk_tqbe(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of collisional beam torque to electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqbe F77NAME(psgetdim_tqbe)
void psGetDim_tqbe(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tqbe profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqbe F77NAME(psget_id_tqbe)
void psGet_id_tqbe(int* iobj, int* data, int* ierr);

/**
 * Get collisional beam torque to thermal ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqbi F77NAME(psget_tqbi)
void psGet_tqbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set collisional beam torque to thermal ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqbi F77NAME(psset_tqbi)
void psSet_tqbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of collisional beam torque to thermal ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqbi F77NAME(psgetrnk_tqbi)
void psGetRnk_tqbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of collisional beam torque to thermal ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqbi F77NAME(psgetdim_tqbi)
void psGetDim_tqbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tqbi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqbi F77NAME(psget_id_tqbi)
void psGet_id_tqbi(int* iobj, int* data, int* ierr);

/**
 * Get JxB beam torque
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqbjxb F77NAME(psget_tqbjxb)
void psGet_tqbjxb(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set JxB beam torque
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqbjxb F77NAME(psset_tqbjxb)
void psSet_tqbjxb(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of JxB beam torque
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqbjxb F77NAME(psgetrnk_tqbjxb)
void psGetRnk_tqbjxb(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of JxB beam torque
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqbjxb F77NAME(psgetdim_tqbjxb)
void psGetDim_tqbjxb(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tqbjxb profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqbjxb F77NAME(psget_id_tqbjxb)
void psGet_id_tqbjxb(int* iobj, int* data, int* ierr);

/**
 * Get momentum in thermalization of beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqbth F77NAME(psget_tqbth)
void psGet_tqbth(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum in thermalization of beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqbth F77NAME(psset_tqbth)
void psSet_tqbth(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum in thermalization of beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqbth F77NAME(psgetrnk_tqbth)
void psGetRnk_tqbth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum in thermalization of beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqbth F77NAME(psgetdim_tqbth)
void psGetDim_tqbth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tqbth profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqbth F77NAME(psget_id_tqbth)
void psGet_id_tqbth(int* iobj, int* data, int* ierr);

/**
 * Get net source, thermal ions & electrons, ...cold electron deposition; ion thermalization;, corrections for charge exchange (beam deposition halo, mainly),, halo recapture, for thermal ions:, sbsce = sbtherm - sb0halo + sb0halo_recap, (caution: sbtherm is defined over beam species list;, sbsce over thermal species list;, sb0halo & sb0halo_recap over the neutral gas species list)., for electrons:, sbsce = sbedep + sbehalo
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sbsce F77NAME(psget_sbsce)
void psGet_sbsce(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set net source, thermal ions & electrons, ...cold electron deposition; ion thermalization;, corrections for charge exchange (beam deposition halo, mainly),, halo recapture, for thermal ions:, sbsce = sbtherm - sb0halo + sb0halo_recap, (caution: sbtherm is defined over beam species list;, sbsce over thermal species list;, sb0halo & sb0halo_recap over the neutral gas species list)., for electrons:, sbsce = sbedep + sbehalo
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sbsce F77NAME(psset_sbsce)
void psSet_sbsce(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of net source, thermal ions & electrons, ...cold electron deposition; ion thermalization;, corrections for charge exchange (beam deposition halo, mainly),, halo recapture, for thermal ions:, sbsce = sbtherm - sb0halo + sb0halo_recap, (caution: sbtherm is defined over beam species list;, sbsce over thermal species list;, sb0halo & sb0halo_recap over the neutral gas species list)., for electrons:, sbsce = sbedep + sbehalo
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sbsce F77NAME(psgetrnk_sbsce)
void psGetRnk_sbsce(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of net source, thermal ions & electrons, ...cold electron deposition; ion thermalization;, corrections for charge exchange (beam deposition halo, mainly),, halo recapture, for thermal ions:, sbsce = sbtherm - sb0halo + sb0halo_recap, (caution: sbtherm is defined over beam species list;, sbsce over thermal species list;, sb0halo & sb0halo_recap over the neutral gas species list)., for electrons:, sbsce = sbedep + sbehalo
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sbsce F77NAME(psgetdim_sbsce)
void psGetDim_sbsce(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sbsce profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sbsce F77NAME(psget_id_sbsce)
void psGet_id_sbsce(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sbsce profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sbsce F77NAME(psgetrnk_id_sbsce)
void psGetRnk_id_sbsce(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sbsce profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sbsce F77NAME(psgetdim_id_sbsce)
void psGetDim_id_sbsce(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam deposition cold electron sce, there is also a contribution due to recapture of charge-exchanged, fast neutrals from partially slowed down beam ions.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sbedep F77NAME(psget_sbedep)
void psGet_sbedep(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam deposition cold electron sce, there is also a contribution due to recapture of charge-exchanged, fast neutrals from partially slowed down beam ions.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sbedep F77NAME(psset_sbedep)
void psSet_sbedep(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam deposition cold electron sce, there is also a contribution due to recapture of charge-exchanged, fast neutrals from partially slowed down beam ions.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sbedep F77NAME(psgetrnk_sbedep)
void psGetRnk_sbedep(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam deposition cold electron sce, there is also a contribution due to recapture of charge-exchanged, fast neutrals from partially slowed down beam ions.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sbedep F77NAME(psgetdim_sbedep)
void psGetDim_sbedep(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for sbedep profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sbedep F77NAME(psget_id_sbedep)
void psGet_id_sbedep(int* iobj, int* data, int* ierr);

/**
 * Get beam ion thermalization, source of slowed down, thermalized beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sbtherm F77NAME(psget_sbtherm)
void psGet_sbtherm(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set beam ion thermalization, source of slowed down, thermalized beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sbtherm F77NAME(psset_sbtherm)
void psSet_sbtherm(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion thermalization, source of slowed down, thermalized beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sbtherm F77NAME(psgetrnk_sbtherm)
void psGetRnk_sbtherm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion thermalization, source of slowed down, thermalized beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sbtherm F77NAME(psgetdim_sbtherm)
void psGetDim_sbtherm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sbtherm profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sbtherm F77NAME(psget_id_sbtherm)
void psGet_id_sbtherm(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sbtherm profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sbtherm F77NAME(psgetrnk_id_sbtherm)
void psGetRnk_id_sbtherm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sbtherm profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sbtherm F77NAME(psgetdim_id_sbtherm)
void psGetDim_id_sbtherm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam dep cx sink, thermal neutrals created by fast neutral deposition and/or recapture, of fast neutrals, psc_halo =~ (3/2)*Ti*(sb0halo_recap-sb0halo)*1.602e-16
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sb0halo F77NAME(psget_sb0halo)
void psGet_sb0halo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set beam dep cx sink, thermal neutrals created by fast neutral deposition and/or recapture, of fast neutrals, psc_halo =~ (3/2)*Ti*(sb0halo_recap-sb0halo)*1.602e-16
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sb0halo F77NAME(psset_sb0halo)
void psSet_sb0halo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of beam dep cx sink, thermal neutrals created by fast neutral deposition and/or recapture, of fast neutrals, psc_halo =~ (3/2)*Ti*(sb0halo_recap-sb0halo)*1.602e-16
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sb0halo F77NAME(psgetrnk_sb0halo)
void psGetRnk_sb0halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam dep cx sink, thermal neutrals created by fast neutral deposition and/or recapture, of fast neutrals, psc_halo =~ (3/2)*Ti*(sb0halo_recap-sb0halo)*1.602e-16
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sb0halo F77NAME(psgetdim_sb0halo)
void psGetDim_sb0halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sb0halo profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sb0halo F77NAME(psget_id_sb0halo)
void psGet_id_sb0halo(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sb0halo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sb0halo F77NAME(psgetrnk_id_sb0halo)
void psGetRnk_id_sb0halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sb0halo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sb0halo F77NAME(psgetdim_id_sb0halo)
void psGetDim_id_sb0halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get cold electron sce due to, recapture of beam halo charge exchange thermal neutrals, = sum Z(i)*sb0halo_recap(i), if electrons do not go into, an impurity charge state spectrum.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sbehalo F77NAME(psget_sbehalo)
void psGet_sbehalo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set cold electron sce due to, recapture of beam halo charge exchange thermal neutrals, = sum Z(i)*sb0halo_recap(i), if electrons do not go into, an impurity charge state spectrum.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sbehalo F77NAME(psset_sbehalo)
void psSet_sbehalo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of cold electron sce due to, recapture of beam halo charge exchange thermal neutrals, = sum Z(i)*sb0halo_recap(i), if electrons do not go into, an impurity charge state spectrum.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sbehalo F77NAME(psgetrnk_sbehalo)
void psGetRnk_sbehalo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of cold electron sce due to, recapture of beam halo charge exchange thermal neutrals, = sum Z(i)*sb0halo_recap(i), if electrons do not go into, an impurity charge state spectrum.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sbehalo F77NAME(psgetdim_sbehalo)
void psGetDim_sbehalo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for sbehalo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sbehalo F77NAME(psget_id_sbehalo)
void psGet_id_sbehalo(int* iobj, int* data, int* ierr);

/**
 * Get cx neutral recapture, recapture of thermal neutrals -- ion source, psc_halo =~ (3/2)*Ti*(sb0halo_recap-sb0halo)*1.602e-16, (cross species CX source/sink contributions may occur), note: electron recapture, cold source = sum (Z(i)*sb0halo_recap(:,i)), where Z(i) is the number of electrons carried by a neutral atom, of species (i).  => this is to be included in sbsce(:,0).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sb0halo_recap F77NAME(psget_sb0halo_recap)
void psGet_sb0halo_recap(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set cx neutral recapture, recapture of thermal neutrals -- ion source, psc_halo =~ (3/2)*Ti*(sb0halo_recap-sb0halo)*1.602e-16, (cross species CX source/sink contributions may occur), note: electron recapture, cold source = sum (Z(i)*sb0halo_recap(:,i)), where Z(i) is the number of electrons carried by a neutral atom, of species (i).  => this is to be included in sbsce(:,0).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sb0halo_recap F77NAME(psset_sb0halo_recap)
void psSet_sb0halo_recap(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of cx neutral recapture, recapture of thermal neutrals -- ion source, psc_halo =~ (3/2)*Ti*(sb0halo_recap-sb0halo)*1.602e-16, (cross species CX source/sink contributions may occur), note: electron recapture, cold source = sum (Z(i)*sb0halo_recap(:,i)), where Z(i) is the number of electrons carried by a neutral atom, of species (i).  => this is to be included in sbsce(:,0).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sb0halo_recap F77NAME(psgetrnk_sb0halo_recap)
void psGetRnk_sb0halo_recap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of cx neutral recapture, recapture of thermal neutrals -- ion source, psc_halo =~ (3/2)*Ti*(sb0halo_recap-sb0halo)*1.602e-16, (cross species CX source/sink contributions may occur), note: electron recapture, cold source = sum (Z(i)*sb0halo_recap(:,i)), where Z(i) is the number of electrons carried by a neutral atom, of species (i).  => this is to be included in sbsce(:,0).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sb0halo_recap F77NAME(psgetdim_sb0halo_recap)
void psGetDim_sb0halo_recap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sb0halo_recap profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sb0halo_recap F77NAME(psget_id_sb0halo_recap)
void psGet_id_sb0halo_recap(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sb0halo_recap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sb0halo_recap F77NAME(psgetrnk_id_sb0halo_recap)
void psGetRnk_id_sb0halo_recap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sb0halo_recap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sb0halo_recap F77NAME(psgetdim_id_sb0halo_recap)
void psGetDim_id_sb0halo_recap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get power in halo neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pb0_halo F77NAME(psget_pb0_halo)
void psGet_pb0_halo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set power in halo neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pb0_halo F77NAME(psset_pb0_halo)
void psSet_pb0_halo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of power in halo neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pb0_halo F77NAME(psgetrnk_pb0_halo)
void psGetRnk_pb0_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of power in halo neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pb0_halo F77NAME(psgetdim_pb0_halo)
void psGetDim_pb0_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pb0_halo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pb0_halo F77NAME(psget_id_pb0_halo)
void psGet_id_pb0_halo(int* iobj, int* data, int* ierr);

/**
 * Get beam halo power: recapture - pb0_halo, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_psc_halo F77NAME(psget_psc_halo)
void psGet_psc_halo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam halo power: recapture - pb0_halo, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_psc_halo F77NAME(psset_psc_halo)
void psSet_psc_halo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam halo power: recapture - pb0_halo, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_psc_halo F77NAME(psgetrnk_psc_halo)
void psGetRnk_psc_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam halo power: recapture - pb0_halo, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_psc_halo F77NAME(psgetdim_psc_halo)
void psGetDim_psc_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for psc_halo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_psc_halo F77NAME(psget_id_psc_halo)
void psGet_id_psc_halo(int* iobj, int* data, int* ierr);

/**
 * Get beam halo driven CX power, (>0 means local source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pcx_halo F77NAME(psget_pcx_halo)
void psGet_pcx_halo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam halo driven CX power, (>0 means local source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pcx_halo F77NAME(psset_pcx_halo)
void psSet_pcx_halo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam halo driven CX power, (>0 means local source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pcx_halo F77NAME(psgetrnk_pcx_halo)
void psGetRnk_pcx_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam halo driven CX power, (>0 means local source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pcx_halo F77NAME(psgetdim_pcx_halo)
void psGetDim_pcx_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pcx_halo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pcx_halo F77NAME(psget_id_pcx_halo)
void psGet_id_pcx_halo(int* iobj, int* data, int* ierr);

/**
 * Get torque of halo neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqb0_halo F77NAME(psget_tqb0_halo)
void psGet_tqb0_halo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set torque of halo neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqb0_halo F77NAME(psset_tqb0_halo)
void psSet_tqb0_halo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of torque of halo neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqb0_halo F77NAME(psgetrnk_tqb0_halo)
void psGetRnk_tqb0_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of torque of halo neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqb0_halo F77NAME(psgetdim_tqb0_halo)
void psGetDim_tqb0_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tqb0_halo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqb0_halo F77NAME(psget_id_tqb0_halo)
void psGet_id_tqb0_halo(int* iobj, int* data, int* ierr);

/**
 * Get beam halo torque: recapture - tqb0_halo, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqsc_halo F77NAME(psget_tqsc_halo)
void psGet_tqsc_halo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam halo torque: recapture - tqb0_halo, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqsc_halo F77NAME(psset_tqsc_halo)
void psSet_tqsc_halo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam halo torque: recapture - tqb0_halo, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqsc_halo F77NAME(psgetrnk_tqsc_halo)
void psGetRnk_tqsc_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam halo torque: recapture - tqb0_halo, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqsc_halo F77NAME(psgetdim_tqsc_halo)
void psGetDim_tqsc_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tqsc_halo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqsc_halo F77NAME(psget_id_tqsc_halo)
void psGet_id_tqsc_halo(int* iobj, int* data, int* ierr);

/**
 * Get beam halo driven CX momentum torque, (positive value = momentum source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqcx_halo F77NAME(psget_tqcx_halo)
void psGet_tqcx_halo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam halo driven CX momentum torque, (positive value = momentum source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqcx_halo F77NAME(psset_tqcx_halo)
void psSet_tqcx_halo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam halo driven CX momentum torque, (positive value = momentum source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqcx_halo F77NAME(psgetrnk_tqcx_halo)
void psGetRnk_tqcx_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam halo driven CX momentum torque, (positive value = momentum source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqcx_halo F77NAME(psgetdim_tqcx_halo)
void psGetDim_tqcx_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tqcx_halo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqcx_halo F77NAME(psget_id_tqcx_halo)
void psGet_id_tqcx_halo(int* iobj, int* data, int* ierr);

/**
 * Get halo thermal neutral density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_n0_halo F77NAME(psget_n0_halo)
void psGet_n0_halo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set halo thermal neutral density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_n0_halo F77NAME(psset_n0_halo)
void psSet_n0_halo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of halo thermal neutral density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_n0_halo F77NAME(psgetrnk_n0_halo)
void psGetRnk_n0_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of halo thermal neutral density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_n0_halo F77NAME(psgetdim_n0_halo)
void psGetDim_n0_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for n0_halo profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_n0_halo F77NAME(psget_id_n0_halo)
void psGet_id_n0_halo(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for n0_halo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_n0_halo F77NAME(psgetrnk_id_n0_halo)
void psGetRnk_id_n0_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for n0_halo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_n0_halo F77NAME(psgetdim_id_n0_halo)
void psGetDim_id_n0_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get halo neutral temperature (2/3)<E0>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_t0_halo F77NAME(psget_t0_halo)
void psGet_t0_halo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set halo neutral temperature (2/3)<E0>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_t0_halo F77NAME(psset_t0_halo)
void psSet_t0_halo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of halo neutral temperature (2/3)<E0>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_t0_halo F77NAME(psgetrnk_t0_halo)
void psGetRnk_t0_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of halo neutral temperature (2/3)<E0>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_t0_halo F77NAME(psgetdim_t0_halo)
void psGetDim_t0_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for T0_halo profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_t0_halo F77NAME(psget_id_t0_halo)
void psGet_id_t0_halo(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for T0_halo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_t0_halo F77NAME(psgetrnk_id_t0_halo)
void psGetRnk_id_t0_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for T0_halo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_t0_halo F77NAME(psgetdim_id_t0_halo)
void psGetDim_id_t0_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get halo neutral toroidal angular velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_omeg0_halo F77NAME(psget_omeg0_halo)
void psGet_omeg0_halo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set halo neutral toroidal angular velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_omeg0_halo F77NAME(psset_omeg0_halo)
void psSet_omeg0_halo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of halo neutral toroidal angular velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_omeg0_halo F77NAME(psgetrnk_omeg0_halo)
void psGetRnk_omeg0_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of halo neutral toroidal angular velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_omeg0_halo F77NAME(psgetdim_omeg0_halo)
void psGetDim_omeg0_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for omeg0_halo profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_omeg0_halo F77NAME(psget_id_omeg0_halo)
void psGet_id_omeg0_halo(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for omeg0_halo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_omeg0_halo F77NAME(psgetrnk_id_omeg0_halo)
void psGetRnk_id_omeg0_halo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for omeg0_halo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_omeg0_halo F77NAME(psgetdim_id_omeg0_halo)
void psGetDim_id_omeg0_halo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam ion driven current (shielded)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curbeam F77NAME(psget_curbeam)
void psGet_curbeam(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam ion driven current (shielded)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curbeam F77NAME(psset_curbeam)
void psSet_curbeam(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion driven current (shielded)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curbeam F77NAME(psgetrnk_curbeam)
void psGetRnk_curbeam(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion driven current (shielded)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curbeam F77NAME(psgetdim_curbeam)
void psGetDim_curbeam(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for curbeam profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curbeam F77NAME(psget_id_curbeam)
void psGet_id_curbeam(int* iobj, int* data, int* ierr);

/**
 * Get sink rate due to CX with beam ions (total)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rate_sinb0x F77NAME(psget_rate_sinb0x)
void psGet_rate_sinb0x(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set sink rate due to CX with beam ions (total)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rate_sinb0x F77NAME(psset_rate_sinb0x)
void psSet_rate_sinb0x(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of sink rate due to CX with beam ions (total)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rate_sinb0x F77NAME(psgetrnk_rate_sinb0x)
void psGetRnk_rate_sinb0x(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of sink rate due to CX with beam ions (total)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rate_sinb0x F77NAME(psgetdim_rate_sinb0x)
void psGetDim_rate_sinb0x(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for rate_sinb0x profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_rate_sinb0x F77NAME(psget_id_rate_sinb0x)
void psGet_id_rate_sinb0x(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for rate_sinb0x profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_rate_sinb0x F77NAME(psgetrnk_id_rate_sinb0x)
void psGetRnk_id_rate_sinb0x(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for rate_sinb0x profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_rate_sinb0x F77NAME(psgetdim_id_rate_sinb0x)
void psGetDim_id_rate_sinb0x(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get sink rate due to CX with beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rate_sinb0xs F77NAME(psget_rate_sinb0xs)
void psGet_rate_sinb0xs(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set sink rate due to CX with beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rate_sinb0xs F77NAME(psset_rate_sinb0xs)
void psSet_rate_sinb0xs(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of sink rate due to CX with beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rate_sinb0xs F77NAME(psgetrnk_rate_sinb0xs)
void psGetRnk_rate_sinb0xs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of sink rate due to CX with beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rate_sinb0xs F77NAME(psgetdim_rate_sinb0xs)
void psGetDim_rate_sinb0xs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for rate_sinb0xs profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_rate_sinb0xs F77NAME(psget_id_rate_sinb0xs)
void psGet_id_rate_sinb0xs(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for rate_sinb0xs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_rate_sinb0xs F77NAME(psgetrnk_id_rate_sinb0xs)
void psGetRnk_id_rate_sinb0xs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for rate_sinb0xs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_rate_sinb0xs F77NAME(psgetdim_id_rate_sinb0xs)
void psGetDim_id_rate_sinb0xs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get sink rate due to ionization by beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rate_sinb0i F77NAME(psget_rate_sinb0i)
void psGet_rate_sinb0i(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set sink rate due to ionization by beam ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rate_sinb0i F77NAME(psset_rate_sinb0i)
void psSet_rate_sinb0i(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of sink rate due to ionization by beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rate_sinb0i F77NAME(psgetrnk_rate_sinb0i)
void psGetRnk_rate_sinb0i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of sink rate due to ionization by beam ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rate_sinb0i F77NAME(psgetdim_rate_sinb0i)
void psGetDim_rate_sinb0i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for rate_sinb0i profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_rate_sinb0i F77NAME(psget_id_rate_sinb0i)
void psGet_id_rate_sinb0i(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for rate_sinb0i profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_rate_sinb0i F77NAME(psgetrnk_id_rate_sinb0i)
void psGetRnk_id_rate_sinb0i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for rate_sinb0i profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_rate_sinb0i F77NAME(psgetdim_id_rate_sinb0i)
void psGetDim_id_rate_sinb0i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nfusi F77NAME(psget_nfusi)
void psGet_nfusi(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set fusion ion density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nfusi F77NAME(psset_nfusi)
void psSet_nfusi(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nfusi F77NAME(psgetrnk_nfusi)
void psGetRnk_nfusi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nfusi F77NAME(psgetdim_nfusi)
void psGetDim_nfusi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for nfusi profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_nfusi F77NAME(psget_id_nfusi)
void psGet_id_nfusi(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for nfusi profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_nfusi F77NAME(psgetrnk_id_nfusi)
void psGetRnk_id_nfusi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for nfusi profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_nfusi F77NAME(psgetdim_id_nfusi)
void psGetDim_id_nfusi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eperp_fusi F77NAME(psget_eperp_fusi)
void psGet_eperp_fusi(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set fusion ion <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eperp_fusi F77NAME(psset_eperp_fusi)
void psSet_eperp_fusi(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_eperp_fusi F77NAME(psgetrnk_eperp_fusi)
void psGetRnk_eperp_fusi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion <Eperp>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_eperp_fusi F77NAME(psgetdim_eperp_fusi)
void psGetDim_eperp_fusi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for eperp_fusi profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_eperp_fusi F77NAME(psget_id_eperp_fusi)
void psGet_id_eperp_fusi(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for eperp_fusi profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_eperp_fusi F77NAME(psgetrnk_id_eperp_fusi)
void psGetRnk_id_eperp_fusi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for eperp_fusi profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_eperp_fusi F77NAME(psgetdim_id_eperp_fusi)
void psGetDim_id_eperp_fusi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion <Epll>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_epll_fusi F77NAME(psget_epll_fusi)
void psGet_epll_fusi(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set fusion ion <Epll>, lab frame
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_epll_fusi F77NAME(psset_epll_fusi)
void psSet_epll_fusi(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion <Epll>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_epll_fusi F77NAME(psgetrnk_epll_fusi)
void psGetRnk_epll_fusi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion <Epll>, lab frame
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_epll_fusi F77NAME(psgetdim_epll_fusi)
void psGetDim_epll_fusi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for epll_fusi profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_epll_fusi F77NAME(psget_id_epll_fusi)
void psGet_id_epll_fusi(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for epll_fusi profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_epll_fusi F77NAME(psgetrnk_id_epll_fusi)
void psGetRnk_id_epll_fusi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for epll_fusi profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_epll_fusi F77NAME(psgetdim_id_epll_fusi)
void psGetDim_id_epll_fusi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron heating by all fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pfuse F77NAME(psget_pfuse)
void psGet_pfuse(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set electron heating by all fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pfuse F77NAME(psset_pfuse)
void psSet_pfuse(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of electron heating by all fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pfuse F77NAME(psgetrnk_pfuse)
void psGetRnk_pfuse(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron heating by all fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pfuse F77NAME(psgetdim_pfuse)
void psGetDim_pfuse(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pfuse profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pfuse F77NAME(psget_id_pfuse)
void psGet_id_pfuse(int* iobj, int* data, int* ierr);

/**
 * Get thermal ion heating by all fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pfusi F77NAME(psget_pfusi)
void psGet_pfusi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set thermal ion heating by all fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pfusi F77NAME(psset_pfusi)
void psSet_pfusi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of thermal ion heating by all fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pfusi F77NAME(psgetrnk_pfusi)
void psGetRnk_pfusi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal ion heating by all fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pfusi F77NAME(psgetdim_pfusi)
void psGetDim_pfusi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pfusi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pfusi F77NAME(psget_id_pfusi)
void psGet_id_pfusi(int* iobj, int* data, int* ierr);

/**
 * Get thermalization of fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pfusth F77NAME(psget_pfusth)
void psGet_pfusth(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set thermalization of fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pfusth F77NAME(psset_pfusth)
void psSet_pfusth(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of thermalization of fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pfusth F77NAME(psgetrnk_pfusth)
void psGetRnk_pfusth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermalization of fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pfusth F77NAME(psgetdim_pfusth)
void psGetDim_pfusth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pfusth profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pfusth F77NAME(psget_id_pfusth)
void psGet_id_pfusth(int* iobj, int* data, int* ierr);

/**
 * Get net thermalization source of fusion ions, sources due to fusion ions:  fusion ion thermalization;, corrections due to charge exchange effects (usually small).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sfsce F77NAME(psget_sfsce)
void psGet_sfsce(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set net thermalization source of fusion ions, sources due to fusion ions:  fusion ion thermalization;, corrections due to charge exchange effects (usually small).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sfsce F77NAME(psset_sfsce)
void psSet_sfsce(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of net thermalization source of fusion ions, sources due to fusion ions:  fusion ion thermalization;, corrections due to charge exchange effects (usually small).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sfsce F77NAME(psgetrnk_sfsce)
void psGetRnk_sfsce(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of net thermalization source of fusion ions, sources due to fusion ions:  fusion ion thermalization;, corrections due to charge exchange effects (usually small).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sfsce F77NAME(psgetdim_sfsce)
void psGetDim_sfsce(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sfsce profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sfsce F77NAME(psget_id_sfsce)
void psGet_id_sfsce(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sfsce profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sfsce F77NAME(psgetrnk_id_sfsce)
void psGetRnk_id_sfsce(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sfsce profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sfsce F77NAME(psgetdim_id_sfsce)
void psGetDim_id_sfsce(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion thermalization
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sftherm F77NAME(psget_sftherm)
void psGet_sftherm(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set fusion ion thermalization
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sftherm F77NAME(psset_sftherm)
void psSet_sftherm(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion thermalization
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sftherm F77NAME(psgetrnk_sftherm)
void psGetRnk_sftherm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion thermalization
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sftherm F77NAME(psgetdim_sftherm)
void psGetDim_sftherm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sftherm profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sftherm F77NAME(psget_id_sftherm)
void psGet_id_sftherm(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sftherm profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sftherm F77NAME(psgetrnk_id_sftherm)
void psGetRnk_id_sftherm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sftherm profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sftherm F77NAME(psgetdim_id_sftherm)
void psGetDim_id_sftherm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion driven current (shielded)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curfusn F77NAME(psget_curfusn)
void psGet_curfusn(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set fusion ion driven current (shielded)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curfusn F77NAME(psset_curfusn)
void psSet_curfusn(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion driven current (shielded)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curfusn F77NAME(psgetrnk_curfusn)
void psGetRnk_curfusn(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion driven current (shielded)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curfusn F77NAME(psgetdim_curfusn)
void psGetDim_curfusn(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for curfusn profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curfusn F77NAME(psget_id_curfusn)
void psGet_id_curfusn(int* iobj, int* data, int* ierr);

/**
 * Get sink rate due to CX with fusion ions (total)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rate_sinf0x F77NAME(psget_rate_sinf0x)
void psGet_rate_sinf0x(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set sink rate due to CX with fusion ions (total)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rate_sinf0x F77NAME(psset_rate_sinf0x)
void psSet_rate_sinf0x(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of sink rate due to CX with fusion ions (total)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rate_sinf0x F77NAME(psgetrnk_rate_sinf0x)
void psGetRnk_rate_sinf0x(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of sink rate due to CX with fusion ions (total)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rate_sinf0x F77NAME(psgetdim_rate_sinf0x)
void psGetDim_rate_sinf0x(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for rate_sinf0x profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_rate_sinf0x F77NAME(psget_id_rate_sinf0x)
void psGet_id_rate_sinf0x(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for rate_sinf0x profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_rate_sinf0x F77NAME(psgetrnk_id_rate_sinf0x)
void psGetRnk_id_rate_sinf0x(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for rate_sinf0x profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_rate_sinf0x F77NAME(psgetdim_id_rate_sinf0x)
void psGetDim_id_rate_sinf0x(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get sink rate due to CX with fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rate_sinf0xs F77NAME(psget_rate_sinf0xs)
void psGet_rate_sinf0xs(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set sink rate due to CX with fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rate_sinf0xs F77NAME(psset_rate_sinf0xs)
void psSet_rate_sinf0xs(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of sink rate due to CX with fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rate_sinf0xs F77NAME(psgetrnk_rate_sinf0xs)
void psGetRnk_rate_sinf0xs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of sink rate due to CX with fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rate_sinf0xs F77NAME(psgetdim_rate_sinf0xs)
void psGetDim_rate_sinf0xs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for rate_sinf0xs profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_rate_sinf0xs F77NAME(psget_id_rate_sinf0xs)
void psGet_id_rate_sinf0xs(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for rate_sinf0xs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_rate_sinf0xs F77NAME(psgetrnk_id_rate_sinf0xs)
void psGetRnk_id_rate_sinf0xs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for rate_sinf0xs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_rate_sinf0xs F77NAME(psgetdim_id_rate_sinf0xs)
void psGetDim_id_rate_sinf0xs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get sink rate due to ionization by fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_rate_sinf0i F77NAME(psget_rate_sinf0i)
void psGet_rate_sinf0i(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set sink rate due to ionization by fusion ions
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_rate_sinf0i F77NAME(psset_rate_sinf0i)
void psSet_rate_sinf0i(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of sink rate due to ionization by fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_rate_sinf0i F77NAME(psgetrnk_rate_sinf0i)
void psGetRnk_rate_sinf0i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of sink rate due to ionization by fusion ions
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_rate_sinf0i F77NAME(psgetdim_rate_sinf0i)
void psGetDim_rate_sinf0i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for rate_sinf0i profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_rate_sinf0i F77NAME(psget_id_rate_sinf0i)
void psGet_id_rate_sinf0i(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for rate_sinf0i profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_rate_sinf0i F77NAME(psgetrnk_id_rate_sinf0i)
void psGetRnk_id_rate_sinf0i(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for rate_sinf0i profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_rate_sinf0i F77NAME(psgetdim_id_rate_sinf0i)
void psGetDim_id_rate_sinf0i(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron heating by pellet ablation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ppele F77NAME(psget_ppele)
void psGet_ppele(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set electron heating by pellet ablation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ppele F77NAME(psset_ppele)
void psSet_ppele(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of electron heating by pellet ablation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ppele F77NAME(psgetrnk_ppele)
void psGetRnk_ppele(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron heating by pellet ablation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ppele F77NAME(psgetdim_ppele)
void psGetDim_ppele(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for ppele profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ppele F77NAME(psget_id_ppele)
void psGet_id_ppele(int* iobj, int* data, int* ierr);

/**
 * Get thermal ion heating by pellet ablation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ppeli F77NAME(psget_ppeli)
void psGet_ppeli(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set thermal ion heating by pellet ablation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ppeli F77NAME(psset_ppeli)
void psSet_ppeli(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of thermal ion heating by pellet ablation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ppeli F77NAME(psgetrnk_ppeli)
void psGetRnk_ppeli(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of thermal ion heating by pellet ablation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ppeli F77NAME(psgetdim_ppeli)
void psGetDim_ppeli(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for ppeli profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ppeli F77NAME(psget_id_ppeli)
void psGet_id_ppeli(int* iobj, int* data, int* ierr);

/**
 * Get net source, thermal ions & electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_spsce F77NAME(psget_spsce)
void psGet_spsce(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set net source, thermal ions & electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_spsce F77NAME(psset_spsce)
void psSet_spsce(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of net source, thermal ions & electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_spsce F77NAME(psgetrnk_spsce)
void psGetRnk_spsce(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of net source, thermal ions & electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_spsce F77NAME(psgetdim_spsce)
void psGetDim_spsce(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for spsce profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_spsce F77NAME(psget_id_spsce)
void psGet_id_spsce(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for spsce profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_spsce F77NAME(psgetrnk_id_spsce)
void psGetRnk_id_spsce(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for spsce profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_spsce F77NAME(psgetdim_id_spsce)
void psGetDim_id_spsce(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get current carried by fast electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_cur_rw F77NAME(psget_cur_rw)
void psGet_cur_rw(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set current carried by fast electrons
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_cur_rw F77NAME(psset_cur_rw)
void psSet_cur_rw(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of current carried by fast electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_cur_rw F77NAME(psgetrnk_cur_rw)
void psGetRnk_cur_rw(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of current carried by fast electrons
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_cur_rw F77NAME(psgetdim_cur_rw)
void psGetDim_cur_rw(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for cur_rw profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_cur_rw F77NAME(psget_id_cur_rw)
void psGet_id_cur_rw(int* iobj, int* data, int* ierr);

/**
 * Get sensitivity to loop volts
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dcur_rw_dvloop F77NAME(psget_dcur_rw_dvloop)
void psGet_dcur_rw_dvloop(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set sensitivity to loop volts
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dcur_rw_dvloop F77NAME(psset_dcur_rw_dvloop)
void psSet_dcur_rw_dvloop(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of sensitivity to loop volts
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dcur_rw_dvloop F77NAME(psgetrnk_dcur_rw_dvloop)
void psGetRnk_dcur_rw_dvloop(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of sensitivity to loop volts
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dcur_rw_dvloop F77NAME(psgetdim_dcur_rw_dvloop)
void psGetDim_dcur_rw_dvloop(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for dcur_rw_dVloop profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_dcur_rw_dvloop F77NAME(psget_id_dcur_rw_dvloop)
void psGet_id_dcur_rw_dvloop(int* iobj, int* data, int* ierr);

/**
 * Get runaway electron density, nrw/ne << 1 is assumed
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nrw F77NAME(psget_nrw)
void psGet_nrw(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set runaway electron density, nrw/ne << 1 is assumed
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nrw F77NAME(psset_nrw)
void psSet_nrw(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of runaway electron density, nrw/ne << 1 is assumed
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nrw F77NAME(psgetrnk_nrw)
void psGetRnk_nrw(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of runaway electron density, nrw/ne << 1 is assumed
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nrw F77NAME(psgetdim_nrw)
void psGetDim_nrw(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for nrw profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_nrw F77NAME(psget_id_nrw)
void psGet_id_nrw(int* iobj, int* data, int* ierr);

/**
 * Get runaway electron <Eperp>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_eperp_rw F77NAME(psget_eperp_rw)
void psGet_eperp_rw(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set runaway electron <Eperp>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_eperp_rw F77NAME(psset_eperp_rw)
void psSet_eperp_rw(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of runaway electron <Eperp>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_eperp_rw F77NAME(psgetrnk_eperp_rw)
void psGetRnk_eperp_rw(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of runaway electron <Eperp>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_eperp_rw F77NAME(psgetdim_eperp_rw)
void psGetDim_eperp_rw(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for eperp_rw profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_eperp_rw F77NAME(psget_id_eperp_rw)
void psGet_id_eperp_rw(int* iobj, int* data, int* ierr);

/**
 * Get runaway electron <Epll>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_epll_rw F77NAME(psget_epll_rw)
void psGet_epll_rw(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set runaway electron <Epll>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_epll_rw F77NAME(psset_epll_rw)
void psSet_epll_rw(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of runaway electron <Epll>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_epll_rw F77NAME(psgetrnk_epll_rw)
void psGetRnk_epll_rw(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of runaway electron <Epll>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_epll_rw F77NAME(psgetdim_epll_rw)
void psGetDim_epll_rw(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for epll_rw profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_epll_rw F77NAME(psget_id_epll_rw)
void psGet_id_epll_rw(int* iobj, int* data, int* ierr);

/**
 * Get total radiated power
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_prad F77NAME(psget_prad)
void psGet_prad(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set total radiated power
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_prad F77NAME(psset_prad)
void psSet_prad(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of total radiated power
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_prad F77NAME(psgetrnk_prad)
void psGetRnk_prad(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of total radiated power
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_prad F77NAME(psgetdim_prad)
void psGetDim_prad(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for prad profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_prad F77NAME(psget_id_prad)
void psGet_id_prad(int* iobj, int* data, int* ierr);

/**
 * Get cyclotron radiation contribution
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_prad_cy F77NAME(psget_prad_cy)
void psGet_prad_cy(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set cyclotron radiation contribution
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_prad_cy F77NAME(psset_prad_cy)
void psSet_prad_cy(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of cyclotron radiation contribution
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_prad_cy F77NAME(psgetrnk_prad_cy)
void psGetRnk_prad_cy(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of cyclotron radiation contribution
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_prad_cy F77NAME(psgetdim_prad_cy)
void psGetDim_prad_cy(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for prad_cy profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_prad_cy F77NAME(psget_id_prad_cy)
void psGet_id_prad_cy(int* iobj, int* data, int* ierr);

/**
 * Get bremsstrahlung contribution
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_prad_br F77NAME(psget_prad_br)
void psGet_prad_br(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set bremsstrahlung contribution
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_prad_br F77NAME(psset_prad_br)
void psSet_prad_br(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of bremsstrahlung contribution
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_prad_br F77NAME(psgetrnk_prad_br)
void psGetRnk_prad_br(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of bremsstrahlung contribution
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_prad_br F77NAME(psgetdim_prad_br)
void psGetDim_prad_br(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for prad_br profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_prad_br F77NAME(psget_id_prad_br)
void psGet_id_prad_br(int* iobj, int* data, int* ierr);

/**
 * Get line radiation contribution
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_prad_li F77NAME(psget_prad_li)
void psGet_prad_li(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set line radiation contribution
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_prad_li F77NAME(psset_prad_li)
void psSet_prad_li(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of line radiation contribution
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_prad_li F77NAME(psgetrnk_prad_li)
void psGetRnk_prad_li(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of line radiation contribution
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_prad_li F77NAME(psgetdim_prad_li)
void psGetDim_prad_li(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for prad_li profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_prad_li F77NAME(psget_id_prad_li)
void psGet_id_prad_li(int* iobj, int* data, int* ierr);

/**
 * Get species source/sinks driven by xs(1:nxs)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sii_xs F77NAME(psget_sii_xs)
void psGet_sii_xs(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set species source/sinks driven by xs(1:nxs)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sii_xs F77NAME(psset_sii_xs)
void psSet_sii_xs(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of species source/sinks driven by xs(1:nxs)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sii_xs F77NAME(psgetrnk_sii_xs)
void psGetRnk_sii_xs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of species source/sinks driven by xs(1:nxs)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sii_xs F77NAME(psgetdim_sii_xs)
void psGetDim_sii_xs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sii_xs profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sii_xs F77NAME(psget_id_sii_xs)
void psGet_id_sii_xs(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sii_xs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sii_xs F77NAME(psgetrnk_id_sii_xs)
void psGetRnk_id_sii_xs(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sii_xs profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sii_xs F77NAME(psgetdim_id_sii_xs)
void psGetDim_id_sii_xs(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ionization power per unit influx (sc0)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qioniz F77NAME(psget_qioniz)
void psGet_qioniz(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ionization power per unit influx (sc0)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qioniz F77NAME(psset_qioniz)
void psSet_qioniz(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ionization power per unit influx (sc0)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qioniz F77NAME(psgetrnk_qioniz)
void psGetRnk_qioniz(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ionization power per unit influx (sc0)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qioniz F77NAME(psgetdim_qioniz)
void psGetDim_qioniz(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for qioniz profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_qioniz F77NAME(psget_id_qioniz)
void psGet_id_qioniz(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for qioniz profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_qioniz F77NAME(psgetrnk_id_qioniz)
void psGetRnk_id_qioniz(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for qioniz profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_qioniz F77NAME(psgetdim_id_qioniz)
void psGetDim_id_qioniz(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get cx power per unit influx per (T0-Ti)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_qqcx F77NAME(psget_qqcx)
void psGet_qqcx(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set cx power per unit influx per (T0-Ti)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_qqcx F77NAME(psset_qqcx)
void psSet_qqcx(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of cx power per unit influx per (T0-Ti)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_qqcx F77NAME(psgetrnk_qqcx)
void psGetRnk_qqcx(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of cx power per unit influx per (T0-Ti)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_qqcx F77NAME(psgetdim_qqcx)
void psGetDim_qqcx(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for qqcx profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_qqcx F77NAME(psget_id_qqcx)
void psGet_id_qqcx(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for qqcx profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_qqcx F77NAME(psgetrnk_id_qqcx)
void psGetRnk_id_qqcx(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for qqcx profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_qqcx F77NAME(psgetdim_id_qqcx)
void psGetDim_id_qqcx(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ionization torque per unit influx (sc0)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqioniz F77NAME(psget_tqioniz)
void psGet_tqioniz(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ionization torque per unit influx (sc0)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqioniz F77NAME(psset_tqioniz)
void psSet_tqioniz(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ionization torque per unit influx (sc0)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqioniz F77NAME(psgetrnk_tqioniz)
void psGetRnk_tqioniz(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ionization torque per unit influx (sc0)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqioniz F77NAME(psgetdim_tqioniz)
void psGetDim_tqioniz(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for tqioniz profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqioniz F77NAME(psget_id_tqioniz)
void psGet_id_tqioniz(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for tqioniz profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_tqioniz F77NAME(psgetrnk_id_tqioniz)
void psGetRnk_id_tqioniz(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for tqioniz profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_tqioniz F77NAME(psgetdim_id_tqioniz)
void psGetDim_id_tqioniz(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get cx torque per unit influx per (omeg0-omegi)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqqcx F77NAME(psget_tqqcx)
void psGet_tqqcx(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set cx torque per unit influx per (omeg0-omegi)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqqcx F77NAME(psset_tqqcx)
void psSet_tqqcx(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of cx torque per unit influx per (omeg0-omegi)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqqcx F77NAME(psgetrnk_tqqcx)
void psGetRnk_tqqcx(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of cx torque per unit influx per (omeg0-omegi)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqqcx F77NAME(psgetdim_tqqcx)
void psGetDim_tqqcx(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for tqqcx profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqqcx F77NAME(psget_id_tqqcx)
void psGet_id_tqqcx(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for tqqcx profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_tqqcx F77NAME(psgetrnk_id_tqqcx)
void psGetRnk_id_tqqcx(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for tqqcx profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_tqqcx F77NAME(psgetdim_id_tqqcx)
void psGetDim_id_tqqcx(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get effective neutral temperature for CX power, (use with qqcx)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_t0cx F77NAME(psget_t0cx)
void psGet_t0cx(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set effective neutral temperature for CX power, (use with qqcx)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_t0cx F77NAME(psset_t0cx)
void psSet_t0cx(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of effective neutral temperature for CX power, (use with qqcx)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_t0cx F77NAME(psgetrnk_t0cx)
void psGetRnk_t0cx(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of effective neutral temperature for CX power, (use with qqcx)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_t0cx F77NAME(psgetdim_t0cx)
void psGetDim_t0cx(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for T0cx profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_t0cx F77NAME(psget_id_t0cx)
void psGet_id_t0cx(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for T0cx profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_t0cx F77NAME(psgetrnk_id_t0cx)
void psGetRnk_id_t0cx(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for T0cx profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_t0cx F77NAME(psgetdim_id_t0cx)
void psGetDim_id_t0cx(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get effective neutral angular velocity for CX torque, (use with tqqcx)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_omeg0cx F77NAME(psget_omeg0cx)
void psGet_omeg0cx(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set effective neutral angular velocity for CX torque, (use with tqqcx)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_omeg0cx F77NAME(psset_omeg0cx)
void psSet_omeg0cx(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of effective neutral angular velocity for CX torque, (use with tqqcx)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_omeg0cx F77NAME(psgetrnk_omeg0cx)
void psGetRnk_omeg0cx(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of effective neutral angular velocity for CX torque, (use with tqqcx)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_omeg0cx F77NAME(psgetdim_omeg0cx)
void psGetDim_omeg0cx(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for omeg0cx profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_omeg0cx F77NAME(psget_id_omeg0cx)
void psGet_id_omeg0cx(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for omeg0cx profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_omeg0cx F77NAME(psgetrnk_id_omeg0cx)
void psGetRnk_id_omeg0cx(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for omeg0cx profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_omeg0cx F77NAME(psgetdim_id_omeg0cx)
void psGetDim_id_omeg0cx(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get gas species source/sinks per unit species influx, due to charge exchange, single species neutral, source (sc0(i)) leads to multi species ion sce., remark (Jan. 2009):, charge exchange can affect impurity charge, states -- may need to add profiles to track, this interaction, in the future...
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sprof0 F77NAME(psget_sprof0)
void psGet_sprof0(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set gas species source/sinks per unit species influx, due to charge exchange, single species neutral, source (sc0(i)) leads to multi species ion sce., remark (Jan. 2009):, charge exchange can affect impurity charge, states -- may need to add profiles to track, this interaction, in the future...
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sprof0 F77NAME(psset_sprof0)
void psSet_sprof0(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of gas species source/sinks per unit species influx, due to charge exchange, single species neutral, source (sc0(i)) leads to multi species ion sce., remark (Jan. 2009):, charge exchange can affect impurity charge, states -- may need to add profiles to track, this interaction, in the future...
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sprof0 F77NAME(psgetrnk_sprof0)
void psGetRnk_sprof0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of gas species source/sinks per unit species influx, due to charge exchange, single species neutral, source (sc0(i)) leads to multi species ion sce., remark (Jan. 2009):, charge exchange can affect impurity charge, states -- may need to add profiles to track, this interaction, in the future...
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sprof0 F77NAME(psgetdim_sprof0)
void psGetDim_sprof0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sprof0 profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sprof0 F77NAME(psget_id_sprof0)
void psGet_id_sprof0(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sprof0 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sprof0 F77NAME(psgetrnk_id_sprof0)
void psGetRnk_id_sprof0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sprof0 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sprof0 F77NAME(psgetdim_id_sprof0)
void psGetDim_id_sprof0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron source per unit neutral species influx
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sprof0e F77NAME(psget_sprof0e)
void psGet_sprof0e(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set electron source per unit neutral species influx
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sprof0e F77NAME(psset_sprof0e)
void psSet_sprof0e(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of electron source per unit neutral species influx
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sprof0e F77NAME(psgetrnk_sprof0e)
void psGetRnk_sprof0e(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron source per unit neutral species influx
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sprof0e F77NAME(psgetdim_sprof0e)
void psGetDim_sprof0e(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sprof0e profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sprof0e F77NAME(psget_id_sprof0e)
void psGet_id_sprof0e(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sprof0e profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sprof0e F77NAME(psgetrnk_id_sprof0e)
void psGetRnk_id_sprof0e(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sprof0e profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sprof0e F77NAME(psgetdim_id_sprof0e)
void psGetDim_id_sprof0e(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get neutral density per unit gas influx (sc0), for each neutral specie due to each source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_n0norm F77NAME(psget_n0norm)
void psGet_n0norm(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set neutral density per unit gas influx (sc0), for each neutral specie due to each source
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_n0norm F77NAME(psset_n0norm)
void psSet_n0norm(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of neutral density per unit gas influx (sc0), for each neutral specie due to each source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_n0norm F77NAME(psgetrnk_n0norm)
void psGetRnk_n0norm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of neutral density per unit gas influx (sc0), for each neutral specie due to each source
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_n0norm F77NAME(psgetdim_n0norm)
void psGetDim_n0norm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for n0norm profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_n0norm F77NAME(psget_id_n0norm)
void psGet_id_n0norm(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for n0norm profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_n0norm F77NAME(psgetrnk_id_n0norm)
void psGetRnk_id_n0norm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for n0norm profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_n0norm F77NAME(psgetdim_id_n0norm)
void psGetDim_id_n0norm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get neutral temperature (2/3)<E0>, in co-rotating frame for each neutral specie, due each neutral influx (sc0)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_t0sc0 F77NAME(psget_t0sc0)
void psGet_t0sc0(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set neutral temperature (2/3)<E0>, in co-rotating frame for each neutral specie, due each neutral influx (sc0)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_t0sc0 F77NAME(psset_t0sc0)
void psSet_t0sc0(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of neutral temperature (2/3)<E0>, in co-rotating frame for each neutral specie, due each neutral influx (sc0)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_t0sc0 F77NAME(psgetrnk_t0sc0)
void psGetRnk_t0sc0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of neutral temperature (2/3)<E0>, in co-rotating frame for each neutral specie, due each neutral influx (sc0)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_t0sc0 F77NAME(psgetdim_t0sc0)
void psGetDim_t0sc0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for T0sc0 profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_t0sc0 F77NAME(psget_id_t0sc0)
void psGet_id_t0sc0(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for T0sc0 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_t0sc0 F77NAME(psgetrnk_id_t0sc0)
void psGetRnk_id_t0sc0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for T0sc0 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_t0sc0 F77NAME(psgetdim_id_t0sc0)
void psGetDim_id_t0sc0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get toroidal angular velocity, for each neutral specie due to each influx (sc0).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_omeg0sc0 F77NAME(psget_omeg0sc0)
void psGet_omeg0sc0(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set toroidal angular velocity, for each neutral specie due to each influx (sc0).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_omeg0sc0 F77NAME(psset_omeg0sc0)
void psSet_omeg0sc0(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of toroidal angular velocity, for each neutral specie due to each influx (sc0).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_omeg0sc0 F77NAME(psgetrnk_omeg0sc0)
void psGetRnk_omeg0sc0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of toroidal angular velocity, for each neutral specie due to each influx (sc0).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_omeg0sc0 F77NAME(psgetdim_omeg0sc0)
void psGetDim_omeg0sc0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for omeg0sc0 profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_omeg0sc0 F77NAME(psget_id_omeg0sc0)
void psGet_id_omeg0sc0(int* iobj, const int* n1, const int* n2, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for omeg0sc0 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_omeg0sc0 F77NAME(psgetrnk_id_omeg0sc0)
void psGetRnk_id_omeg0sc0(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for omeg0sc0 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_omeg0sc0 F77NAME(psgetdim_id_omeg0sc0)
void psGetDim_id_omeg0sc0(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get recombination neutral sce, psc_reco =~ (3/2)*Ti*(s0reco_recap-s0reco)*1.602e-16, note: electron sink = sum (Z(i)*s0reco(:,i)), where Z(i) is the number of electrons carried by a neutral atom, of species (i).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_s0reco F77NAME(psget_s0reco)
void psGet_s0reco(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set recombination neutral sce, psc_reco =~ (3/2)*Ti*(s0reco_recap-s0reco)*1.602e-16, note: electron sink = sum (Z(i)*s0reco(:,i)), where Z(i) is the number of electrons carried by a neutral atom, of species (i).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_s0reco F77NAME(psset_s0reco)
void psSet_s0reco(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of recombination neutral sce, psc_reco =~ (3/2)*Ti*(s0reco_recap-s0reco)*1.602e-16, note: electron sink = sum (Z(i)*s0reco(:,i)), where Z(i) is the number of electrons carried by a neutral atom, of species (i).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_s0reco F77NAME(psgetrnk_s0reco)
void psGetRnk_s0reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of recombination neutral sce, psc_reco =~ (3/2)*Ti*(s0reco_recap-s0reco)*1.602e-16, note: electron sink = sum (Z(i)*s0reco(:,i)), where Z(i) is the number of electrons carried by a neutral atom, of species (i).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_s0reco F77NAME(psgetdim_s0reco)
void psGetDim_s0reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for s0reco profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_s0reco F77NAME(psget_id_s0reco)
void psGet_id_s0reco(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for s0reco profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_s0reco F77NAME(psgetrnk_id_s0reco)
void psGetRnk_id_s0reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for s0reco profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_s0reco F77NAME(psgetdim_id_s0reco)
void psGetDim_id_s0reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get recombination neutrals recapture, recapture of recombination source thermal neutrals -- ion source, psc_reco =~ (3/2)*Ti*(sb0reco_recap-sb0reco)*1.602e-16
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_s0reco_recap F77NAME(psget_s0reco_recap)
void psGet_s0reco_recap(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set recombination neutrals recapture, recapture of recombination source thermal neutrals -- ion source, psc_reco =~ (3/2)*Ti*(sb0reco_recap-sb0reco)*1.602e-16
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_s0reco_recap F77NAME(psset_s0reco_recap)
void psSet_s0reco_recap(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of recombination neutrals recapture, recapture of recombination source thermal neutrals -- ion source, psc_reco =~ (3/2)*Ti*(sb0reco_recap-sb0reco)*1.602e-16
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_s0reco_recap F77NAME(psgetrnk_s0reco_recap)
void psGetRnk_s0reco_recap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of recombination neutrals recapture, recapture of recombination source thermal neutrals -- ion source, psc_reco =~ (3/2)*Ti*(sb0reco_recap-sb0reco)*1.602e-16
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_s0reco_recap F77NAME(psgetdim_s0reco_recap)
void psGetDim_s0reco_recap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for s0reco_recap profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_s0reco_recap F77NAME(psget_id_s0reco_recap)
void psGet_id_s0reco_recap(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for s0reco_recap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_s0reco_recap F77NAME(psgetrnk_id_s0reco_recap)
void psGetRnk_id_s0reco_recap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for s0reco_recap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_s0reco_recap F77NAME(psgetdim_id_s0reco_recap)
void psGetDim_id_s0reco_recap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get net electron source associated with recombination:, sum[-Z(i)*s0reco(:,i) + Z(i)*s0reco_recap(:,i)]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_s0reco_e F77NAME(psget_s0reco_e)
void psGet_s0reco_e(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set net electron source associated with recombination:, sum[-Z(i)*s0reco(:,i) + Z(i)*s0reco_recap(:,i)]
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_s0reco_e F77NAME(psset_s0reco_e)
void psSet_s0reco_e(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of net electron source associated with recombination:, sum[-Z(i)*s0reco(:,i) + Z(i)*s0reco_recap(:,i)]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_s0reco_e F77NAME(psgetrnk_s0reco_e)
void psGetRnk_s0reco_e(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of net electron source associated with recombination:, sum[-Z(i)*s0reco(:,i) + Z(i)*s0reco_recap(:,i)]
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_s0reco_e F77NAME(psgetdim_s0reco_e)
void psGetDim_s0reco_e(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for s0reco_e profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_s0reco_e F77NAME(psget_id_s0reco_e)
void psGet_id_s0reco_e(int* iobj, int* data, int* ierr);

/**
 * Get power in recombination neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_p0_reco F77NAME(psget_p0_reco)
void psGet_p0_reco(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set power in recombination neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_p0_reco F77NAME(psset_p0_reco)
void psSet_p0_reco(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of power in recombination neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_p0_reco F77NAME(psgetrnk_p0_reco)
void psGetRnk_p0_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of power in recombination neutral source, (loss from thermal ions)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_p0_reco F77NAME(psgetdim_p0_reco)
void psGetDim_p0_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for p0_reco profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_p0_reco F77NAME(psget_id_p0_reco)
void psGet_id_p0_reco(int* iobj, int* data, int* ierr);

/**
 * Get reco power: recapture - p0_reco, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_psc_reco F77NAME(psget_psc_reco)
void psGet_psc_reco(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set reco power: recapture - p0_reco, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_psc_reco F77NAME(psset_psc_reco)
void psSet_psc_reco(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of reco power: recapture - p0_reco, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_psc_reco F77NAME(psgetrnk_psc_reco)
void psGetRnk_psc_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of reco power: recapture - p0_reco, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_psc_reco F77NAME(psgetdim_psc_reco)
void psGetDim_psc_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for psc_reco profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_psc_reco F77NAME(psget_id_psc_reco)
void psGet_id_psc_reco(int* iobj, int* data, int* ierr);

/**
 * Get reco driven CX power, (>0 => local source to thermal ions), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pcx_reco F77NAME(psget_pcx_reco)
void psGet_pcx_reco(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set reco driven CX power, (>0 => local source to thermal ions), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pcx_reco F77NAME(psset_pcx_reco)
void psSet_pcx_reco(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of reco driven CX power, (>0 => local source to thermal ions), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pcx_reco F77NAME(psgetrnk_pcx_reco)
void psGetRnk_pcx_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of reco driven CX power, (>0 => local source to thermal ions), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pcx_reco F77NAME(psgetdim_pcx_reco)
void psGetDim_pcx_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pcx_reco profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pcx_reco F77NAME(psget_id_pcx_reco)
void psGet_id_pcx_reco(int* iobj, int* data, int* ierr);

/**
 * Get torque of recombination neutral source, (momentum loss from thermal ions)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tq0_reco F77NAME(psget_tq0_reco)
void psGet_tq0_reco(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set torque of recombination neutral source, (momentum loss from thermal ions)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tq0_reco F77NAME(psset_tq0_reco)
void psSet_tq0_reco(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of torque of recombination neutral source, (momentum loss from thermal ions)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tq0_reco F77NAME(psgetrnk_tq0_reco)
void psGetRnk_tq0_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of torque of recombination neutral source, (momentum loss from thermal ions)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tq0_reco F77NAME(psgetdim_tq0_reco)
void psGetDim_tq0_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tq0_reco profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tq0_reco F77NAME(psget_id_tq0_reco)
void psGet_id_tq0_reco(int* iobj, int* data, int* ierr);

/**
 * Get reco torque: recapture - tq0_reco, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqsc_reco F77NAME(psget_tqsc_reco)
void psGet_tqsc_reco(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set reco torque: recapture - tq0_reco, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqsc_reco F77NAME(psset_tqsc_reco)
void psSet_tqsc_reco(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of reco torque: recapture - tq0_reco, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqsc_reco F77NAME(psgetrnk_tqsc_reco)
void psGetRnk_tqsc_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of reco torque: recapture - tq0_reco, (net source/sink to thermal ions), (associated particle source/sink exists)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqsc_reco F77NAME(psgetdim_tqsc_reco)
void psGetDim_tqsc_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tqsc_reco profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqsc_reco F77NAME(psget_id_tqsc_reco)
void psGet_id_tqsc_reco(int* iobj, int* data, int* ierr);

/**
 * Get reco driven CX momentum torque, (positive value = momentum source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tqcx_reco F77NAME(psget_tqcx_reco)
void psGet_tqcx_reco(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set reco driven CX momentum torque, (positive value = momentum source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tqcx_reco F77NAME(psset_tqcx_reco)
void psSet_tqcx_reco(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of reco driven CX momentum torque, (positive value = momentum source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tqcx_reco F77NAME(psgetrnk_tqcx_reco)
void psGetRnk_tqcx_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of reco driven CX momentum torque, (positive value = momentum source), (no associated particle source/sink)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tqcx_reco F77NAME(psgetdim_tqcx_reco)
void psGetDim_tqcx_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tqcx_reco profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tqcx_reco F77NAME(psget_id_tqcx_reco)
void psGet_id_tqcx_reco(int* iobj, int* data, int* ierr);

/**
 * Get reco thermal neutral density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_n0_reco F77NAME(psget_n0_reco)
void psGet_n0_reco(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set reco thermal neutral density
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_n0_reco F77NAME(psset_n0_reco)
void psSet_n0_reco(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of reco thermal neutral density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_n0_reco F77NAME(psgetrnk_n0_reco)
void psGetRnk_n0_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of reco thermal neutral density
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_n0_reco F77NAME(psgetdim_n0_reco)
void psGetDim_n0_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for n0_reco profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_n0_reco F77NAME(psget_id_n0_reco)
void psGet_id_n0_reco(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for n0_reco profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_n0_reco F77NAME(psgetrnk_id_n0_reco)
void psGetRnk_id_n0_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for n0_reco profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_n0_reco F77NAME(psgetdim_id_n0_reco)
void psGetDim_id_n0_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get reco neutral temperature (2/3)<E0>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_t0_reco F77NAME(psget_t0_reco)
void psGet_t0_reco(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set reco neutral temperature (2/3)<E0>
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_t0_reco F77NAME(psset_t0_reco)
void psSet_t0_reco(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of reco neutral temperature (2/3)<E0>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_t0_reco F77NAME(psgetrnk_t0_reco)
void psGetRnk_t0_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of reco neutral temperature (2/3)<E0>
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_t0_reco F77NAME(psgetdim_t0_reco)
void psGetDim_t0_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for T0_reco profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_t0_reco F77NAME(psget_id_t0_reco)
void psGet_id_t0_reco(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for T0_reco profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_t0_reco F77NAME(psgetrnk_id_t0_reco)
void psGetRnk_id_t0_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for T0_reco profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_t0_reco F77NAME(psgetdim_id_t0_reco)
void psGetDim_id_t0_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get reco neutral toroidal angular velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_omeg0_reco F77NAME(psget_omeg0_reco)
void psGet_omeg0_reco(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set reco neutral toroidal angular velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_omeg0_reco F77NAME(psset_omeg0_reco)
void psSet_omeg0_reco(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of reco neutral toroidal angular velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_omeg0_reco F77NAME(psgetrnk_omeg0_reco)
void psGetRnk_omeg0_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of reco neutral toroidal angular velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_omeg0_reco F77NAME(psgetdim_omeg0_reco)
void psGetDim_omeg0_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for omeg0_reco profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_omeg0_reco F77NAME(psget_id_omeg0_reco)
void psGet_id_omeg0_reco(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for omeg0_reco profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_omeg0_reco F77NAME(psgetrnk_id_omeg0_reco)
void psGetRnk_id_omeg0_reco(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for omeg0_reco profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_omeg0_reco F77NAME(psgetdim_id_omeg0_reco)
void psGetDim_id_omeg0_reco(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron heating by ECH
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_peech F77NAME(psget_peech)
void psGet_peech(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set electron heating by ECH
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_peech F77NAME(psset_peech)
void psSet_peech(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of electron heating by ECH
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_peech F77NAME(psgetrnk_peech)
void psGetRnk_peech(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron heating by ECH
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_peech F77NAME(psgetdim_peech)
void psGetDim_peech(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for peech profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_peech F77NAME(psget_id_peech)
void psGet_id_peech(int* iobj, int* data, int* ierr);

/**
 * Get ECH current drive
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curech F77NAME(psget_curech)
void psGet_curech(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ECH current drive
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curech F77NAME(psset_curech)
void psSet_curech(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ECH current drive
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curech F77NAME(psgetrnk_curech)
void psGetRnk_curech(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ECH current drive
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curech F77NAME(psgetdim_curech)
void psGetDim_curech(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for curech profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curech F77NAME(psget_id_curech)
void psGet_id_curech(int* iobj, int* data, int* ierr);

/**
 * Get ECH heating (by antenna)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_peech_src F77NAME(psget_peech_src)
void psGet_peech_src(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ECH heating (by antenna)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_peech_src F77NAME(psset_peech_src)
void psSet_peech_src(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ECH heating (by antenna)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_peech_src F77NAME(psgetrnk_peech_src)
void psGetRnk_peech_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ECH heating (by antenna)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_peech_src F77NAME(psgetdim_peech_src)
void psGetDim_peech_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for peech_src profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_peech_src F77NAME(psget_id_peech_src)
void psGet_id_peech_src(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for peech_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_peech_src F77NAME(psgetrnk_id_peech_src)
void psGetRnk_id_peech_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for peech_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_peech_src F77NAME(psgetdim_id_peech_src)
void psGetDim_id_peech_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ECH current drive (by antenna)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curech_src F77NAME(psget_curech_src)
void psGet_curech_src(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ECH current drive (by antenna)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curech_src F77NAME(psset_curech_src)
void psSet_curech_src(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ECH current drive (by antenna)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curech_src F77NAME(psgetrnk_curech_src)
void psGetRnk_curech_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ECH current drive (by antenna)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curech_src F77NAME(psgetdim_curech_src)
void psGetDim_curech_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for curech_src profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curech_src F77NAME(psget_id_curech_src)
void psGet_id_curech_src(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for curech_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_curech_src F77NAME(psgetrnk_id_curech_src)
void psGetRnk_id_curech_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for curech_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_curech_src F77NAME(psgetdim_id_curech_src)
void psGetDim_id_curech_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron heating by LH
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pelh F77NAME(psget_pelh)
void psGet_pelh(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set electron heating by LH
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pelh F77NAME(psset_pelh)
void psSet_pelh(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of electron heating by LH
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pelh F77NAME(psgetrnk_pelh)
void psGetRnk_pelh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron heating by LH
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pelh F77NAME(psgetdim_pelh)
void psGetDim_pelh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pelh profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pelh F77NAME(psget_id_pelh)
void psGet_id_pelh(int* iobj, int* data, int* ierr);

/**
 * Get ion heating by LH
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pilh F77NAME(psget_pilh)
void psGet_pilh(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ion heating by LH
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pilh F77NAME(psset_pilh)
void psSet_pilh(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ion heating by LH
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pilh F77NAME(psgetrnk_pilh)
void psGetRnk_pilh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion heating by LH
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pilh F77NAME(psgetdim_pilh)
void psGetDim_pilh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pilh profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pilh F77NAME(psget_id_pilh)
void psGet_id_pilh(int* iobj, int* data, int* ierr);

/**
 * Get LH electron heating by antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pelh_src F77NAME(psget_pelh_src)
void psGet_pelh_src(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set LH electron heating by antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pelh_src F77NAME(psset_pelh_src)
void psSet_pelh_src(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of LH electron heating by antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pelh_src F77NAME(psgetrnk_pelh_src)
void psGetRnk_pelh_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of LH electron heating by antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pelh_src F77NAME(psgetdim_pelh_src)
void psGetDim_pelh_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for pelh_src profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pelh_src F77NAME(psget_id_pelh_src)
void psGet_id_pelh_src(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for pelh_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_pelh_src F77NAME(psgetrnk_id_pelh_src)
void psGetRnk_id_pelh_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for pelh_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_pelh_src F77NAME(psgetdim_id_pelh_src)
void psGetDim_id_pelh_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get LH ion heating by antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pilh_src F77NAME(psget_pilh_src)
void psGet_pilh_src(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set LH ion heating by antenna
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pilh_src F77NAME(psset_pilh_src)
void psSet_pilh_src(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of LH ion heating by antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pilh_src F77NAME(psgetrnk_pilh_src)
void psGetRnk_pilh_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of LH ion heating by antenna
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pilh_src F77NAME(psgetdim_pilh_src)
void psGetDim_pilh_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for pilh_src profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pilh_src F77NAME(psget_id_pilh_src)
void psGet_id_pilh_src(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for pilh_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_pilh_src F77NAME(psgetrnk_id_pilh_src)
void psGetRnk_id_pilh_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for pilh_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_pilh_src F77NAME(psgetdim_id_pilh_src)
void psGetDim_id_pilh_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get LH current drive
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curlh F77NAME(psget_curlh)
void psGet_curlh(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set LH current drive
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curlh F77NAME(psset_curlh)
void psSet_curlh(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of LH current drive
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curlh F77NAME(psgetrnk_curlh)
void psGetRnk_curlh(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of LH current drive
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curlh F77NAME(psgetdim_curlh)
void psGetDim_curlh(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for curlh profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curlh F77NAME(psget_id_curlh)
void psGet_id_curlh(int* iobj, int* data, int* ierr);

/**
 * Get LH current drive (by antenna)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_curlh_src F77NAME(psget_curlh_src)
void psGet_curlh_src(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set LH current drive (by antenna)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_curlh_src F77NAME(psset_curlh_src)
void psSet_curlh_src(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of LH current drive (by antenna)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_curlh_src F77NAME(psgetrnk_curlh_src)
void psGetRnk_curlh_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of LH current drive (by antenna)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_curlh_src F77NAME(psgetdim_curlh_src)
void psGetDim_curlh_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for curlh_src profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_curlh_src F77NAME(psget_id_curlh_src)
void psGet_id_curlh_src(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for curlh_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_curlh_src F77NAME(psgetrnk_id_curlh_src)
void psGetRnk_id_curlh_src(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for curlh_src profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_curlh_src F77NAME(psgetdim_id_curlh_src)
void psGetDim_id_curlh_src(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Ballooning/Mercier stability indicator, = 0.0: stable;, = 1.0: Ballooning unstable;, = 2.0: Mercier unstable, = 3.0: Both Ballooning and Mercier unstable, (note a floating point profile is used; interpolation to another, grid would yield non-integer values that if non-zero would indicate, instability in the vicinity).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_balstab F77NAME(psget_balstab)
void psGet_balstab(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ballooning/Mercier stability indicator, = 0.0: stable;, = 1.0: Ballooning unstable;, = 2.0: Mercier unstable, = 3.0: Both Ballooning and Mercier unstable, (note a floating point profile is used; interpolation to another, grid would yield non-integer values that if non-zero would indicate, instability in the vicinity).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_balstab F77NAME(psset_balstab)
void psSet_balstab(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ballooning/Mercier stability indicator, = 0.0: stable;, = 1.0: Ballooning unstable;, = 2.0: Mercier unstable, = 3.0: Both Ballooning and Mercier unstable, (note a floating point profile is used; interpolation to another, grid would yield non-integer values that if non-zero would indicate, instability in the vicinity).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_balstab F77NAME(psgetrnk_balstab)
void psGetRnk_balstab(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ballooning/Mercier stability indicator, = 0.0: stable;, = 1.0: Ballooning unstable;, = 2.0: Mercier unstable, = 3.0: Both Ballooning and Mercier unstable, (note a floating point profile is used; interpolation to another, grid would yield non-integer values that if non-zero would indicate, instability in the vicinity).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_balstab F77NAME(psgetdim_balstab)
void psGetDim_balstab(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for balstab profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_balstab F77NAME(psget_id_balstab)
void psGet_id_balstab(int* iobj, int* data, int* ierr);

/**
 * Get TF ripple: log((Bmax-Bmin)/(Bmax+Bmin)), This field is likely time invariant,, an attribute of the tokamak TF coils.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tfrip_log F77NAME(psget_tfrip_log)
void psGet_tfrip_log(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set TF ripple: log((Bmax-Bmin)/(Bmax+Bmin)), This field is likely time invariant,, an attribute of the tokamak TF coils.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tfrip_log F77NAME(psset_tfrip_log)
void psSet_tfrip_log(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of TF ripple: log((Bmax-Bmin)/(Bmax+Bmin)), This field is likely time invariant,, an attribute of the tokamak TF coils.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tfrip_log F77NAME(psgetrnk_tfrip_log)
void psGetRnk_tfrip_log(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of TF ripple: log((Bmax-Bmin)/(Bmax+Bmin)), This field is likely time invariant,, an attribute of the tokamak TF coils.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tfrip_log F77NAME(psgetdim_tfrip_log)
void psGetDim_tfrip_log(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tfrip_log profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tfrip_log F77NAME(psget_id_tfrip_log)
void psGet_id_tfrip_log(int* iobj, int* data, int* ierr);

/**
 * Get 2nd component of TF ripple, log((Bmax-Bmin)/(Bmax+Bmin)), This field is sometimes introduced, time dependently in experiments.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tfrip2_log F77NAME(psget_tfrip2_log)
void psGet_tfrip2_log(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set 2nd component of TF ripple, log((Bmax-Bmin)/(Bmax+Bmin)), This field is sometimes introduced, time dependently in experiments.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tfrip2_log F77NAME(psset_tfrip2_log)
void psSet_tfrip2_log(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of 2nd component of TF ripple, log((Bmax-Bmin)/(Bmax+Bmin)), This field is sometimes introduced, time dependently in experiments.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tfrip2_log F77NAME(psgetrnk_tfrip2_log)
void psGetRnk_tfrip2_log(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 2nd component of TF ripple, log((Bmax-Bmin)/(Bmax+Bmin)), This field is sometimes introduced, time dependently in experiments.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tfrip2_log F77NAME(psgetdim_tfrip2_log)
void psGetDim_tfrip2_log(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tfrip2_log profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tfrip2_log F77NAME(psget_id_tfrip2_log)
void psGet_id_tfrip2_log(int* iobj, int* data, int* ierr);

/**
 * Get beam ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difb_nbi F77NAME(psget_difb_nbi)
void psGet_difb_nbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difb_nbi F77NAME(psset_difb_nbi)
void psSet_difb_nbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difb_nbi F77NAME(psgetrnk_difb_nbi)
void psGetRnk_difb_nbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difb_nbi F77NAME(psgetdim_difb_nbi)
void psGetDim_difb_nbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for difb_nbi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difb_nbi F77NAME(psget_id_difb_nbi)
void psGet_id_difb_nbi(int* iobj, int* data, int* ierr);

/**
 * Get fusion ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difb_fusi F77NAME(psget_difb_fusi)
void psGet_difb_fusi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set fusion ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difb_fusi F77NAME(psset_difb_fusi)
void psSet_difb_fusi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difb_fusi F77NAME(psgetrnk_difb_fusi)
void psGetRnk_difb_fusi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difb_fusi F77NAME(psgetdim_difb_fusi)
void psGetDim_difb_fusi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for difb_fusi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difb_fusi F77NAME(psget_id_difb_fusi)
void psGet_id_difb_fusi(int* iobj, int* data, int* ierr);

/**
 * Get RF minority ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difb_rfmi F77NAME(psget_difb_rfmi)
void psGet_difb_rfmi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set RF minority ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difb_rfmi F77NAME(psset_difb_rfmi)
void psSet_difb_rfmi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of RF minority ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difb_rfmi F77NAME(psgetrnk_difb_rfmi)
void psGetRnk_difb_rfmi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of RF minority ion anomalous diffusivity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difb_rfmi F77NAME(psgetdim_difb_rfmi)
void psGetDim_difb_rfmi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for difb_rfmi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difb_rfmi F77NAME(psget_id_difb_rfmi)
void psGet_id_difb_rfmi(int* iobj, int* data, int* ierr);

/**
 * Get beam ion anom. radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velb_nbi F77NAME(psget_velb_nbi)
void psGet_velb_nbi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set beam ion anom. radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velb_nbi F77NAME(psset_velb_nbi)
void psSet_velb_nbi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion anom. radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velb_nbi F77NAME(psgetrnk_velb_nbi)
void psGetRnk_velb_nbi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion anom. radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velb_nbi F77NAME(psgetdim_velb_nbi)
void psGetDim_velb_nbi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velb_nbi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velb_nbi F77NAME(psget_id_velb_nbi)
void psGet_id_velb_nbi(int* iobj, int* data, int* ierr);

/**
 * Get fusion ion anom. radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velb_fusi F77NAME(psget_velb_fusi)
void psGet_velb_fusi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set fusion ion anom. radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velb_fusi F77NAME(psset_velb_fusi)
void psSet_velb_fusi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion anom. radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velb_fusi F77NAME(psgetrnk_velb_fusi)
void psGetRnk_velb_fusi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion anom. radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velb_fusi F77NAME(psgetdim_velb_fusi)
void psGetDim_velb_fusi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velb_fusi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velb_fusi F77NAME(psget_id_velb_fusi)
void psGet_id_velb_fusi(int* iobj, int* data, int* ierr);

/**
 * Get RF minority ion anom. radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velb_rfmi F77NAME(psget_velb_rfmi)
void psGet_velb_rfmi(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set RF minority ion anom. radial velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velb_rfmi F77NAME(psset_velb_rfmi)
void psSet_velb_rfmi(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of RF minority ion anom. radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velb_rfmi F77NAME(psgetrnk_velb_rfmi)
void psGetRnk_velb_rfmi(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of RF minority ion anom. radial velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velb_rfmi F77NAME(psgetdim_velb_rfmi)
void psGetDim_velb_rfmi(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velb_rfmi profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velb_rfmi F77NAME(psget_id_velb_rfmi)
void psGet_id_velb_rfmi(int* iobj, int* data, int* ierr);

/**
 * Get anomalous transport energy variation, =1 to use transport profiles as given; O(1) expected., if undefined, use transport profiles as given.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_anom_evar F77NAME(psget_anom_evar)
void psGet_anom_evar(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set anomalous transport energy variation, =1 to use transport profiles as given; O(1) expected., if undefined, use transport profiles as given.
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_anom_evar F77NAME(psset_anom_evar)
void psSet_anom_evar(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of anomalous transport energy variation, =1 to use transport profiles as given; O(1) expected., if undefined, use transport profiles as given.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_anom_evar F77NAME(psgetrnk_anom_evar)
void psGetRnk_anom_evar(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of anomalous transport energy variation, =1 to use transport profiles as given; O(1) expected., if undefined, use transport profiles as given.
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_anom_evar F77NAME(psgetdim_anom_evar)
void psGetDim_anom_evar(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for anom_evar profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_anom_evar F77NAME(psget_id_anom_evar)
void psGet_id_anom_evar(int* iobj, int* data, int* ierr);

/**
 * Get fusion ion diffusivity: deeply trapped orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fidiff_dtrap F77NAME(psget_fidiff_dtrap)
void psGet_fidiff_dtrap(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set fusion ion diffusivity: deeply trapped orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fidiff_dtrap F77NAME(psset_fidiff_dtrap)
void psSet_fidiff_dtrap(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion diffusivity: deeply trapped orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_fidiff_dtrap F77NAME(psgetrnk_fidiff_dtrap)
void psGetRnk_fidiff_dtrap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion diffusivity: deeply trapped orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_fidiff_dtrap F77NAME(psgetdim_fidiff_dtrap)
void psGetDim_fidiff_dtrap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for fidiff_dtrap profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_fidiff_dtrap F77NAME(psget_id_fidiff_dtrap)
void psGet_id_fidiff_dtrap(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for fidiff_dtrap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_fidiff_dtrap F77NAME(psgetrnk_id_fidiff_dtrap)
void psGetRnk_id_fidiff_dtrap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for fidiff_dtrap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_fidiff_dtrap F77NAME(psgetdim_id_fidiff_dtrap)
void psGetDim_id_fidiff_dtrap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion diffusivity: barely trapped orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fidiff_btrap F77NAME(psget_fidiff_btrap)
void psGet_fidiff_btrap(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set fusion ion diffusivity: barely trapped orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fidiff_btrap F77NAME(psset_fidiff_btrap)
void psSet_fidiff_btrap(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion diffusivity: barely trapped orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_fidiff_btrap F77NAME(psgetrnk_fidiff_btrap)
void psGetRnk_fidiff_btrap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion diffusivity: barely trapped orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_fidiff_btrap F77NAME(psgetdim_fidiff_btrap)
void psGetDim_fidiff_btrap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for fidiff_btrap profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_fidiff_btrap F77NAME(psget_id_fidiff_btrap)
void psGet_id_fidiff_btrap(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for fidiff_btrap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_fidiff_btrap F77NAME(psgetrnk_id_fidiff_btrap)
void psGetRnk_id_fidiff_btrap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for fidiff_btrap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_fidiff_btrap F77NAME(psgetdim_id_fidiff_btrap)
void psGetDim_id_fidiff_btrap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion diffusivity: co barely passing orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fidiff_bpass_co F77NAME(psget_fidiff_bpass_co)
void psGet_fidiff_bpass_co(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set fusion ion diffusivity: co barely passing orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fidiff_bpass_co F77NAME(psset_fidiff_bpass_co)
void psSet_fidiff_bpass_co(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion diffusivity: co barely passing orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_fidiff_bpass_co F77NAME(psgetrnk_fidiff_bpass_co)
void psGetRnk_fidiff_bpass_co(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion diffusivity: co barely passing orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_fidiff_bpass_co F77NAME(psgetdim_fidiff_bpass_co)
void psGetDim_fidiff_bpass_co(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for fidiff_bpass_co profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_fidiff_bpass_co F77NAME(psget_id_fidiff_bpass_co)
void psGet_id_fidiff_bpass_co(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for fidiff_bpass_co profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_fidiff_bpass_co F77NAME(psgetrnk_id_fidiff_bpass_co)
void psGetRnk_id_fidiff_bpass_co(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for fidiff_bpass_co profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_fidiff_bpass_co F77NAME(psgetdim_id_fidiff_bpass_co)
void psGetDim_id_fidiff_bpass_co(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion diffusivity: co passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fidiff_dpass_co F77NAME(psget_fidiff_dpass_co)
void psGet_fidiff_dpass_co(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set fusion ion diffusivity: co passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fidiff_dpass_co F77NAME(psset_fidiff_dpass_co)
void psSet_fidiff_dpass_co(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion diffusivity: co passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_fidiff_dpass_co F77NAME(psgetrnk_fidiff_dpass_co)
void psGetRnk_fidiff_dpass_co(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion diffusivity: co passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_fidiff_dpass_co F77NAME(psgetdim_fidiff_dpass_co)
void psGetDim_fidiff_dpass_co(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for fidiff_dpass_co profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_fidiff_dpass_co F77NAME(psget_id_fidiff_dpass_co)
void psGet_id_fidiff_dpass_co(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for fidiff_dpass_co profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_fidiff_dpass_co F77NAME(psgetrnk_id_fidiff_dpass_co)
void psGetRnk_id_fidiff_dpass_co(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for fidiff_dpass_co profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_fidiff_dpass_co F77NAME(psgetdim_id_fidiff_dpass_co)
void psGetDim_id_fidiff_dpass_co(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion diffusivity: ctr barely passing orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fidiff_bpass_ctr F77NAME(psget_fidiff_bpass_ctr)
void psGet_fidiff_bpass_ctr(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set fusion ion diffusivity: ctr barely passing orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fidiff_bpass_ctr F77NAME(psset_fidiff_bpass_ctr)
void psSet_fidiff_bpass_ctr(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion diffusivity: ctr barely passing orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_fidiff_bpass_ctr F77NAME(psgetrnk_fidiff_bpass_ctr)
void psGetRnk_fidiff_bpass_ctr(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion diffusivity: ctr barely passing orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_fidiff_bpass_ctr F77NAME(psgetdim_fidiff_bpass_ctr)
void psGetDim_fidiff_bpass_ctr(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for fidiff_bpass_ctr profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_fidiff_bpass_ctr F77NAME(psget_id_fidiff_bpass_ctr)
void psGet_id_fidiff_bpass_ctr(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for fidiff_bpass_ctr profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_fidiff_bpass_ctr F77NAME(psgetrnk_id_fidiff_bpass_ctr)
void psGetRnk_id_fidiff_bpass_ctr(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for fidiff_bpass_ctr profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_fidiff_bpass_ctr F77NAME(psgetdim_id_fidiff_bpass_ctr)
void psGetDim_id_fidiff_bpass_ctr(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get fusion ion diffusivity: ctr passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_fidiff_dpass_ctr F77NAME(psget_fidiff_dpass_ctr)
void psGet_fidiff_dpass_ctr(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set fusion ion diffusivity: ctr passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_fidiff_dpass_ctr F77NAME(psset_fidiff_dpass_ctr)
void psSet_fidiff_dpass_ctr(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of fusion ion diffusivity: ctr passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_fidiff_dpass_ctr F77NAME(psgetrnk_fidiff_dpass_ctr)
void psGetRnk_fidiff_dpass_ctr(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of fusion ion diffusivity: ctr passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_fidiff_dpass_ctr F77NAME(psgetdim_fidiff_dpass_ctr)
void psGetDim_fidiff_dpass_ctr(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for fidiff_dpass_ctr profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_fidiff_dpass_ctr F77NAME(psget_id_fidiff_dpass_ctr)
void psGet_id_fidiff_dpass_ctr(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for fidiff_dpass_ctr profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_fidiff_dpass_ctr F77NAME(psgetrnk_id_fidiff_dpass_ctr)
void psGetRnk_id_fidiff_dpass_ctr(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for fidiff_dpass_ctr profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_fidiff_dpass_ctr F77NAME(psgetdim_id_fidiff_dpass_ctr)
void psGetDim_id_fidiff_dpass_ctr(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam ion diffusivity: deeply trapped orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_bidiff_dtrap F77NAME(psget_bidiff_dtrap)
void psGet_bidiff_dtrap(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set beam ion diffusivity: deeply trapped orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_bidiff_dtrap F77NAME(psset_bidiff_dtrap)
void psSet_bidiff_dtrap(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion diffusivity: deeply trapped orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_bidiff_dtrap F77NAME(psgetrnk_bidiff_dtrap)
void psGetRnk_bidiff_dtrap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion diffusivity: deeply trapped orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_bidiff_dtrap F77NAME(psgetdim_bidiff_dtrap)
void psGetDim_bidiff_dtrap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for bidiff_dtrap profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_bidiff_dtrap F77NAME(psget_id_bidiff_dtrap)
void psGet_id_bidiff_dtrap(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for bidiff_dtrap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_bidiff_dtrap F77NAME(psgetrnk_id_bidiff_dtrap)
void psGetRnk_id_bidiff_dtrap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for bidiff_dtrap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_bidiff_dtrap F77NAME(psgetdim_id_bidiff_dtrap)
void psGetDim_id_bidiff_dtrap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam ion diffusivity: barely trapped orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_bidiff_btrap F77NAME(psget_bidiff_btrap)
void psGet_bidiff_btrap(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set beam ion diffusivity: barely trapped orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_bidiff_btrap F77NAME(psset_bidiff_btrap)
void psSet_bidiff_btrap(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion diffusivity: barely trapped orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_bidiff_btrap F77NAME(psgetrnk_bidiff_btrap)
void psGetRnk_bidiff_btrap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion diffusivity: barely trapped orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_bidiff_btrap F77NAME(psgetdim_bidiff_btrap)
void psGetDim_bidiff_btrap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for bidiff_btrap profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_bidiff_btrap F77NAME(psget_id_bidiff_btrap)
void psGet_id_bidiff_btrap(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for bidiff_btrap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_bidiff_btrap F77NAME(psgetrnk_id_bidiff_btrap)
void psGetRnk_id_bidiff_btrap(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for bidiff_btrap profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_bidiff_btrap F77NAME(psgetdim_id_bidiff_btrap)
void psGetDim_id_bidiff_btrap(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam ion diffusivity: co barely passing orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_bidiff_bpass_co F77NAME(psget_bidiff_bpass_co)
void psGet_bidiff_bpass_co(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set beam ion diffusivity: co barely passing orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_bidiff_bpass_co F77NAME(psset_bidiff_bpass_co)
void psSet_bidiff_bpass_co(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion diffusivity: co barely passing orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_bidiff_bpass_co F77NAME(psgetrnk_bidiff_bpass_co)
void psGetRnk_bidiff_bpass_co(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion diffusivity: co barely passing orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_bidiff_bpass_co F77NAME(psgetdim_bidiff_bpass_co)
void psGetDim_bidiff_bpass_co(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for bidiff_bpass_co profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_bidiff_bpass_co F77NAME(psget_id_bidiff_bpass_co)
void psGet_id_bidiff_bpass_co(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for bidiff_bpass_co profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_bidiff_bpass_co F77NAME(psgetrnk_id_bidiff_bpass_co)
void psGetRnk_id_bidiff_bpass_co(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for bidiff_bpass_co profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_bidiff_bpass_co F77NAME(psgetdim_id_bidiff_bpass_co)
void psGetDim_id_bidiff_bpass_co(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam ion diffusivity: co passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_bidiff_dpass_co F77NAME(psget_bidiff_dpass_co)
void psGet_bidiff_dpass_co(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set beam ion diffusivity: co passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_bidiff_dpass_co F77NAME(psset_bidiff_dpass_co)
void psSet_bidiff_dpass_co(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion diffusivity: co passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_bidiff_dpass_co F77NAME(psgetrnk_bidiff_dpass_co)
void psGetRnk_bidiff_dpass_co(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion diffusivity: co passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_bidiff_dpass_co F77NAME(psgetdim_bidiff_dpass_co)
void psGetDim_bidiff_dpass_co(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for bidiff_dpass_co profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_bidiff_dpass_co F77NAME(psget_id_bidiff_dpass_co)
void psGet_id_bidiff_dpass_co(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for bidiff_dpass_co profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_bidiff_dpass_co F77NAME(psgetrnk_id_bidiff_dpass_co)
void psGetRnk_id_bidiff_dpass_co(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for bidiff_dpass_co profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_bidiff_dpass_co F77NAME(psgetdim_id_bidiff_dpass_co)
void psGetDim_id_bidiff_dpass_co(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam ion diffusivity: ctr barely passing orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_bidiff_bpass_ctr F77NAME(psget_bidiff_bpass_ctr)
void psGet_bidiff_bpass_ctr(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set beam ion diffusivity: ctr barely passing orbits
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_bidiff_bpass_ctr F77NAME(psset_bidiff_bpass_ctr)
void psSet_bidiff_bpass_ctr(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion diffusivity: ctr barely passing orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_bidiff_bpass_ctr F77NAME(psgetrnk_bidiff_bpass_ctr)
void psGetRnk_bidiff_bpass_ctr(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion diffusivity: ctr barely passing orbits
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_bidiff_bpass_ctr F77NAME(psgetdim_bidiff_bpass_ctr)
void psGetDim_bidiff_bpass_ctr(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for bidiff_bpass_ctr profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_bidiff_bpass_ctr F77NAME(psget_id_bidiff_bpass_ctr)
void psGet_id_bidiff_bpass_ctr(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for bidiff_bpass_ctr profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_bidiff_bpass_ctr F77NAME(psgetrnk_id_bidiff_bpass_ctr)
void psGetRnk_id_bidiff_bpass_ctr(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for bidiff_bpass_ctr profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_bidiff_bpass_ctr F77NAME(psgetdim_id_bidiff_bpass_ctr)
void psGetDim_id_bidiff_bpass_ctr(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get beam ion diffusivity: ctr passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_bidiff_dpass_ctr F77NAME(psget_bidiff_dpass_ctr)
void psGet_bidiff_dpass_ctr(int* iobj, const int* n1, const int* n2, const int* n3, double* data, int* ierr);

/**
 * Set beam ion diffusivity: ctr passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param n3 data dimension along axis 2 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_bidiff_dpass_ctr F77NAME(psset_bidiff_dpass_ctr)
void psSet_bidiff_dpass_ctr(int* iobj, const int* n1, const int* n2, const int* n3, const double* data, int* ierr);

/**
 * Get number of dimension of beam ion diffusivity: ctr passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_bidiff_dpass_ctr F77NAME(psgetrnk_bidiff_dpass_ctr)
void psGetRnk_bidiff_dpass_ctr(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of beam ion diffusivity: ctr passing |vpll/v| -> 1
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_bidiff_dpass_ctr F77NAME(psgetdim_bidiff_dpass_ctr)
void psGetDim_bidiff_dpass_ctr(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for bidiff_dpass_ctr profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_bidiff_dpass_ctr F77NAME(psget_id_bidiff_dpass_ctr)
void psGet_id_bidiff_dpass_ctr(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for bidiff_dpass_ctr profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_bidiff_dpass_ctr F77NAME(psgetrnk_id_bidiff_dpass_ctr)
void psGetRnk_id_bidiff_dpass_ctr(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for bidiff_dpass_ctr profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_bidiff_dpass_ctr F77NAME(psgetdim_id_bidiff_dpass_ctr)
void psGetDim_id_bidiff_dpass_ctr(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get anomalous electron heating
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pe_anom F77NAME(psget_pe_anom)
void psGet_pe_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set anomalous electron heating
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pe_anom F77NAME(psset_pe_anom)
void psSet_pe_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of anomalous electron heating
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pe_anom F77NAME(psgetrnk_pe_anom)
void psGetRnk_pe_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of anomalous electron heating
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pe_anom F77NAME(psgetdim_pe_anom)
void psGetDim_pe_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pe_anom profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pe_anom F77NAME(psget_id_pe_anom)
void psGet_id_pe_anom(int* iobj, int* data, int* ierr);

/**
 * Get anomalous ion heating
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pi_anom F77NAME(psget_pi_anom)
void psGet_pi_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set anomalous ion heating
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pi_anom F77NAME(psset_pi_anom)
void psSet_pi_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of anomalous ion heating
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pi_anom F77NAME(psgetrnk_pi_anom)
void psGetRnk_pi_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of anomalous ion heating
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pi_anom F77NAME(psgetdim_pi_anom)
void psGetDim_pi_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for pi_anom profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pi_anom F77NAME(psget_id_pi_anom)
void psGet_id_pi_anom(int* iobj, int* data, int* ierr);

/**
 * Get anomalous torque
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tq_anom F77NAME(psget_tq_anom)
void psGet_tq_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set anomalous torque
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tq_anom F77NAME(psset_tq_anom)
void psSet_tq_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of anomalous torque
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tq_anom F77NAME(psgetrnk_tq_anom)
void psGetRnk_tq_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of anomalous torque
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tq_anom F77NAME(psgetdim_tq_anom)
void psGetDim_tq_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tq_anom profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tq_anom F77NAME(psget_id_tq_anom)
void psGet_id_tq_anom(int* iobj, int* data, int* ierr);

/**
 * Get anomalous sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_sc_anom F77NAME(psget_sc_anom)
void psGet_sc_anom(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set anomalous sources
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_sc_anom F77NAME(psset_sc_anom)
void psSet_sc_anom(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of anomalous sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_sc_anom F77NAME(psgetrnk_sc_anom)
void psGetRnk_sc_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of anomalous sources
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_sc_anom F77NAME(psgetdim_sc_anom)
void psGetDim_sc_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for sc_anom profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_sc_anom F77NAME(psget_id_sc_anom)
void psGet_id_sc_anom(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for sc_anom profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_sc_anom F77NAME(psgetrnk_id_sc_anom)
void psGetRnk_id_sc_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for sc_anom profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_sc_anom F77NAME(psgetdim_id_sc_anom)
void psGetDim_id_sc_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, advective velocity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velte_anom F77NAME(psget_velte_anom)
void psGet_velte_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, advective velocity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velte_anom F77NAME(psset_velte_anom)
void psSet_velte_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, advective velocity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velte_anom F77NAME(psgetrnk_velte_anom)
void psGetRnk_velte_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, advective velocity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velte_anom F77NAME(psgetdim_velte_anom)
void psGetDim_velte_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velte_anom profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velte_anom F77NAME(psget_id_velte_anom)
void psGet_id_velte_anom(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, advective velocity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velti_anom F77NAME(psget_velti_anom)
void psGet_velti_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, advective velocity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velti_anom F77NAME(psset_velti_anom)
void psSet_velti_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, advective velocity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velti_anom F77NAME(psgetrnk_velti_anom)
void psGetRnk_velti_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, advective velocity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velti_anom F77NAME(psgetdim_velti_anom)
void psGetDim_velti_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velti_anom profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velti_anom F77NAME(psget_id_velti_anom)
void psGet_id_velti_anom(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, advective velocity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velpphi_anom F77NAME(psget_velpphi_anom)
void psGet_velpphi_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, advective velocity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velpphi_anom F77NAME(psset_velpphi_anom)
void psSet_velpphi_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, advective velocity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velpphi_anom F77NAME(psgetrnk_velpphi_anom)
void psGetRnk_velpphi_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, advective velocity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velpphi_anom F77NAME(psgetdim_velpphi_anom)
void psGetDim_velpphi_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velpphi_anom profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velpphi_anom F77NAME(psget_id_velpphi_anom)
void psGet_id_velpphi_anom(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, advective velocity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velns_anom F77NAME(psget_velns_anom)
void psGet_velns_anom(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, advective velocity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velns_anom F77NAME(psset_velns_anom)
void psSet_velns_anom(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, advective velocity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velns_anom F77NAME(psgetrnk_velns_anom)
void psGetRnk_velns_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, advective velocity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velns_anom F77NAME(psgetdim_velns_anom)
void psGetDim_velns_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for velns_anom profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velns_anom F77NAME(psget_id_velns_anom)
void psGet_id_velns_anom(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for velns_anom profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_velns_anom F77NAME(psgetrnk_id_velns_anom)
void psGetRnk_id_velns_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for velns_anom profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_velns_anom F77NAME(psgetdim_id_velns_anom)
void psGetDim_id_velns_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_anom F77NAME(psget_chie_anom)
void psGet_chie_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_anom F77NAME(psset_chie_anom)
void psSet_chie_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_anom F77NAME(psgetrnk_chie_anom)
void psGetRnk_chie_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_anom F77NAME(psgetdim_chie_anom)
void psGetDim_chie_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_anom profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_anom F77NAME(psget_id_chie_anom)
void psGet_id_chie_anom(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_anom F77NAME(psget_chii_anom)
void psGet_chii_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_anom F77NAME(psset_chii_anom)
void psSet_chii_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_anom F77NAME(psgetrnk_chii_anom)
void psGetRnk_chii_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_anom F77NAME(psgetdim_chii_anom)
void psGetDim_chii_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_anom profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_anom F77NAME(psget_id_chii_anom)
void psGet_id_chii_anom(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chiphi_anom F77NAME(psget_chiphi_anom)
void psGet_chiphi_anom(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chiphi_anom F77NAME(psset_chiphi_anom)
void psSet_chiphi_anom(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chiphi_anom F77NAME(psgetrnk_chiphi_anom)
void psGetRnk_chiphi_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chiphi_anom F77NAME(psgetdim_chiphi_anom)
void psGetDim_chiphi_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chiphi_anom profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chiphi_anom F77NAME(psget_id_chiphi_anom)
void psGet_id_chiphi_anom(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difns_anom F77NAME(psget_difns_anom)
void psGet_difns_anom(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difns_anom F77NAME(psset_difns_anom)
void psSet_difns_anom(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difns_anom F77NAME(psgetrnk_difns_anom)
void psGetRnk_difns_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difns_anom F77NAME(psgetdim_difns_anom)
void psGetDim_difns_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for difns_anom profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difns_anom F77NAME(psget_id_difns_anom)
void psGet_id_difns_anom(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for difns_anom profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_difns_anom F77NAME(psgetrnk_id_difns_anom)
void psGetRnk_id_difns_anom(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for difns_anom profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_difns_anom F77NAME(psgetdim_id_difns_anom)
void psGetDim_id_difns_anom(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ky-spectrum from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_kyspectrum_tglf F77NAME(psget_kyspectrum_tglf)
void psGet_kyspectrum_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ky-spectrum from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_kyspectrum_tglf F77NAME(psset_kyspectrum_tglf)
void psSet_kyspectrum_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ky-spectrum from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_kyspectrum_tglf F77NAME(psgetrnk_kyspectrum_tglf)
void psGetRnk_kyspectrum_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ky-spectrum from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_kyspectrum_tglf F77NAME(psgetdim_kyspectrum_tglf)
void psGetDim_kyspectrum_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for kyspectrum_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_kyspectrum_tglf F77NAME(psget_id_kyspectrum_tglf)
void psGet_id_kyspectrum_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for kyspectrum_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_kyspectrum_tglf F77NAME(psgetrnk_id_kyspectrum_tglf)
void psGetRnk_id_kyspectrum_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for kyspectrum_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_kyspectrum_tglf F77NAME(psgetdim_id_kyspectrum_tglf)
void psGetDim_id_kyspectrum_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get growthrate from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_growthrate_tglf F77NAME(psget_growthrate_tglf)
void psGet_growthrate_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set growthrate from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_growthrate_tglf F77NAME(psset_growthrate_tglf)
void psSet_growthrate_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of growthrate from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_growthrate_tglf F77NAME(psgetrnk_growthrate_tglf)
void psGetRnk_growthrate_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of growthrate from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_growthrate_tglf F77NAME(psgetdim_growthrate_tglf)
void psGetDim_growthrate_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for growthrate_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_growthrate_tglf F77NAME(psget_id_growthrate_tglf)
void psGet_id_growthrate_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for growthrate_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_growthrate_tglf F77NAME(psgetrnk_id_growthrate_tglf)
void psGetRnk_id_growthrate_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for growthrate_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_growthrate_tglf F77NAME(psgetdim_id_growthrate_tglf)
void psGetDim_id_growthrate_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get frequency from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_freq_tglf F77NAME(psget_freq_tglf)
void psGet_freq_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set frequency from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_freq_tglf F77NAME(psset_freq_tglf)
void psSet_freq_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of frequency from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_freq_tglf F77NAME(psgetrnk_freq_tglf)
void psGetRnk_freq_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of frequency from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_freq_tglf F77NAME(psgetdim_freq_tglf)
void psGetDim_freq_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for freq_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_freq_tglf F77NAME(psget_id_freq_tglf)
void psGet_id_freq_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for freq_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_freq_tglf F77NAME(psgetrnk_id_freq_tglf)
void psGetRnk_id_freq_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for freq_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_freq_tglf F77NAME(psgetdim_id_freq_tglf)
void psGetDim_id_freq_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ne_ky_tglf F77NAME(psget_ne_ky_tglf)
void psGet_ne_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set electron density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ne_ky_tglf F77NAME(psset_ne_ky_tglf)
void psSet_ne_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of electron density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ne_ky_tglf F77NAME(psgetrnk_ne_ky_tglf)
void psGetRnk_ne_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ne_ky_tglf F77NAME(psgetdim_ne_ky_tglf)
void psGetDim_ne_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for ne_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ne_ky_tglf F77NAME(psget_id_ne_ky_tglf)
void psGet_id_ne_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for ne_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_ne_ky_tglf F77NAME(psgetrnk_id_ne_ky_tglf)
void psGetRnk_id_ne_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for ne_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_ne_ky_tglf F77NAME(psgetdim_id_ne_ky_tglf)
void psGetDim_id_ne_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ion density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ni_ky_tglf F77NAME(psget_ni_ky_tglf)
void psGet_ni_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ion density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ni_ky_tglf F77NAME(psset_ni_ky_tglf)
void psSet_ni_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ion density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ni_ky_tglf F77NAME(psgetrnk_ni_ky_tglf)
void psGetRnk_ni_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ni_ky_tglf F77NAME(psgetdim_ni_ky_tglf)
void psGetDim_ni_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for ni_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ni_ky_tglf F77NAME(psget_id_ni_ky_tglf)
void psGet_id_ni_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for ni_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_ni_ky_tglf F77NAME(psgetrnk_id_ni_ky_tglf)
void psGetRnk_id_ni_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for ni_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_ni_ky_tglf F77NAME(psgetdim_id_ni_ky_tglf)
void psGetDim_id_ni_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get impurity density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nz_ky_tglf F77NAME(psget_nz_ky_tglf)
void psGet_nz_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set impurity density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nz_ky_tglf F77NAME(psset_nz_ky_tglf)
void psSet_nz_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of impurity density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nz_ky_tglf F77NAME(psgetrnk_nz_ky_tglf)
void psGetRnk_nz_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of impurity density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nz_ky_tglf F77NAME(psgetdim_nz_ky_tglf)
void psGetDim_nz_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for nz_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_nz_ky_tglf F77NAME(psget_id_nz_ky_tglf)
void psGet_id_nz_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for nz_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_nz_ky_tglf F77NAME(psgetrnk_id_nz_ky_tglf)
void psGetRnk_id_nz_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for nz_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_nz_ky_tglf F77NAME(psgetdim_id_nz_ky_tglf)
void psGetDim_id_nz_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_te_ky_tglf F77NAME(psget_te_ky_tglf)
void psGet_te_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set electron density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_te_ky_tglf F77NAME(psset_te_ky_tglf)
void psSet_te_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of electron density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_te_ky_tglf F77NAME(psgetrnk_te_ky_tglf)
void psGetRnk_te_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_te_ky_tglf F77NAME(psgetdim_te_ky_tglf)
void psGetDim_te_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for te_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_te_ky_tglf F77NAME(psget_id_te_ky_tglf)
void psGet_id_te_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for te_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_te_ky_tglf F77NAME(psgetrnk_id_te_ky_tglf)
void psGetRnk_id_te_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for te_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_te_ky_tglf F77NAME(psgetdim_id_te_ky_tglf)
void psGetDim_id_te_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ion density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ti_ky_tglf F77NAME(psget_ti_ky_tglf)
void psGet_ti_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ion density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ti_ky_tglf F77NAME(psset_ti_ky_tglf)
void psSet_ti_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ion density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ti_ky_tglf F77NAME(psgetrnk_ti_ky_tglf)
void psGetRnk_ti_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ti_ky_tglf F77NAME(psgetdim_ti_ky_tglf)
void psGetDim_ti_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for ti_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ti_ky_tglf F77NAME(psget_id_ti_ky_tglf)
void psGet_id_ti_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for ti_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_ti_ky_tglf F77NAME(psgetrnk_id_ti_ky_tglf)
void psGetRnk_id_ti_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for ti_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_ti_ky_tglf F77NAME(psgetdim_id_ti_ky_tglf)
void psGetDim_id_ti_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get impurity density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tz_ky_tglf F77NAME(psget_tz_ky_tglf)
void psGet_tz_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set impurity density fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tz_ky_tglf F77NAME(psset_tz_ky_tglf)
void psSet_tz_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of impurity density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tz_ky_tglf F77NAME(psgetrnk_tz_ky_tglf)
void psGetRnk_tz_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of impurity density fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tz_ky_tglf F77NAME(psgetdim_tz_ky_tglf)
void psGetDim_tz_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for tz_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tz_ky_tglf F77NAME(psget_id_tz_ky_tglf)
void psGet_id_tz_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for tz_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_tz_ky_tglf F77NAME(psgetrnk_id_tz_ky_tglf)
void psGetRnk_id_tz_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for tz_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_tz_ky_tglf F77NAME(psgetdim_id_tz_ky_tglf)
void psGetDim_id_tz_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_neflux_ky_tglf F77NAME(psget_neflux_ky_tglf)
void psGet_neflux_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set electron density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_neflux_ky_tglf F77NAME(psset_neflux_ky_tglf)
void psSet_neflux_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of electron density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_neflux_ky_tglf F77NAME(psgetrnk_neflux_ky_tglf)
void psGetRnk_neflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_neflux_ky_tglf F77NAME(psgetdim_neflux_ky_tglf)
void psGetDim_neflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for neflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_neflux_ky_tglf F77NAME(psget_id_neflux_ky_tglf)
void psGet_id_neflux_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for neflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_neflux_ky_tglf F77NAME(psgetrnk_id_neflux_ky_tglf)
void psGetRnk_id_neflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for neflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_neflux_ky_tglf F77NAME(psgetdim_id_neflux_ky_tglf)
void psGetDim_id_neflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ion density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_niflux_ky_tglf F77NAME(psget_niflux_ky_tglf)
void psGet_niflux_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ion density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_niflux_ky_tglf F77NAME(psset_niflux_ky_tglf)
void psSet_niflux_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ion density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_niflux_ky_tglf F77NAME(psgetrnk_niflux_ky_tglf)
void psGetRnk_niflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_niflux_ky_tglf F77NAME(psgetdim_niflux_ky_tglf)
void psGetDim_niflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for niflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_niflux_ky_tglf F77NAME(psget_id_niflux_ky_tglf)
void psGet_id_niflux_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for niflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_niflux_ky_tglf F77NAME(psgetrnk_id_niflux_ky_tglf)
void psGetRnk_id_niflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for niflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_niflux_ky_tglf F77NAME(psgetdim_id_niflux_ky_tglf)
void psGetDim_id_niflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get impurity density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nzflux_ky_tglf F77NAME(psget_nzflux_ky_tglf)
void psGet_nzflux_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set impurity density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nzflux_ky_tglf F77NAME(psset_nzflux_ky_tglf)
void psSet_nzflux_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of impurity density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nzflux_ky_tglf F77NAME(psgetrnk_nzflux_ky_tglf)
void psGetRnk_nzflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of impurity density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nzflux_ky_tglf F77NAME(psgetdim_nzflux_ky_tglf)
void psGetDim_nzflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for nzflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_nzflux_ky_tglf F77NAME(psget_id_nzflux_ky_tglf)
void psGet_id_nzflux_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for nzflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_nzflux_ky_tglf F77NAME(psgetrnk_id_nzflux_ky_tglf)
void psGetRnk_id_nzflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for nzflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_nzflux_ky_tglf F77NAME(psgetdim_id_nzflux_ky_tglf)
void psGetDim_id_nzflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get electron density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_teflux_ky_tglf F77NAME(psget_teflux_ky_tglf)
void psGet_teflux_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set electron density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_teflux_ky_tglf F77NAME(psset_teflux_ky_tglf)
void psSet_teflux_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of electron density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_teflux_ky_tglf F77NAME(psgetrnk_teflux_ky_tglf)
void psGetRnk_teflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of electron density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_teflux_ky_tglf F77NAME(psgetdim_teflux_ky_tglf)
void psGetDim_teflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for teflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_teflux_ky_tglf F77NAME(psget_id_teflux_ky_tglf)
void psGet_id_teflux_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for teflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_teflux_ky_tglf F77NAME(psgetrnk_id_teflux_ky_tglf)
void psGetRnk_id_teflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for teflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_teflux_ky_tglf F77NAME(psgetdim_id_teflux_ky_tglf)
void psGetDim_id_teflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ion density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tiflux_ky_tglf F77NAME(psget_tiflux_ky_tglf)
void psGet_tiflux_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set ion density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tiflux_ky_tglf F77NAME(psset_tiflux_ky_tglf)
void psSet_tiflux_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of ion density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tiflux_ky_tglf F77NAME(psgetrnk_tiflux_ky_tglf)
void psGetRnk_tiflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tiflux_ky_tglf F77NAME(psgetdim_tiflux_ky_tglf)
void psGetDim_tiflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for tiflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tiflux_ky_tglf F77NAME(psget_id_tiflux_ky_tglf)
void psGet_id_tiflux_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for tiflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_tiflux_ky_tglf F77NAME(psgetrnk_id_tiflux_ky_tglf)
void psGetRnk_id_tiflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for tiflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_tiflux_ky_tglf F77NAME(psgetdim_id_tiflux_ky_tglf)
void psGetDim_id_tiflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get impurity density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tzflux_ky_tglf F77NAME(psget_tzflux_ky_tglf)
void psGet_tzflux_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set impurity density flux spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tzflux_ky_tglf F77NAME(psset_tzflux_ky_tglf)
void psSet_tzflux_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of impurity density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tzflux_ky_tglf F77NAME(psgetrnk_tzflux_ky_tglf)
void psGetRnk_tzflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of impurity density flux spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tzflux_ky_tglf F77NAME(psgetdim_tzflux_ky_tglf)
void psGetDim_tzflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for tzflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tzflux_ky_tglf F77NAME(psget_id_tzflux_ky_tglf)
void psGet_id_tzflux_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for tzflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_tzflux_ky_tglf F77NAME(psgetrnk_id_tzflux_ky_tglf)
void psGetRnk_id_tzflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for tzflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_tzflux_ky_tglf F77NAME(psgetdim_id_tzflux_ky_tglf)
void psGetDim_id_tzflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get potential fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_pot_ky_tglf F77NAME(psget_pot_ky_tglf)
void psGet_pot_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set potential fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_pot_ky_tglf F77NAME(psset_pot_ky_tglf)
void psSet_pot_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of potential fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_pot_ky_tglf F77NAME(psgetrnk_pot_ky_tglf)
void psGetRnk_pot_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of potential fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_pot_ky_tglf F77NAME(psgetdim_pot_ky_tglf)
void psGetDim_pot_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for pot_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_pot_ky_tglf F77NAME(psget_id_pot_ky_tglf)
void psGet_id_pot_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for pot_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_pot_ky_tglf F77NAME(psgetrnk_id_pot_ky_tglf)
void psGetRnk_id_pot_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for pot_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_pot_ky_tglf F77NAME(psgetdim_id_pot_ky_tglf)
void psGetDim_id_pot_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get momentum fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_phiflux_ky_tglf F77NAME(psget_phiflux_ky_tglf)
void psGet_phiflux_ky_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set momentum fluctuation spectrum
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_phiflux_ky_tglf F77NAME(psset_phiflux_ky_tglf)
void psSet_phiflux_ky_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of momentum fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_phiflux_ky_tglf F77NAME(psgetrnk_phiflux_ky_tglf)
void psGetRnk_phiflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum fluctuation spectrum
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_phiflux_ky_tglf F77NAME(psgetdim_phiflux_ky_tglf)
void psGetDim_phiflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for phiflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_phiflux_ky_tglf F77NAME(psget_id_phiflux_ky_tglf)
void psGet_id_phiflux_ky_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for phiflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_phiflux_ky_tglf F77NAME(psgetrnk_id_phiflux_ky_tglf)
void psGetRnk_id_phiflux_ky_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for phiflux_ky_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_phiflux_ky_tglf F77NAME(psgetdim_id_phiflux_ky_tglf)
void psGetDim_id_phiflux_ky_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get maximum growthrate from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_growthrate_max_tglf F77NAME(psget_growthrate_max_tglf)
void psGet_growthrate_max_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set maximum growthrate from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_growthrate_max_tglf F77NAME(psset_growthrate_max_tglf)
void psSet_growthrate_max_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of maximum growthrate from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_growthrate_max_tglf F77NAME(psgetrnk_growthrate_max_tglf)
void psGetRnk_growthrate_max_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of maximum growthrate from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_growthrate_max_tglf F77NAME(psgetdim_growthrate_max_tglf)
void psGetDim_growthrate_max_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for growthrate_max_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_growthrate_max_tglf F77NAME(psget_id_growthrate_max_tglf)
void psGet_id_growthrate_max_tglf(int* iobj, int* data, int* ierr);

/**
 * Get frequency corresponding maximum growthrate from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_freq_max_tglf F77NAME(psget_freq_max_tglf)
void psGet_freq_max_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set frequency corresponding maximum growthrate from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_freq_max_tglf F77NAME(psset_freq_max_tglf)
void psSet_freq_max_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of frequency corresponding maximum growthrate from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_freq_max_tglf F77NAME(psgetrnk_freq_max_tglf)
void psGetRnk_freq_max_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of frequency corresponding maximum growthrate from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_freq_max_tglf F77NAME(psgetdim_freq_max_tglf)
void psGetDim_freq_max_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for freq_max_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_freq_max_tglf F77NAME(psget_id_freq_max_tglf)
void psGet_id_freq_max_tglf(int* iobj, int* data, int* ierr);

/**
 * Get Te-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velte_tglf F77NAME(psget_velte_tglf)
void psGet_velte_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velte_tglf F77NAME(psset_velte_tglf)
void psSet_velte_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velte_tglf F77NAME(psgetrnk_velte_tglf)
void psGetRnk_velte_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velte_tglf F77NAME(psgetdim_velte_tglf)
void psGetDim_velte_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velte_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velte_tglf F77NAME(psget_id_velte_tglf)
void psGet_id_velte_tglf(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velti_tglf F77NAME(psget_velti_tglf)
void psGet_velti_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velti_tglf F77NAME(psset_velti_tglf)
void psSet_velti_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velti_tglf F77NAME(psgetrnk_velti_tglf)
void psGetRnk_velti_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velti_tglf F77NAME(psgetdim_velti_tglf)
void psGetDim_velti_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velti_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velti_tglf F77NAME(psget_id_velti_tglf)
void psGet_id_velti_tglf(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velpphi_tglf F77NAME(psget_velpphi_tglf)
void psGet_velpphi_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velpphi_tglf F77NAME(psset_velpphi_tglf)
void psSet_velpphi_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velpphi_tglf F77NAME(psgetrnk_velpphi_tglf)
void psGetRnk_velpphi_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velpphi_tglf F77NAME(psgetdim_velpphi_tglf)
void psGetDim_velpphi_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velpphi_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velpphi_tglf F77NAME(psget_id_velpphi_tglf)
void psGet_id_velpphi_tglf(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velns_tglf F77NAME(psget_velns_tglf)
void psGet_velns_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velns_tglf F77NAME(psset_velns_tglf)
void psSet_velns_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velns_tglf F77NAME(psgetrnk_velns_tglf)
void psGetRnk_velns_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, advective velocity term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velns_tglf F77NAME(psgetdim_velns_tglf)
void psGetDim_velns_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for velns_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velns_tglf F77NAME(psget_id_velns_tglf)
void psGet_id_velns_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for velns_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_velns_tglf F77NAME(psgetrnk_id_velns_tglf)
void psGetRnk_id_velns_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for velns_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_velns_tglf F77NAME(psgetdim_id_velns_tglf)
void psGetDim_id_velns_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dqedgrdte_tglf F77NAME(psget_dqedgrdte_tglf)
void psGet_dqedgrdte_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dqedgrdte_tglf F77NAME(psset_dqedgrdte_tglf)
void psSet_dqedgrdte_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dqedgrdte_tglf F77NAME(psgetrnk_dqedgrdte_tglf)
void psGetRnk_dqedgrdte_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dqedgrdte_tglf F77NAME(psgetdim_dqedgrdte_tglf)
void psGetDim_dqedgrdte_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for dQedGrdte_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_dqedgrdte_tglf F77NAME(psget_id_dqedgrdte_tglf)
void psGet_id_dqedgrdte_tglf(int* iobj, int* data, int* ierr);

/**
 * Get Te flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dqedgrdti_tglf F77NAME(psget_dqedgrdti_tglf)
void psGet_dqedgrdti_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dqedgrdti_tglf F77NAME(psset_dqedgrdti_tglf)
void psSet_dqedgrdti_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dqedgrdti_tglf F77NAME(psgetrnk_dqedgrdti_tglf)
void psGetRnk_dqedgrdti_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dqedgrdti_tglf F77NAME(psgetdim_dqedgrdti_tglf)
void psGetDim_dqedgrdti_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for dQedGrdti_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_dqedgrdti_tglf F77NAME(psget_id_dqedgrdti_tglf)
void psGet_id_dqedgrdti_tglf(int* iobj, int* data, int* ierr);

/**
 * Get Ti flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dqidgrdte_tglf F77NAME(psget_dqidgrdte_tglf)
void psGet_dqidgrdte_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dqidgrdte_tglf F77NAME(psset_dqidgrdte_tglf)
void psSet_dqidgrdte_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dqidgrdte_tglf F77NAME(psgetrnk_dqidgrdte_tglf)
void psGetRnk_dqidgrdte_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dqidgrdte_tglf F77NAME(psgetdim_dqidgrdte_tglf)
void psGetDim_dqidgrdte_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for dQidGrdte_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_dqidgrdte_tglf F77NAME(psget_id_dqidgrdte_tglf)
void psGet_id_dqidgrdte_tglf(int* iobj, int* data, int* ierr);

/**
 * Get Ti flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dqidgrdti_tglf F77NAME(psget_dqidgrdti_tglf)
void psGet_dqidgrdti_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dqidgrdti_tglf F77NAME(psset_dqidgrdti_tglf)
void psSet_dqidgrdti_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dqidgrdti_tglf F77NAME(psgetrnk_dqidgrdti_tglf)
void psGetRnk_dqidgrdti_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti flux gradient term from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dqidgrdti_tglf F77NAME(psgetdim_dqidgrdti_tglf)
void psGetDim_dqidgrdti_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for dQidGrdti_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_dqidgrdti_tglf F77NAME(psget_id_dqidgrdti_tglf)
void psGet_id_dqidgrdti_tglf(int* iobj, int* data, int* ierr);

/**
 * Get Te-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_tglf F77NAME(psget_chie_tglf)
void psGet_chie_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_tglf F77NAME(psset_chie_tglf)
void psSet_chie_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_tglf F77NAME(psgetrnk_chie_tglf)
void psGetRnk_chie_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_tglf F77NAME(psgetdim_chie_tglf)
void psGetDim_chie_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_tglf F77NAME(psget_id_chie_tglf)
void psGet_id_chie_tglf(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_tglf F77NAME(psget_chii_tglf)
void psGet_chii_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_tglf F77NAME(psset_chii_tglf)
void psSet_chii_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_tglf F77NAME(psgetrnk_chii_tglf)
void psGetRnk_chii_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_tglf F77NAME(psgetdim_chii_tglf)
void psGetDim_chii_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_tglf F77NAME(psget_id_chii_tglf)
void psGet_id_chii_tglf(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chiphi_tglf F77NAME(psget_chiphi_tglf)
void psGet_chiphi_tglf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chiphi_tglf F77NAME(psset_chiphi_tglf)
void psSet_chiphi_tglf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chiphi_tglf F77NAME(psgetrnk_chiphi_tglf)
void psGetRnk_chiphi_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chiphi_tglf F77NAME(psgetdim_chiphi_tglf)
void psGetDim_chiphi_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chiphi_tglf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chiphi_tglf F77NAME(psget_id_chiphi_tglf)
void psGet_id_chiphi_tglf(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difns_tglf F77NAME(psget_difns_tglf)
void psGet_difns_tglf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difns_tglf F77NAME(psset_difns_tglf)
void psSet_difns_tglf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difns_tglf F77NAME(psgetrnk_difns_tglf)
void psGetRnk_difns_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, neoclassical diffusivity from TGLF model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difns_tglf F77NAME(psgetdim_difns_tglf)
void psGetDim_difns_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for difns_tglf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difns_tglf F77NAME(psget_id_difns_tglf)
void psGet_id_difns_tglf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for difns_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_difns_tglf F77NAME(psgetrnk_id_difns_tglf)
void psGetRnk_id_difns_tglf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for difns_tglf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_difns_tglf F77NAME(psgetdim_id_difns_tglf)
void psGetDim_id_difns_tglf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get growthrate from ExB
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_growthrate_exb F77NAME(psget_growthrate_exb)
void psGet_growthrate_exb(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set growthrate from ExB
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_growthrate_exb F77NAME(psset_growthrate_exb)
void psSet_growthrate_exb(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of growthrate from ExB
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_growthrate_exb F77NAME(psgetrnk_growthrate_exb)
void psGetRnk_growthrate_exb(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of growthrate from ExB
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_growthrate_exb F77NAME(psgetdim_growthrate_exb)
void psGetDim_growthrate_exb(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for growthrate_exb profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_growthrate_exb F77NAME(psget_id_growthrate_exb)
void psGet_id_growthrate_exb(int* iobj, int* data, int* ierr);

/**
 * Get growthrate from parallel velocity shear
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_growthrate_vpar F77NAME(psget_growthrate_vpar)
void psGet_growthrate_vpar(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set growthrate from parallel velocity shear
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_growthrate_vpar F77NAME(psset_growthrate_vpar)
void psSet_growthrate_vpar(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of growthrate from parallel velocity shear
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_growthrate_vpar F77NAME(psgetrnk_growthrate_vpar)
void psGetRnk_growthrate_vpar(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of growthrate from parallel velocity shear
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_growthrate_vpar F77NAME(psgetdim_growthrate_vpar)
void psGetDim_growthrate_vpar(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for growthrate_vpar profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_growthrate_vpar F77NAME(psget_id_growthrate_vpar)
void psGet_id_growthrate_vpar(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for growthrate_vpar profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_growthrate_vpar F77NAME(psgetrnk_id_growthrate_vpar)
void psGetRnk_id_growthrate_vpar(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for growthrate_vpar profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_growthrate_vpar F77NAME(psgetdim_id_growthrate_vpar)
void psGetDim_id_growthrate_vpar(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_mmm71 F77NAME(psget_chie_mmm71)
void psGet_chie_mmm71(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_mmm71 F77NAME(psset_chie_mmm71)
void psSet_chie_mmm71(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_mmm71 F77NAME(psgetrnk_chie_mmm71)
void psGetRnk_chie_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_mmm71 F77NAME(psgetdim_chie_mmm71)
void psGetDim_chie_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_mmm71 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_mmm71 F77NAME(psget_id_chie_mmm71)
void psGet_id_chie_mmm71(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_mmm71 F77NAME(psget_chii_mmm71)
void psGet_chii_mmm71(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_mmm71 F77NAME(psset_chii_mmm71)
void psSet_chii_mmm71(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_mmm71 F77NAME(psgetrnk_chii_mmm71)
void psGetRnk_chii_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_mmm71 F77NAME(psgetdim_chii_mmm71)
void psGetDim_chii_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_mmm71 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_mmm71 F77NAME(psget_id_chii_mmm71)
void psGet_id_chii_mmm71(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, diffusivity term, toroidal
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chiphi_mmm71 F77NAME(psget_chiphi_mmm71)
void psGet_chiphi_mmm71(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, diffusivity term, toroidal
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chiphi_mmm71 F77NAME(psset_chiphi_mmm71)
void psSet_chiphi_mmm71(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, diffusivity term, toroidal
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chiphi_mmm71 F77NAME(psgetrnk_chiphi_mmm71)
void psGetRnk_chiphi_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, diffusivity term, toroidal
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chiphi_mmm71 F77NAME(psgetdim_chiphi_mmm71)
void psGetDim_chiphi_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chiphi_mmm71 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chiphi_mmm71 F77NAME(psget_id_chiphi_mmm71)
void psGet_id_chiphi_mmm71(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, diffusivity term, poloidal
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chitheta_mmm71 F77NAME(psget_chitheta_mmm71)
void psGet_chitheta_mmm71(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, diffusivity term, poloidal
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chitheta_mmm71 F77NAME(psset_chitheta_mmm71)
void psSet_chitheta_mmm71(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, diffusivity term, poloidal
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chitheta_mmm71 F77NAME(psgetrnk_chitheta_mmm71)
void psGetRnk_chitheta_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, diffusivity term, poloidal
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chitheta_mmm71 F77NAME(psgetdim_chitheta_mmm71)
void psGetDim_chitheta_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chitheta_mmm71 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chitheta_mmm71 F77NAME(psget_id_chitheta_mmm71)
void psGet_id_chitheta_mmm71(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difns_mmm71 F77NAME(psget_difns_mmm71)
void psGet_difns_mmm71(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difns_mmm71 F77NAME(psset_difns_mmm71)
void psSet_difns_mmm71(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difns_mmm71 F77NAME(psgetrnk_difns_mmm71)
void psGetRnk_difns_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difns_mmm71 F77NAME(psgetdim_difns_mmm71)
void psGetDim_difns_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for difns_mmm71 profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difns_mmm71 F77NAME(psget_id_difns_mmm71)
void psGet_id_difns_mmm71(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for difns_mmm71 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_difns_mmm71 F77NAME(psgetrnk_id_difns_mmm71)
void psGetRnk_id_difns_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for difns_mmm71 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_difns_mmm71 F77NAME(psgetdim_id_difns_mmm71)
void psGetDim_id_difns_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get impurity ion diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difnz_mmm71 F77NAME(psget_difnz_mmm71)
void psGet_difnz_mmm71(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set impurity ion diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difnz_mmm71 F77NAME(psset_difnz_mmm71)
void psSet_difnz_mmm71(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of impurity ion diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difnz_mmm71 F77NAME(psgetrnk_difnz_mmm71)
void psGetRnk_difnz_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of impurity ion diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difnz_mmm71 F77NAME(psgetdim_difnz_mmm71)
void psGetDim_difnz_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for difnz_mmm71 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difnz_mmm71 F77NAME(psget_id_difnz_mmm71)
void psGet_id_difnz_mmm71(int* iobj, int* data, int* ierr);

/**
 * Get growthrate from mmm71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_growthrate_mmm71 F77NAME(psget_growthrate_mmm71)
void psGet_growthrate_mmm71(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set growthrate from mmm71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_growthrate_mmm71 F77NAME(psset_growthrate_mmm71)
void psSet_growthrate_mmm71(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of growthrate from mmm71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_growthrate_mmm71 F77NAME(psgetrnk_growthrate_mmm71)
void psGetRnk_growthrate_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of growthrate from mmm71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_growthrate_mmm71 F77NAME(psgetdim_growthrate_mmm71)
void psGetDim_growthrate_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for growthrate_mmm71 profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_growthrate_mmm71 F77NAME(psget_id_growthrate_mmm71)
void psGet_id_growthrate_mmm71(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for growthrate_mmm71 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_growthrate_mmm71 F77NAME(psgetrnk_id_growthrate_mmm71)
void psGetRnk_id_growthrate_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for growthrate_mmm71 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_growthrate_mmm71 F77NAME(psgetdim_id_growthrate_mmm71)
void psGetDim_id_growthrate_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get frequency from mmm71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_freq_mmm71 F77NAME(psget_freq_mmm71)
void psGet_freq_mmm71(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set frequency from mmm71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_freq_mmm71 F77NAME(psset_freq_mmm71)
void psSet_freq_mmm71(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of frequency from mmm71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_freq_mmm71 F77NAME(psgetrnk_freq_mmm71)
void psGetRnk_freq_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of frequency from mmm71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_freq_mmm71 F77NAME(psgetdim_freq_mmm71)
void psGetDim_freq_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for freq_mmm71 profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_freq_mmm71 F77NAME(psget_id_freq_mmm71)
void psGet_id_freq_mmm71(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for freq_mmm71 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_freq_mmm71 F77NAME(psgetrnk_id_freq_mmm71)
void psGetRnk_id_freq_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for freq_mmm71 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_freq_mmm71 F77NAME(psgetdim_id_freq_mmm71)
void psGetDim_id_freq_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velte_mmm71 F77NAME(psget_velte_mmm71)
void psGet_velte_mmm71(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velte_mmm71 F77NAME(psset_velte_mmm71)
void psSet_velte_mmm71(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velte_mmm71 F77NAME(psgetrnk_velte_mmm71)
void psGetRnk_velte_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velte_mmm71 F77NAME(psgetdim_velte_mmm71)
void psGetDim_velte_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velte_mmm71 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velte_mmm71 F77NAME(psget_id_velte_mmm71)
void psGet_id_velte_mmm71(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velti_mmm71 F77NAME(psget_velti_mmm71)
void psGet_velti_mmm71(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velti_mmm71 F77NAME(psset_velti_mmm71)
void psSet_velti_mmm71(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velti_mmm71 F77NAME(psgetrnk_velti_mmm71)
void psGetRnk_velti_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velti_mmm71 F77NAME(psgetdim_velti_mmm71)
void psGetDim_velti_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velti_mmm71 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velti_mmm71 F77NAME(psget_id_velti_mmm71)
void psGet_id_velti_mmm71(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velpphi_mmm71 F77NAME(psget_velpphi_mmm71)
void psGet_velpphi_mmm71(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velpphi_mmm71 F77NAME(psset_velpphi_mmm71)
void psSet_velpphi_mmm71(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velpphi_mmm71 F77NAME(psgetrnk_velpphi_mmm71)
void psGetRnk_velpphi_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velpphi_mmm71 F77NAME(psgetdim_velpphi_mmm71)
void psGetDim_velpphi_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velpphi_mmm71 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velpphi_mmm71 F77NAME(psget_id_velpphi_mmm71)
void psGet_id_velpphi_mmm71(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velns_mmm71 F77NAME(psget_velns_mmm71)
void psGet_velns_mmm71(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velns_mmm71 F77NAME(psset_velns_mmm71)
void psSet_velns_mmm71(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velns_mmm71 F77NAME(psgetrnk_velns_mmm71)
void psGetRnk_velns_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, advective velocity term from MMM71 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velns_mmm71 F77NAME(psgetdim_velns_mmm71)
void psGetDim_velns_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for velns_mmm71 profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velns_mmm71 F77NAME(psget_id_velns_mmm71)
void psGet_id_velns_mmm71(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for velns_mmm71 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_velns_mmm71 F77NAME(psgetrnk_id_velns_mmm71)
void psGetRnk_id_velns_mmm71(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for velns_mmm71 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_velns_mmm71 F77NAME(psgetdim_id_velns_mmm71)
void psGetDim_id_velns_mmm71(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_w19 F77NAME(psget_chie_w19)
void psGet_chie_w19(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_w19 F77NAME(psset_chie_w19)
void psSet_chie_w19(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_w19 F77NAME(psgetrnk_chie_w19)
void psGetRnk_chie_w19(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_w19 F77NAME(psgetdim_chie_w19)
void psGetDim_chie_w19(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_w19 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_w19 F77NAME(psget_id_chie_w19)
void psGet_id_chie_w19(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_w19 F77NAME(psget_chii_w19)
void psGet_chii_w19(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_w19 F77NAME(psset_chii_w19)
void psSet_chii_w19(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_w19 F77NAME(psgetrnk_chii_w19)
void psGetRnk_chii_w19(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_w19 F77NAME(psgetdim_chii_w19)
void psGetDim_chii_w19(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_w19 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_w19 F77NAME(psget_id_chii_w19)
void psGet_id_chii_w19(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chiphi_w19 F77NAME(psget_chiphi_w19)
void psGet_chiphi_w19(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chiphi_w19 F77NAME(psset_chiphi_w19)
void psSet_chiphi_w19(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chiphi_w19 F77NAME(psgetrnk_chiphi_w19)
void psGetRnk_chiphi_w19(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chiphi_w19 F77NAME(psgetdim_chiphi_w19)
void psGetDim_chiphi_w19(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chiphi_w19 profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chiphi_w19 F77NAME(psget_id_chiphi_w19)
void psGet_id_chiphi_w19(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difns_w19 F77NAME(psget_difns_w19)
void psGet_difns_w19(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difns_w19 F77NAME(psset_difns_w19)
void psSet_difns_w19(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difns_w19 F77NAME(psgetrnk_difns_w19)
void psGetRnk_difns_w19(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difns_w19 F77NAME(psgetdim_difns_w19)
void psGetDim_difns_w19(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for difns_w19 profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difns_w19 F77NAME(psget_id_difns_w19)
void psGet_id_difns_w19(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for difns_w19 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_difns_w19 F77NAME(psgetrnk_id_difns_w19)
void psGetRnk_id_difns_w19(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for difns_w19 profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_difns_w19 F77NAME(psgetdim_id_difns_w19)
void psGetDim_id_difns_w19(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_drbm F77NAME(psget_chie_drbm)
void psGet_chie_drbm(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_drbm F77NAME(psset_chie_drbm)
void psSet_chie_drbm(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_drbm F77NAME(psgetrnk_chie_drbm)
void psGetRnk_chie_drbm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_drbm F77NAME(psgetdim_chie_drbm)
void psGetDim_chie_drbm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_drbm profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_drbm F77NAME(psget_id_chie_drbm)
void psGet_id_chie_drbm(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_drbm F77NAME(psget_chii_drbm)
void psGet_chii_drbm(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_drbm F77NAME(psset_chii_drbm)
void psSet_chii_drbm(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_drbm F77NAME(psgetrnk_chii_drbm)
void psGetRnk_chii_drbm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_drbm F77NAME(psgetdim_chii_drbm)
void psGetDim_chii_drbm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_drbm profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_drbm F77NAME(psget_id_chii_drbm)
void psGet_id_chii_drbm(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chiphi_drbm F77NAME(psget_chiphi_drbm)
void psGet_chiphi_drbm(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chiphi_drbm F77NAME(psset_chiphi_drbm)
void psSet_chiphi_drbm(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chiphi_drbm F77NAME(psgetrnk_chiphi_drbm)
void psGetRnk_chiphi_drbm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chiphi_drbm F77NAME(psgetdim_chiphi_drbm)
void psGetDim_chiphi_drbm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chiphi_drbm profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chiphi_drbm F77NAME(psget_id_chiphi_drbm)
void psGet_id_chiphi_drbm(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difns_drbm F77NAME(psget_difns_drbm)
void psGet_difns_drbm(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difns_drbm F77NAME(psset_difns_drbm)
void psSet_difns_drbm(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difns_drbm F77NAME(psgetrnk_difns_drbm)
void psGetRnk_difns_drbm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, diffusivity term
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difns_drbm F77NAME(psgetdim_difns_drbm)
void psGetDim_difns_drbm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for difns_drbm profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difns_drbm F77NAME(psget_id_difns_drbm)
void psGet_id_difns_drbm(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for difns_drbm profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_difns_drbm F77NAME(psgetrnk_id_difns_drbm)
void psGetRnk_id_difns_drbm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for difns_drbm profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_difns_drbm F77NAME(psgetdim_id_difns_drbm)
void psGetDim_id_difns_drbm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get ion convective velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velni_drbm F77NAME(psget_velni_drbm)
void psGet_velni_drbm(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set ion convective velocity
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velni_drbm F77NAME(psset_velni_drbm)
void psSet_velni_drbm(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of ion convective velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velni_drbm F77NAME(psgetrnk_velni_drbm)
void psGetRnk_velni_drbm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of ion convective velocity
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velni_drbm F77NAME(psgetdim_velni_drbm)
void psGetDim_velni_drbm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velni_drbm profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velni_drbm F77NAME(psget_id_velni_drbm)
void psGet_id_velni_drbm(int* iobj, int* data, int* ierr);

/**
 * Get growthrate from DRBM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_growthrate_drbm F77NAME(psget_growthrate_drbm)
void psGet_growthrate_drbm(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set growthrate from DRBM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_growthrate_drbm F77NAME(psset_growthrate_drbm)
void psSet_growthrate_drbm(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of growthrate from DRBM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_growthrate_drbm F77NAME(psgetrnk_growthrate_drbm)
void psGetRnk_growthrate_drbm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of growthrate from DRBM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_growthrate_drbm F77NAME(psgetdim_growthrate_drbm)
void psGetDim_growthrate_drbm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for growthrate_drbm profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_growthrate_drbm F77NAME(psget_id_growthrate_drbm)
void psGet_id_growthrate_drbm(int* iobj, int* data, int* ierr);

/**
 * Get frequency from DRBM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_freq_drbm F77NAME(psget_freq_drbm)
void psGet_freq_drbm(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set frequency from DRBM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_freq_drbm F77NAME(psset_freq_drbm)
void psSet_freq_drbm(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of frequency from DRBM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_freq_drbm F77NAME(psgetrnk_freq_drbm)
void psGetRnk_freq_drbm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of frequency from DRBM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_freq_drbm F77NAME(psgetdim_freq_drbm)
void psGetDim_freq_drbm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for freq_drbm profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_freq_drbm F77NAME(psget_id_freq_drbm)
void psGet_id_freq_drbm(int* iobj, int* data, int* ierr);

/**
 * Get Te-equation, diffusivity term PALEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_paleo F77NAME(psget_chie_paleo)
void psGet_chie_paleo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, diffusivity term PALEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_paleo F77NAME(psset_chie_paleo)
void psSet_chie_paleo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, diffusivity term PALEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_paleo F77NAME(psgetrnk_chie_paleo)
void psGetRnk_chie_paleo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, diffusivity term PALEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_paleo F77NAME(psgetdim_chie_paleo)
void psGetDim_chie_paleo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_paleo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_paleo F77NAME(psget_id_chie_paleo)
void psGet_id_chie_paleo(int* iobj, int* data, int* ierr);

/**
 * Get Te-equation, convection term from PALEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velte_paleo F77NAME(psget_velte_paleo)
void psGet_velte_paleo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, convection term from PALEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velte_paleo F77NAME(psset_velte_paleo)
void psSet_velte_paleo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, convection term from PALEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velte_paleo F77NAME(psgetrnk_velte_paleo)
void psGetRnk_velte_paleo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, convection term from PALEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velte_paleo F77NAME(psgetdim_velte_paleo)
void psGetDim_velte_paleo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velte_paleo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velte_paleo F77NAME(psget_id_velte_paleo)
void psGet_id_velte_paleo(int* iobj, int* data, int* ierr);

/**
 * Get Te-equation, diffusivity term ETG model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_etg F77NAME(psget_chie_etg)
void psGet_chie_etg(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, diffusivity term ETG model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_etg F77NAME(psset_chie_etg)
void psSet_chie_etg(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, diffusivity term ETG model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_etg F77NAME(psgetrnk_chie_etg)
void psGetRnk_chie_etg(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, diffusivity term ETG model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_etg F77NAME(psgetdim_chie_etg)
void psGetDim_chie_etg(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_etg profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_etg F77NAME(psget_id_chie_etg)
void psGet_id_chie_etg(int* iobj, int* data, int* ierr);

/**
 * Get Te-equation, thermal diffusivity term MTM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_mtm F77NAME(psget_chie_mtm)
void psGet_chie_mtm(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, thermal diffusivity term MTM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_mtm F77NAME(psset_chie_mtm)
void psSet_chie_mtm(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, thermal diffusivity term MTM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_mtm F77NAME(psgetrnk_chie_mtm)
void psGetRnk_chie_mtm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, thermal diffusivity term MTM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_mtm F77NAME(psgetdim_chie_mtm)
void psGetDim_chie_mtm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_mtm profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_mtm F77NAME(psget_id_chie_mtm)
void psGet_id_chie_mtm(int* iobj, int* data, int* ierr);

/**
 * Get growthrate from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_growthrate_glf F77NAME(psget_growthrate_glf)
void psGet_growthrate_glf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set growthrate from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_growthrate_glf F77NAME(psset_growthrate_glf)
void psSet_growthrate_glf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of growthrate from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_growthrate_glf F77NAME(psgetrnk_growthrate_glf)
void psGetRnk_growthrate_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of growthrate from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_growthrate_glf F77NAME(psgetdim_growthrate_glf)
void psGetDim_growthrate_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for growthrate_glf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_growthrate_glf F77NAME(psget_id_growthrate_glf)
void psGet_id_growthrate_glf(int* iobj, int* data, int* ierr);

/**
 * Get frequency from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_freq_glf F77NAME(psget_freq_glf)
void psGet_freq_glf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set frequency from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_freq_glf F77NAME(psset_freq_glf)
void psSet_freq_glf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of frequency from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_freq_glf F77NAME(psgetrnk_freq_glf)
void psGetRnk_freq_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of frequency from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_freq_glf F77NAME(psgetdim_freq_glf)
void psGetDim_freq_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for freq_glf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_freq_glf F77NAME(psget_id_freq_glf)
void psGet_id_freq_glf(int* iobj, int* data, int* ierr);

/**
 * Get Te-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velte_glf F77NAME(psget_velte_glf)
void psGet_velte_glf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velte_glf F77NAME(psset_velte_glf)
void psSet_velte_glf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velte_glf F77NAME(psgetrnk_velte_glf)
void psGetRnk_velte_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velte_glf F77NAME(psgetdim_velte_glf)
void psGetDim_velte_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velte_glf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velte_glf F77NAME(psget_id_velte_glf)
void psGet_id_velte_glf(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velti_glf F77NAME(psget_velti_glf)
void psGet_velti_glf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velti_glf F77NAME(psset_velti_glf)
void psSet_velti_glf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velti_glf F77NAME(psgetrnk_velti_glf)
void psGetRnk_velti_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velti_glf F77NAME(psgetdim_velti_glf)
void psGetDim_velti_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velti_glf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velti_glf F77NAME(psget_id_velti_glf)
void psGet_id_velti_glf(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velpphi_glf F77NAME(psget_velpphi_glf)
void psGet_velpphi_glf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velpphi_glf F77NAME(psset_velpphi_glf)
void psSet_velpphi_glf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velpphi_glf F77NAME(psgetrnk_velpphi_glf)
void psGetRnk_velpphi_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velpphi_glf F77NAME(psgetdim_velpphi_glf)
void psGetDim_velpphi_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velpphi_glf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velpphi_glf F77NAME(psget_id_velpphi_glf)
void psGet_id_velpphi_glf(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velns_glf F77NAME(psget_velns_glf)
void psGet_velns_glf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velns_glf F77NAME(psset_velns_glf)
void psSet_velns_glf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velns_glf F77NAME(psgetrnk_velns_glf)
void psGetRnk_velns_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, advective velocity term from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velns_glf F77NAME(psgetdim_velns_glf)
void psGetDim_velns_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for velns_glf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velns_glf F77NAME(psget_id_velns_glf)
void psGet_id_velns_glf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for velns_glf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_velns_glf F77NAME(psgetrnk_id_velns_glf)
void psGetRnk_id_velns_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for velns_glf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_velns_glf F77NAME(psgetdim_id_velns_glf)
void psGetDim_id_velns_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_glf F77NAME(psget_chie_glf)
void psGet_chie_glf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_glf F77NAME(psset_chie_glf)
void psSet_chie_glf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_glf F77NAME(psgetrnk_chie_glf)
void psGetRnk_chie_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_glf F77NAME(psgetdim_chie_glf)
void psGetDim_chie_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_glf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_glf F77NAME(psget_id_chie_glf)
void psGet_id_chie_glf(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_glf F77NAME(psget_chii_glf)
void psGet_chii_glf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_glf F77NAME(psset_chii_glf)
void psSet_chii_glf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_glf F77NAME(psgetrnk_chii_glf)
void psGetRnk_chii_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_glf F77NAME(psgetdim_chii_glf)
void psGetDim_chii_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_glf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_glf F77NAME(psget_id_chii_glf)
void psGet_id_chii_glf(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chiphi_glf F77NAME(psget_chiphi_glf)
void psGet_chiphi_glf(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chiphi_glf F77NAME(psset_chiphi_glf)
void psSet_chiphi_glf(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chiphi_glf F77NAME(psgetrnk_chiphi_glf)
void psGetRnk_chiphi_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chiphi_glf F77NAME(psgetdim_chiphi_glf)
void psGetDim_chiphi_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chiphi_glf profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chiphi_glf F77NAME(psget_id_chiphi_glf)
void psGet_id_chiphi_glf(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difns_glf F77NAME(psget_difns_glf)
void psGet_difns_glf(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difns_glf F77NAME(psset_difns_glf)
void psSet_difns_glf(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difns_glf F77NAME(psgetrnk_difns_glf)
void psGetRnk_difns_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, neoclassical diffusivity from GLF23 model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difns_glf F77NAME(psgetdim_difns_glf)
void psGetDim_difns_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for difns_glf profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difns_glf F77NAME(psget_id_difns_glf)
void psGet_id_difns_glf(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for difns_glf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_difns_glf F77NAME(psgetrnk_id_difns_glf)
void psGetRnk_id_difns_glf(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for difns_glf profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_difns_glf F77NAME(psgetdim_id_difns_glf)
void psGetDim_id_difns_glf(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_gtcneo F77NAME(psget_chie_gtcneo)
void psGet_chie_gtcneo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_gtcneo F77NAME(psset_chie_gtcneo)
void psSet_chie_gtcneo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_gtcneo F77NAME(psgetrnk_chie_gtcneo)
void psGetRnk_chie_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_gtcneo F77NAME(psgetdim_chie_gtcneo)
void psGetDim_chie_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_gtcneo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_gtcneo F77NAME(psget_id_chie_gtcneo)
void psGet_id_chie_gtcneo(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_gtcneo F77NAME(psget_chii_gtcneo)
void psGet_chii_gtcneo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_gtcneo F77NAME(psset_chii_gtcneo)
void psSet_chii_gtcneo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_gtcneo F77NAME(psgetrnk_chii_gtcneo)
void psGetRnk_chii_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_gtcneo F77NAME(psgetdim_chii_gtcneo)
void psGetDim_chii_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_gtcneo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_gtcneo F77NAME(psget_id_chii_gtcneo)
void psGet_id_chii_gtcneo(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chiphi_gtcneo F77NAME(psget_chiphi_gtcneo)
void psGet_chiphi_gtcneo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chiphi_gtcneo F77NAME(psset_chiphi_gtcneo)
void psSet_chiphi_gtcneo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chiphi_gtcneo F77NAME(psgetrnk_chiphi_gtcneo)
void psGetRnk_chiphi_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chiphi_gtcneo F77NAME(psgetdim_chiphi_gtcneo)
void psGetDim_chiphi_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chiphi_gtcneo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chiphi_gtcneo F77NAME(psget_id_chiphi_gtcneo)
void psGet_id_chiphi_gtcneo(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difns_gtcneo F77NAME(psget_difns_gtcneo)
void psGet_difns_gtcneo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difns_gtcneo F77NAME(psset_difns_gtcneo)
void psSet_difns_gtcneo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difns_gtcneo F77NAME(psgetrnk_difns_gtcneo)
void psGetRnk_difns_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, neoclassical diffusivity from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difns_gtcneo F77NAME(psgetdim_difns_gtcneo)
void psGetDim_difns_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for difns_gtcneo profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difns_gtcneo F77NAME(psget_id_difns_gtcneo)
void psGet_id_difns_gtcneo(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for difns_gtcneo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_difns_gtcneo F77NAME(psgetrnk_id_difns_gtcneo)
void psGetRnk_id_difns_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for difns_gtcneo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_difns_gtcneo F77NAME(psgetdim_id_difns_gtcneo)
void psGetDim_id_difns_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velte_gtcneo F77NAME(psget_velte_gtcneo)
void psGet_velte_gtcneo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velte_gtcneo F77NAME(psset_velte_gtcneo)
void psSet_velte_gtcneo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velte_gtcneo F77NAME(psgetrnk_velte_gtcneo)
void psGetRnk_velte_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velte_gtcneo F77NAME(psgetdim_velte_gtcneo)
void psGetDim_velte_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velte_gtcneo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velte_gtcneo F77NAME(psget_id_velte_gtcneo)
void psGet_id_velte_gtcneo(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velti_gtcneo F77NAME(psget_velti_gtcneo)
void psGet_velti_gtcneo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velti_gtcneo F77NAME(psset_velti_gtcneo)
void psSet_velti_gtcneo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velti_gtcneo F77NAME(psgetrnk_velti_gtcneo)
void psGetRnk_velti_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velti_gtcneo F77NAME(psgetdim_velti_gtcneo)
void psGetDim_velti_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velti_gtcneo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velti_gtcneo F77NAME(psget_id_velti_gtcneo)
void psGet_id_velti_gtcneo(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velpphi_gtcneo F77NAME(psget_velpphi_gtcneo)
void psGet_velpphi_gtcneo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velpphi_gtcneo F77NAME(psset_velpphi_gtcneo)
void psSet_velpphi_gtcneo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velpphi_gtcneo F77NAME(psgetrnk_velpphi_gtcneo)
void psGetRnk_velpphi_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velpphi_gtcneo F77NAME(psgetdim_velpphi_gtcneo)
void psGetDim_velpphi_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velpphi_gtcneo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velpphi_gtcneo F77NAME(psget_id_velpphi_gtcneo)
void psGet_id_velpphi_gtcneo(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velns_gtcneo F77NAME(psget_velns_gtcneo)
void psGet_velns_gtcneo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velns_gtcneo F77NAME(psset_velns_gtcneo)
void psSet_velns_gtcneo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velns_gtcneo F77NAME(psgetrnk_velns_gtcneo)
void psGetRnk_velns_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, advective velocity term from GTC_NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velns_gtcneo F77NAME(psgetdim_velns_gtcneo)
void psGetDim_velns_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for velns_gtcneo profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velns_gtcneo F77NAME(psget_id_velns_gtcneo)
void psGet_id_velns_gtcneo(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for velns_gtcneo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_velns_gtcneo F77NAME(psgetrnk_id_velns_gtcneo)
void psGetRnk_id_velns_gtcneo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for velns_gtcneo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_velns_gtcneo F77NAME(psgetdim_id_velns_gtcneo)
void psGetDim_id_velns_gtcneo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_neo F77NAME(psget_chie_neo)
void psGet_chie_neo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_neo F77NAME(psset_chie_neo)
void psSet_chie_neo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_neo F77NAME(psgetrnk_chie_neo)
void psGetRnk_chie_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_neo F77NAME(psgetdim_chie_neo)
void psGetDim_chie_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_neo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_neo F77NAME(psget_id_chie_neo)
void psGet_id_chie_neo(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_neo F77NAME(psget_chii_neo)
void psGet_chii_neo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_neo F77NAME(psset_chii_neo)
void psSet_chii_neo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_neo F77NAME(psgetrnk_chii_neo)
void psGetRnk_chii_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_neo F77NAME(psgetdim_chii_neo)
void psGetDim_chii_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_neo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_neo F77NAME(psget_id_chii_neo)
void psGet_id_chii_neo(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chiphi_neo F77NAME(psget_chiphi_neo)
void psGet_chiphi_neo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chiphi_neo F77NAME(psset_chiphi_neo)
void psSet_chiphi_neo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chiphi_neo F77NAME(psgetrnk_chiphi_neo)
void psGetRnk_chiphi_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chiphi_neo F77NAME(psgetdim_chiphi_neo)
void psGetDim_chiphi_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chiphi_neo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chiphi_neo F77NAME(psget_id_chiphi_neo)
void psGet_id_chiphi_neo(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_difns_neo F77NAME(psget_difns_neo)
void psGet_difns_neo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_difns_neo F77NAME(psset_difns_neo)
void psSet_difns_neo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_difns_neo F77NAME(psgetrnk_difns_neo)
void psGetRnk_difns_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, neoclassical diffusivity from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_difns_neo F77NAME(psgetdim_difns_neo)
void psGetDim_difns_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for difns_neo profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_difns_neo F77NAME(psget_id_difns_neo)
void psGet_id_difns_neo(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for difns_neo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_difns_neo F77NAME(psgetrnk_id_difns_neo)
void psGetRnk_id_difns_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for difns_neo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_difns_neo F77NAME(psgetdim_id_difns_neo)
void psGetDim_id_difns_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velte_neo F77NAME(psget_velte_neo)
void psGet_velte_neo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velte_neo F77NAME(psset_velte_neo)
void psSet_velte_neo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velte_neo F77NAME(psgetrnk_velte_neo)
void psGetRnk_velte_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velte_neo F77NAME(psgetdim_velte_neo)
void psGetDim_velte_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velte_neo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velte_neo F77NAME(psget_id_velte_neo)
void psGet_id_velte_neo(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velti_neo F77NAME(psget_velti_neo)
void psGet_velti_neo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velti_neo F77NAME(psset_velti_neo)
void psSet_velti_neo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velti_neo F77NAME(psgetrnk_velti_neo)
void psGetRnk_velti_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velti_neo F77NAME(psgetdim_velti_neo)
void psGetDim_velti_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velti_neo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velti_neo F77NAME(psget_id_velti_neo)
void psGet_id_velti_neo(int* iobj, int* data, int* ierr);

/**
 * Get momentum-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velpphi_neo F77NAME(psget_velpphi_neo)
void psGet_velpphi_neo(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set momentum-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velpphi_neo F77NAME(psset_velpphi_neo)
void psSet_velpphi_neo(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of momentum-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velpphi_neo F77NAME(psgetrnk_velpphi_neo)
void psGetRnk_velpphi_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of momentum-equation, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velpphi_neo F77NAME(psgetdim_velpphi_neo)
void psGetDim_velpphi_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for velpphi_neo profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velpphi_neo F77NAME(psget_id_velpphi_neo)
void psGet_id_velpphi_neo(int* iobj, int* data, int* ierr);

/**
 * Get density-equations, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_velns_neo F77NAME(psget_velns_neo)
void psGet_velns_neo(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set density-equations, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_velns_neo F77NAME(psset_velns_neo)
void psSet_velns_neo(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of density-equations, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_velns_neo F77NAME(psgetrnk_velns_neo)
void psGetRnk_velns_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of density-equations, advective velocity term from NEO model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_velns_neo F77NAME(psgetdim_velns_neo)
void psGetDim_velns_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'Array of IDs for velns_neo profiles'
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_velns_neo F77NAME(psget_id_velns_neo)
void psGet_id_velns_neo(int* iobj, const int* n1, int* data, int* ierr);

/**
 * Get number of dimension of 'Array of IDs for velns_neo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_id_velns_neo F77NAME(psgetrnk_id_velns_neo)
void psGetRnk_id_velns_neo(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of 'Array of IDs for velns_neo profiles'
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_id_velns_neo F77NAME(psgetdim_id_velns_neo)
void psGetDim_id_velns_neo(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Te-equation, neoclassical diffusivity from NTM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chie_ntm F77NAME(psget_chie_ntm)
void psGet_chie_ntm(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Te-equation, neoclassical diffusivity from NTM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chie_ntm F77NAME(psset_chie_ntm)
void psSet_chie_ntm(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Te-equation, neoclassical diffusivity from NTM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chie_ntm F77NAME(psgetrnk_chie_ntm)
void psGetRnk_chie_ntm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Te-equation, neoclassical diffusivity from NTM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chie_ntm F77NAME(psgetdim_chie_ntm)
void psGetDim_chie_ntm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chie_ntm profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chie_ntm F77NAME(psget_id_chie_ntm)
void psGet_id_chie_ntm(int* iobj, int* data, int* ierr);

/**
 * Get Ti-equation, neoclassical diffusivity from NTM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_chii_ntm F77NAME(psget_chii_ntm)
void psGet_chii_ntm(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Ti-equation, neoclassical diffusivity from NTM model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_chii_ntm F77NAME(psset_chii_ntm)
void psSet_chii_ntm(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Ti-equation, neoclassical diffusivity from NTM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_chii_ntm F77NAME(psgetrnk_chii_ntm)
void psGetRnk_chii_ntm(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Ti-equation, neoclassical diffusivity from NTM model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_chii_ntm F77NAME(psgetdim_chii_ntm)
void psGetDim_chii_ntm(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for chii_ntm profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_chii_ntm F77NAME(psget_id_chii_ntm)
void psGet_id_chii_ntm(int* iobj, int* data, int* ierr);

/**
 * Get target density profile, from experiment or "profile consistency" model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_nmodel F77NAME(psget_nmodel)
void psGet_nmodel(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set target density profile, from experiment or "profile consistency" model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_nmodel F77NAME(psset_nmodel)
void psSet_nmodel(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of target density profile, from experiment or "profile consistency" model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_nmodel F77NAME(psgetrnk_nmodel)
void psGetRnk_nmodel(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of target density profile, from experiment or "profile consistency" model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_nmodel F77NAME(psgetdim_nmodel)
void psGetDim_nmodel(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for nmodel profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_nmodel F77NAME(psget_id_nmodel)
void psGet_id_nmodel(int* iobj, int* data, int* ierr);

/**
 * Get target temperature profile, from experiment or "profile consistency" model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_tmodel F77NAME(psget_tmodel)
void psGet_tmodel(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set target temperature profile, from experiment or "profile consistency" model
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_tmodel F77NAME(psset_tmodel)
void psSet_tmodel(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of target temperature profile, from experiment or "profile consistency" model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_tmodel F77NAME(psgetrnk_tmodel)
void psGetRnk_tmodel(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of target temperature profile, from experiment or "profile consistency" model
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_tmodel F77NAME(psgetdim_tmodel)
void psGetDim_tmodel(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for tmodel profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_tmodel F77NAME(psget_id_tmodel)
void psGet_id_tmodel(int* iobj, int* data, int* ierr);

/**
 * Get chi_e/chi_i, ratio of electron heat diffusivity to ion heat diffusivity, a model input, (does not effect relative non-diffusive heat pinch velocities).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_ee_mobility_factor F77NAME(psget_ee_mobility_factor)
void psGet_ee_mobility_factor(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set chi_e/chi_i, ratio of electron heat diffusivity to ion heat diffusivity, a model input, (does not effect relative non-diffusive heat pinch velocities).
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_ee_mobility_factor F77NAME(psset_ee_mobility_factor)
void psSet_ee_mobility_factor(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of chi_e/chi_i, ratio of electron heat diffusivity to ion heat diffusivity, a model input, (does not effect relative non-diffusive heat pinch velocities).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_ee_mobility_factor F77NAME(psgetrnk_ee_mobility_factor)
void psGetRnk_ee_mobility_factor(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of chi_e/chi_i, ratio of electron heat diffusivity to ion heat diffusivity, a model input, (does not effect relative non-diffusive heat pinch velocities).
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_ee_mobility_factor F77NAME(psgetdim_ee_mobility_factor)
void psGetDim_ee_mobility_factor(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get 'ID for ee_mobility_factor profile'
 * @param iobj reference to opaque plasma state object 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_id_ee_mobility_factor F77NAME(psget_id_ee_mobility_factor)
void psGet_id_ee_mobility_factor(int* iobj, int* data, int* ierr);

/**
 * Get flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dr_geo_drho F77NAME(psget_dr_geo_drho)
void psGet_dr_geo_drho(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dr_geo_drho F77NAME(psset_dr_geo_drho)
void psSet_dr_geo_drho(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dr_geo_drho F77NAME(psgetrnk_dr_geo_drho)
void psGetRnk_dr_geo_drho(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dr_geo_drho F77NAME(psgetdim_dr_geo_drho)
void psGetDim_dr_geo_drho(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dr_geo_dth F77NAME(psget_dr_geo_dth)
void psGet_dr_geo_dth(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dr_geo_dth F77NAME(psset_dr_geo_dth)
void psSet_dr_geo_dth(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dr_geo_dth F77NAME(psgetrnk_dr_geo_dth)
void psGetRnk_dr_geo_dth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dr_geo_dth F77NAME(psgetdim_dr_geo_dth)
void psGetDim_dr_geo_dth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_d2r_geo_drhodth F77NAME(psget_d2r_geo_drhodth)
void psGet_d2r_geo_drhodth(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_d2r_geo_drhodth F77NAME(psset_d2r_geo_drhodth)
void psSet_d2r_geo_drhodth(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_d2r_geo_drhodth F77NAME(psgetrnk_d2r_geo_drhodth)
void psGetRnk_d2r_geo_drhodth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of flux surfaces R(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_d2r_geo_drhodth F77NAME(psgetdim_d2r_geo_drhodth)
void psGetDim_d2r_geo_drhodth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dz_geo_drho F77NAME(psget_dz_geo_drho)
void psGet_dz_geo_drho(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dz_geo_drho F77NAME(psset_dz_geo_drho)
void psSet_dz_geo_drho(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dz_geo_drho F77NAME(psgetrnk_dz_geo_drho)
void psGetRnk_dz_geo_drho(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dz_geo_drho F77NAME(psgetdim_dz_geo_drho)
void psGetDim_dz_geo_drho(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dz_geo_dth F77NAME(psget_dz_geo_dth)
void psGet_dz_geo_dth(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dz_geo_dth F77NAME(psset_dz_geo_dth)
void psSet_dz_geo_dth(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dz_geo_dth F77NAME(psgetrnk_dz_geo_dth)
void psGetRnk_dz_geo_dth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dz_geo_dth F77NAME(psgetdim_dz_geo_dth)
void psGetDim_dz_geo_dth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_d2z_geo_drhodth F77NAME(psget_d2z_geo_drhodth)
void psGet_d2z_geo_drhodth(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_d2z_geo_drhodth F77NAME(psset_d2z_geo_drhodth)
void psSet_d2z_geo_drhodth(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_d2z_geo_drhodth F77NAME(psgetrnk_d2z_geo_drhodth)
void psGetRnk_d2z_geo_drhodth(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of flux surfaces Z(rho,theta)
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_d2z_geo_drhodth F77NAME(psgetdim_d2z_geo_drhodth)
void psGetDim_d2z_geo_drhodth(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get R0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dr0_momeq_drho F77NAME(psget_dr0_momeq_drho)
void psGet_dr0_momeq_drho(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set R0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dr0_momeq_drho F77NAME(psset_dr0_momeq_drho)
void psSet_dr0_momeq_drho(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of R0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dr0_momeq_drho F77NAME(psgetrnk_dr0_momeq_drho)
void psGetRnk_dr0_momeq_drho(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of R0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dr0_momeq_drho F77NAME(psgetdim_dr0_momeq_drho)
void psGetDim_dr0_momeq_drho(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get Z0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dz0_momeq_drho F77NAME(psget_dz0_momeq_drho)
void psGet_dz0_momeq_drho(int* iobj, const int* n1, double* data, int* ierr);

/**
 * Set Z0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dz0_momeq_drho F77NAME(psset_dz0_momeq_drho)
void psSet_dz0_momeq_drho(int* iobj, const int* n1, const double* data, int* ierr);

/**
 * Get number of dimension of Z0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dz0_momeq_drho F77NAME(psgetrnk_dz0_momeq_drho)
void psGetRnk_dz0_momeq_drho(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of Z0 of flux surface, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dz0_momeq_drho F77NAME(psgetdim_dz0_momeq_drho)
void psGetDim_dz0_momeq_drho(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get scaled R cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dxrjcos_momeq_drho F77NAME(psget_dxrjcos_momeq_drho)
void psGet_dxrjcos_momeq_drho(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set scaled R cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dxrjcos_momeq_drho F77NAME(psset_dxrjcos_momeq_drho)
void psSet_dxrjcos_momeq_drho(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of scaled R cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dxrjcos_momeq_drho F77NAME(psgetrnk_dxrjcos_momeq_drho)
void psGetRnk_dxrjcos_momeq_drho(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of scaled R cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dxrjcos_momeq_drho F77NAME(psgetdim_dxrjcos_momeq_drho)
void psGetDim_dxrjcos_momeq_drho(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get scaled R sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dxrjsin_momeq_drho F77NAME(psget_dxrjsin_momeq_drho)
void psGet_dxrjsin_momeq_drho(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set scaled R sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dxrjsin_momeq_drho F77NAME(psset_dxrjsin_momeq_drho)
void psSet_dxrjsin_momeq_drho(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of scaled R sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dxrjsin_momeq_drho F77NAME(psgetrnk_dxrjsin_momeq_drho)
void psGetRnk_dxrjsin_momeq_drho(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of scaled R sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dxrjsin_momeq_drho F77NAME(psgetdim_dxrjsin_momeq_drho)
void psGetDim_dxrjsin_momeq_drho(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get scaled Z cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dxzjcos_momeq_drho F77NAME(psget_dxzjcos_momeq_drho)
void psGet_dxzjcos_momeq_drho(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set scaled Z cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dxzjcos_momeq_drho F77NAME(psset_dxzjcos_momeq_drho)
void psSet_dxzjcos_momeq_drho(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of scaled Z cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dxzjcos_momeq_drho F77NAME(psgetrnk_dxzjcos_momeq_drho)
void psGetRnk_dxzjcos_momeq_drho(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of scaled Z cos moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dxzjcos_momeq_drho F77NAME(psgetdim_dxzjcos_momeq_drho)
void psGetDim_dxzjcos_momeq_drho(int* iobj, const int* ndims, int* dims, int* ierr); 

/**
 * Get scaled Z sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psGet_dxzjsin_momeq_drho F77NAME(psget_dxzjsin_momeq_drho)
void psGet_dxzjsin_momeq_drho(int* iobj, const int* n1, const int* n2, double* data, int* ierr);

/**
 * Set scaled Z sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object 
 * @param n1 data dimension along axis 0 
 * @param n2 data dimension along axis 1 
 * @param data data to set
 * @param ierr error code (0=OK)
 */
#define psSet_dxzjsin_momeq_drho F77NAME(psset_dxzjsin_momeq_drho)
void psSet_dxzjsin_momeq_drho(int* iobj, const int* n1, const int* n2, const double* data, int* ierr);

/**
 * Get number of dimension of scaled Z sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param ierr error code (0=OK)
 */
#define psGetRnk_dxzjsin_momeq_drho F77NAME(psgetrnk_dxzjsin_momeq_drho)
void psGetRnk_dxzjsin_momeq_drho(int* iobj, int* ndims, int* ierr); 

/**
 * Get dimensions of scaled Z sin moments, Fourier Spline representation
 * @param iobj reference to opaque plasma state object
 * @param ndims number of dimensions
 * @param dims dimensions
 * @param ierr error code (0=OK)
 */
#define psGetDim_dxzjsin_momeq_drho F77NAME(psgetdim_dxzjsin_momeq_drho)
void psGetDim_dxzjsin_momeq_drho(int* iobj, const int* ndims, int* dims, int* ierr); 

#ifdef __cplusplus
}
#endif

#endif /* CCPS_H */
        
